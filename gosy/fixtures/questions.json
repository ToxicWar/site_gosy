[
 ["Возникновение и этапы становления информационной технологии. Понятие информатизации. Стратегия перехода к информационному обществу.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>В процессе своего развития человечество в любой сфере деятельности последовательно проходило стадии от ручного кустарного труда до высокотехнологичного промышленного производства. В первую очередь усилия были направлены на облегчение физического труда, а информационная сфера долгие годы была уделом умственного труда человека и с каждым годом требовала большего количества трудовых ресурсов. Появление ЭВМ и сетей передачи данных способствовало революционным процессам в области информатизации и позволило перейти на промышленный уровень технологий и инструментальных средств.</font></p> <p> <font><b>Информационная технология</b></font><font> - совокупность четко определенных целенаправленных действий персонала по переработке информации на компьютере.</font></p> <p> <font><font>В развитии информационной технологии можно выделить этапы. Каждый этап характеризуется определенным признаком.</font></font></p> <p> <font><font><b>Начальный этап развития ИТ</b></font><font> (1950-1960-е годы) характеризуется тем, что в основе взаимодействия человека и ЭВМ лежат машинные языки. ЭВМ доступна только профессионалам</font></font></p> <p> <font><font><b>Следующий этап (1960-1970-е годы</b></font><font>) характеризуются созданием операционных систем. Ведется обработка нескольких заданий, формулируемых разными пользователями; основная цель - наибольшая загрузка машинных ресурсов.</font></font></p> <p> <font><font><b>Третий этап (1970-1980-е годы</b></font><font>) характеризуется изменением критерия эффективности обработки данных, основными стали человеческие ресурсы по разработке и сопровождению программного обеспечения. К этому этапу относятся распространение мини- ЭВМ Осуществляется интерактивный режим взаимодействия нескольких пользователей</font></font></p> <p> <font><font><b>Четвертый этап (1980-1990-е годы</b></font><font>) новый качественный скачек технологии разработки программного обеспечения. Центр тяжести технологических решений переносятся на создания средств взаимодействия пользователей с ЭВМ при создании программного продукта. Ключевое звено новой информационной технологии - представление и обработка знаний. Создаются базы знаний, экспертные системы. Тотальное распространение персональных ЭВМ</font></font></p> <p> <font><font>Заметим, что эволюция всех поколений ЭВМ происходит с постоянным темпом - по 10 лет на поколение. Прогнозы предполагают сохранение темпов до начала 21 века.</font></font></p> <p> <font><font>Каждая смена поколений средств информационной технологии требует переобучения и радикальной перестройки мышления специалистов и пользователей, смена оборудования и создания более массовой вычислительной техники. ИТ, как передовая область науки и техники определяет ритм времени технического развития всего общества.</font></font></p> <p> <font><b>Информатизация общества</b></font><font> – это процесс, затрагивающий все сферы общества (социальную, экономическую, техническую и научную) и направленный на создание лучших условий для удовлетворения информационных потребностей всех видов организации и людей.</font></p> <p> <font>Информатизация была отмечена в первую очередь в странах Запада и США, а также в Японии (60-80-е годы XX века). Производству требовалось информационно обслуживание, направленное на обработку большого количества информации.</font></p> <p> <font>Информатизация стала возможной благодаря появлению компьютеров, которые представляют собой универсальное средство для работы с информацией и обеспечивают широкие возможности для коммуникации. Социальный прогресс на сегодняшний день не возможен без информатизации, а, следовательно, и без компьютеров. При информатизации на первый план выходит комплекс мероприятий, целью которых является использование знания и данных во всех сферах цивилизации. Поэтому информатизация – это более широкое понятие, чем компьютеризация.</font><font><b>Информатизация </b></font><font>– это как бы надстроечный процесс, происходящий на базе компьютеризации, процесс формирования новой, автоматизированной среды зарождения знаний, их переработки, распространения и превращения в силу, в материальный фактор.</font></p> <p> <font><b>Информатизация должна</b></font><font> способствовать развитию города, региона, страны.</font></p> <p> <font><b>Обычно начальная фаза перехода</b></font><font> к информационному обществу характеризуется массовым стихийным внедрением автономной вычислительной техники, несложного телекоммуникационного оборудования и автоматизацией простейших процессов.</font></p> <p> <font><b>Следующая фаза</b></font><font> отличается созданием и использованием достаточно сложных общегородских, ведомственных и коммерческих информационных систем, баз данных, формированием единого информационного пространства с помощью телекоммуникационных сетей. Сложность работы и затраты на второй стадии информатизации значительно выше, чем на первой, и требуют соответствующего нормативно-правового и организационного обеспечения, многопрофильной кооперации и координации со стороны участников процесса.</font></p> <p> <font><font><b>К основным стратегическим целям информатизации любого региона можно отнести:</b></font></font></p> <p> • <font><font>обеспечение каждому жителю региона свободного доступа ко всей информации, необходимость в которой возникает в процессе его деятельности, отдыха и в быту;</font></font></p> <p> • <font><font>формирование информационных потребностей населения и обеспечение каждому жителю региона возможности фактического удовлетворения этих потребностей;</font></font></p> <p> • <font><font>формирование информационной культуры населения;</font></font></p> <p> • <font><font>превращение информационных ресурсов региона в стратегический ресурс устойчивого и поступательного развития, направленного на достижение главной цели развития региона — стабильного улучшения качества жизни всех слоев населения;</font></font></p> <p> • <font><font>обеспечение информационной безопасности региона и каждого его жителя.</font></font></p> <p> <font><b>К стратегическим направлениям перехода к информационному обществу относятся:</b></font></p> <p> • <font>формирование единого информационного пространства региона и интеграция его в информационное пространство России и единое мировое информационное пространство;</font></p> <p> • <font>подготовка населения региона к формированию информационного общества и к жизни в этом обществе;</font></p> <p> • <font>создание правовых основ перехода к информационному обществу и обеспечение условий их практического применения;</font></p> <p> • <font>создание информационной экономики региона;</font></p> <p> • <font>осуществление свободного доступа к информации каждому жителю региона при обеспечении информационной безопасности личности, общественных групп и всего населения региона в целом;</font></p> <p> • <font>научное сопровождение формирования информационного общества;</font></p> <p> • <font>участие в межрегиональном и международном сотрудничестве и разделении труда при формировании информационного общества города, регионов, стран и мира.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Общая классификация видов информационных технологий и их реализация в промышленности, административном управлении, обучении.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>В настоящее время классификация информационных технологий (ИТ) проводится по следующим признакам: </b></font> </p> <p> <font>1. способу реализации в автоматизированных информационных системах (АИС),</font> </p> <p> <font>2. степени охвата задач управления,</font> </p> <p> <font>3. классам реализуемых технологических операций,</font> </p> <p> <font>4. типу пользовательского интерфейса,</font> </p> <p> <font>5. вариантам использования сети ЭВМ,</font> </p> <p> <font>6. обслуживаемой предметной области и др.</font></p> <p> <font><b>1) По способу реализации ИТ делятся на традиционные и современные ИТ.</b></font><font> </font><font><b>Традиционные ИТ</b></font><font> существовали в условиях централизованной обработки данных, до периода массового использования ПЭВМ. Они были ориентированы главным образом на снижение трудоемкости пользователя (например, инженерные и научные расчеты, формирование регулярной отчетности на предприятиях и др.).</font><font><b>Новые (современные) ИТ</b></font><font> связаны в первую очередь с информационным обеспечением процесса управления в режиме реального времени.</font></p> <p> <font><b>2) По степени охвата информационными технологиями задач управления выделяют</b></font><font>: электронную обработку данных, автоматизацию функций управления, поддержку принятия решений, электронный офис, экспертную поддержку.</font> </p> <p> <font><b>В первом случае электронная обработка данных</b></font><font> выполняется с использованием ЭВМ без пересмотра методологии и организации процессов управления при решении локальных математических и экономических задач.</font> </p> <p> <font><b>Во втором случае при автоматизации управленческой</b></font><font> деятельности вычислительные средства используются для комплексного решения функциональных задач, формирования регулярной отчетности и работы в информационно-справочном режиме для подготовки управленческих решений. К этой же группе относятся ИТ</font><font><b>поддержки принятия решений</b></font><font>, которые предусматривают широкое использование экономико-математических методов и моделей, пакеты прикладных программ (ППП) для аналитической работы и формирования прогнозов, составления бизнес-планов, обоснованных оценок и выводов по процессам и явлениям производственно-хозяйственной деятельности.</font> </p> <p> <font>К названной группе относятся и широко внедряемые в настоящее время ИТ, получившие название электронного офиса и экспертной поддержки принятия решений.</font><font><b>Электронный офис</b></font><font> предусматривает наличие интегрированных ППП, которые обеспечивают комплексную реализацию задач предметной области. В настоящее время все большее распространение приобретают электронные офисы, сотрудники и оборудование которых могут находиться в разных помещениях. </font><font><b>ИТ экспертной поддержки принятия решений</b></font><font> составляют основу автоматизации труда специалистов-аналитиков. Эти работники кроме аналитических методов и моделей для исследования складывающихся ситуаций вынуждены использовать накопленный опыт в оценке ситуаций, т.е. сведения, составляющие базу знаний в конкретной предметной области.</font></p> <p> <font><b>3) По классу реализуемых технологических операций ИТ подразделяются</b></font><font>: на работу с текстовым и табличным процессорами, графическими объектами, системы управления БД, гипертекстовые и мультимедийные системы.</font> </p> <p> <font>Технология формирования видеоизображения получила название компьютерной графики.</font> </p> <p> <font><b>Компьютерная графика</b></font><font> - это создание, хранение и обработка моделей объектов и их изображений с помощью ЭВМ. Эта технология проникла в область моделирования различных конструкций (машиностроение, авиационная техника, автомобилестроение, строительная техника и др.), экономического анализа, проникает в рекламную деятельность, делает занимательным досуг. Формируемые и обрабатываемые с помощью цифрового процессора изображения могут быть демонстрационными и анимационными. К демонстрационным изображениям относят, как правило, коммерческую (деловую) и иллюстрационную графику. Ко второй группе - анимационной графике - принадлежит инженерная и научная графика.</font></p> <p> <font>В классическом понимании</font><font><b>система управления БД</b></font><font> (СУБД) представляет собой набор программ, позволяющих создавать и поддерживать БД в актуальном состоянии.</font></p> <p> <font><b>Гипертекстовая технология</b></font><font> - организация текста в виде иерархической структур Материал текста делится на фрагменты. Каждый видимый на экране ЭВМ фрагмент, дополненный многочисленными связями с другими фрагментами, позволяет уточнить информацию об изучаемом объекте и двигаться в одном или нескольких направлениях по выбранной связи.</font></p> <p> <font><b>Мультимедиа-технология</b></font><font> - программно-техническая организация обмена с компьютером текстовой, графической, аудио и видеоинформацией.</font></p> <p> <font><b>4) По типу пользовательского интерфейса</b></font><font> можно рассматривать ИТ с точки зрения возможностей доступа пользователя к информационным и вычислительным ресурсам. Так,</font><font><b>пакетная ИТ</b></font><font> исключает возможность пользователя влиять на обработку информации, пока она проводится в автоматическом режиме. В отличие от пакетной</font><font><b>диалоговая ИТ</b></font><font> предоставляет пользователю неограниченную возможность взаимодействовать с хранящимися в системе информационными ресурсами в реальном масштабе времени, получая при этом всю необходимую информацию для решения функциональных задач и принятия решений.</font> </p> <p> <font>Интерфейс</font><font><b>сетевой ИТ</b></font><font> предоставляет пользователю средства доступа к территориально распределенным информационным и вычислительным ресурсам благодаря развитым средствам связи.</font></p> <p> <font>В настоящее время наблюдается тенденция к объединению различных типов ИТ в единый компьютерно — технологический комплекс, который носит название интегрированного. Особое место в нем принадлежит средствам коммуникации, обеспечивающим не только чрезвычайно широкие технологические возможности автоматизации управленческой деятельности, но и являющимся основой создания самых разнообразных сетевых вариантов ИТ: локальных, многоуровневых, распределенных и глобальных информационно-вычислительных сетей.</font></p> <p> <font><b>5) По обслуживаемым предметным областям</b></font><font> ИТ подразделяются разнообразно. Например, только в экономике ими являются, бухгалтерский учет, банковская, налоговая и страховая деятельность и др. Рассмотрим типичные применения информационных технологий, применяемых в управленческой системе предприятия:</font></p> <p> <font><b>Бухгалтерский учет</b></font><font> - классическая область применения информационных технологий и наиболее часто реализуемая на сегодняшний день задача. Во-первых, ошибка бухгалтера может стоить очень дорого, поэтому очевидна выгода использования возможностей автоматизации бухгалтерии. Во-вторых, задача бухгалтерского учета довольно легко формализуется, так что разработка систем автоматизации бухгалтерского учета не представляет технически сложной проблемы.</font></p> <p> <font><b>Управление финансовыми потоками.</b></font><font> Внедрение информационных технологий в управление финансовыми потоками также обусловлено критичностью этой области управления предприятия к ошибкам. Неправильно построив систему расчетов с поставщиками и потребителями, можно спровоцировать кризис наличности даже при налаженной сети закупки, сбыта и хорошем маркетинге. И наоборот, точно просчитанные и жестко контролируемые условия финансовых расчетов могут существенно увеличить оборотные средства фирмы.</font></p> <p> <font><b>Управление складом, ассортиментом, закупками.</b></font><font> Можно автоматизировать процесс анализа движения товара.</font></p> <p> <font><b>Управление производственным процессом</b></font><font> представляет собой очень трудоемкую задачу. Основными механизмами здесь являются планирование и оптимальное управление производственным процессом.</font></p> <p> <font>Автоматизированное решение подобной задачи дает возможность грамотно планировать, учитывать затраты, проводить техническую подготовку производства, оперативно управлять процессом выпуска продукции в соответствии с производственной программой и технологией.</font></p> <p> <font><b>Управление маркетингом</b></font><font> подразумевает сбор и анализ данных о фирмах-конкурентах, их продукции и ценовой политике, а также моделирование параметров внешнего окружения для определения оптимального уровня цен, прогнозирования прибыли и планирования рекламных кампаний. Решение большинства этих задач могут быть формализованы и представлены в виде информационной системы, позволяющей существенно повысить эффективность управления маркетингом.</font></p> <p> <font><b>Документооборот</b></font><font> является очень важным процессом деятельности любого предприятия. Хорошо отлаженная система учетного документооборота отражает реально происходящую на предприятии текущую производственную деятельность и дает управленцам возможность воздействовать на нее. Поэтому автоматизация документооборота позволяет повысить эффективность управления.</font></p> <p> <font><b>Оперативное управление предприятием.</b></font><font> Информационная технология, решающая задачи оперативного управления предприятием строится на основе базы данных, в которой фиксируется вся возможная информация о предприятии. Информационная система оперативного управления включает в себя массу программных решений автоматизации бизнес-процессов, имеющих место на конкретном предприятии.</font></p> <p> <font><b>Предоставление информации о фирме.</b></font><font> Активное развитие сети Интернет привело к необходимости создания корпоративных серверов для предоставления различного рода информации о предприятии. Практически каждое уважающее себя предприятие сейчас имеет свой web-сервер. Web-сервер предприятия решает ряд задач, из которых можно выделить две основные:</font></p> <p> <font>1. создание имиджа предприятия;</font></p> <p> <font>2. максимальная разгрузка справочной службы компании путем предоставления потенциальным и уже существующим абонентам возможности получения необходимой информации о фирме,</font></p> <p> <font>3. предлагаемых товарах, услугах и ценах.</font></p> <p> <font>Кроме того, использование web-технологий открывает широкие перспективы для электронной коммерции и обслуживания покупателей через Интернет.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Модели информационных процессов передачи, обработки, накопления данных.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Информационные технологии основаны на реализации информационных процессов, разнообразие которых требует выделения базовых. К ним можно отнести извлечение, транспортирование, обработку, хранение, представление и использование информации. На логическом уровне должны быть построены математические модели, обеспечивающие параметрическую и критериальную совместимость информационных процессов в системе информационных технологий.</font></p> <p> <font>В процессе извлечения информации основной акцент сделан на формы и методы исследования данных, позволяющих формализовать и абстрагированно описать предметную область.</font><font><b>Процесс транспортирования информации</b></font><font> рассматривается в рамках эталонной семиуровневой модели, известной как модель</font><font>OSI</font><font>. Большое внимание уделено протоколам различных уровней, обеспечивающих необходимый уровень стандартизации. </font><font><b>Процессы обработки информации</b></font><font> излагаются в аспекте поддержки принятия решений с выделением типовых компонентов. </font><font><b>Хранение информации</b></font><font> представляется с одной стороны, как совокупность моделей концептуального, логического и физического уровней, с другой — как набор методов и способов практической реализации. Большое внимание уделено эргономическим и психологическим факторам при распределении функции между человеком и техническими устройствами в процессе представления и использования информации.</font></p> <p> <font><b>Основным физическим способом реализации операции транспортировки</b></font><font><b> (передачи)</b></font><font>является использование локальных сетей и сетей передачи данных. При разработке и использовании сетей для обеспечения совместимости используется ряд стандартов, объединенных в семиуровневую модель открытых систем, принятую во всем мире и определяющую правила взаимодействия компонентов сети на данном уровне (протокол уровня) и правила взаимодействия компонентов различных уровней (межуровневый интерфейс). Международные стандарты в области сетевого информационного обмена нашли отражение в эталонной семиуровневой модели, известной как модель</font><font>OSI</font><font> (</font><font>OpenSystemInterconnetction</font><font> — связь открытых систем). Большинство производителей сетевых программно-аппаратных средств стремятся придерживаться модели </font><font>OSI</font><font>. Но в целом добиться полной совместимости пока не удается.</font></p> <p> <font><i><b>Физический уровень</b></i></font><font><i> </i></font><font>реализует физическое управление и относится к физической цепи, например телефонной, по которой передается информация. На этом уровне модель</font><font>OSI</font><font> определяет физические, электрические, функциональные и процедурные характеристики цепей связи, а также требования к сетевым адаптерам и модемам.</font></p> <p> <font><i><b>Канальный уровень</b></i></font><font><i>. </i></font><font>На этом уровне осуществляется управление звеном сети (каналом) и реализуется пересылка блоков (совокупности битов) информации по физическому звену. Осуществляет такие процедуры управления, как определение начала и конца блока, обнаружение ошибок передачи, адресация сообщений и др. Канальный уровень определяет правила совместного использования сетевых аппаратных средств компьютерами сети.</font></p> <p> <font><i><b>Сетевой уровень</b></i></font><font><i> </i></font><font>относится к виртуальной (воображаемой) цепи, которая не обязана существовать физически. С помощью интерфейса, обеспечиваемого этим уровнем, удается «спрятать» сложности управления передачей на физическом уровне. Программные средства данного уровня обеспечивают определение маршрута передачи пакетов в сети. Маршрутизаторы, обеспечивающие поиск оптимального маршрута на основе анализа адресной информации, функционируют на сетевом уровне модели</font><font>OSI</font><font>. В качестве простейшего маршрутизирующего устройства между сегментами сети или различными локальными сетями может выступать и устройство, функционирующее на более низком канальном уровне модели </font><font>OSI</font><font>, называемое мостом.</font></p> <p> <font><i><b>Транспортный уровень</b></i></font><font><i>. </i></font><font>Первые три уровня образуют общую сеть, в которой коллективно могут работать многие пользователи. На транспортном уровне контролируется очередность пакетов сообщений и их принадлежность. Таким образом, в процессе обмена между компьютерами поддерживается виртуальная связь, аналогичная телефонной коммутации.</font></p> <p> <font><i><b>Сеансовый уровень</b></i></font><font><i>. </i></font><font>В некоторых случаях трудно организовать процесс взаимодействия между пользователями из-за обилия способов такого взаимодействия. Для устранения этих трудностей на данном уровне координируются и стандартизируются процессы установления сеанса, управления передачей и приемом пакетов сообщений, завершения сеанса. На сеансовом уровне между компьютерами устанавливается и завершается виртуальная связь по такому же принципу, как при голосовой телефонной связи.</font></p> <p> <font><i><b>Управление представлением.</b></i></font><font><i> </i></font><font>Программные средства этого уровня выполняют преобразования данных из внутреннего формата передающего компьютера во внутренний формат компьютера-получателя, если эти форматы отличаются друг от друга (например,</font><font>IBMPC</font><font> и</font><font>DEC</font><font>). Данный уровень включает функции, относящиеся к используемому набору символов, кодированию данных и способам представления данных на экранах дисплеев или печати. Помимо конвертирования форматов на данном уровне осуществляется сжатие передаваемых данных и их распаковка.</font></p> <p> <font><i><b>Прикладной уровень</b></i></font><font><i> </i></font><font>относится к функциям, которые обеспечивают поддержку пользователю на более высоком прикладном и системном уровнях, например:</font></p> <p> • <font>организация доступа к общим сетевым ресурсам: информации, дисковой памяти, программным приложениям, внешним устройствам (принтерам, стримерам и др.);</font></p> <p> • <font>общее управление сетью (управление конфигурацией, разграничение доступа к общим ресурсам сети, восстановление работоспособности после сбоев и отказов, управление производительностью);</font></p> <p> • <font>передача электронных сообщений, включая электронную почту;</font></p> <p> • <font>организация электронных конференций;</font></p> <p> • <font>диалоговые функции высокого уровня.</font></p> <p> <font>Модель</font><font>OSI</font><font> представляет собой стандартизированный каркас и общие рекомендации, требования же к конкретным компонентам сетевого программного обеспечения задаются протоколами.</font></p> <p> <font><b>Обработка информации</b></font><font> состоит в получении одних «информационных объектов» из других «информационных объектов» путем выполнения некоторых алгоритмов и является одной из основных операций, осуществляемых над информацией, и главным средством увеличения ее объема и разнообразия.</font></p> <p> <font>На самом верхнем уровне можно выделить</font><font><b>числовую и нечисловую обработку</b></font><font>. В указанные виды обработки вкладывается различная трактовка содержания понятия «данные».</font><font><b>При числовой обработке</b></font><font> используются такие объекты, как переменные, векторы, матрицы, многомерные массивы, константы и т.д.</font><font><b>При нечисловой обработке</b></font><font> объектами могут быть файлы, записи, поля, иерархии, сети, отношения и т.д. Другое отличие заключается в том, что при числовой обработке содержание данных не имеет большого значения, в то время как при нечисловой обработке нас интересуют непосредственные сведения об объектах, а не их совокупность в целом.</font></p> <p> <font><b>С точки зрения реализации на основе современных достижений вычислительной техники выделяют следующие виды обработки информации:</b></font></p> <p> • <font>последовательная обработка, применяемая в традиционной фоннеймановской архитектуре ЭВМ, располагающей одним процессором;</font></p> <p> • <font>параллельная обработка, применяемая при наличии нескольких процессоров в ЭВМ;</font></p> <p> • <font>конвейерная обработка, связанная с использованием в архитектуре ЭВМ одних и тех же ресурсов для решения разных задач, причем если эти задачи тождественны, то это последовательный конвейер, если задачи одинаковые — векторный конвейер.</font></p> <p> <font><b>Основные процедуры обработки данных приведены ниже</b></font><font>.</font></p> <p> <font><b>Создание данных</b></font><font>, как процесс обработки, предусматривает их образование в результате выполнения некоторого алгоритма и дальнейшее использование для преобразований на более высоком уровне.</font></p> <p> <font><b>Модификация данных</b></font><font> связана с отображением изменений в реальной предметной области, осуществляемых путем включения новых данных и удаления ненужных.</font></p> <p> <font><b>Контроль, безопасность и целостность</b></font><font> направлены на адекватное отображение реального состояния предметной области в информационной модели и обеспечивают защиту информации от несанкционированного доступа (безопасность) и от сбоев и повреждений технических и программных средств.</font></p> <p> <font><b>Поиск информации</b></font><font>, хранимой в памяти компьютера, осуществляется как самостоятельное действие при выполнении ответов на различные запросы и как вспомогательная операция при обработке информации.</font></p> <p> <font>Реализация всех действий, выполняемых в процессе обработки информации, осуществляется с помощью разнообразных программных средств.</font></p> <p> <font><b>Хранение и накопление</b></font><font><b> </b></font><font>являются одними из основных действий, осуществляемых над информацией и главным средством обеспечения ее доступности в течение некоторого промежутка времени. В настоящее время определяющим направлением реализации этой операции является концепция</font><font><b>базы данных, склада (хранилища) данных</b></font><font>.</font></p> <p> <font>База данных может быть определена как совокупность взаимосвязанных данных, используемых несколькими пользователями и хранящихся с регулируемой избыточностью. Хранимые данные не зависят от программ пользователей, для модификации и внесения изменений применяется общий управляющий метод.</font></p> <p> <font><b>Банк данных</b></font><font>— система, представляющая определенные услуги по хранению и поиску данных определенной группе пользователей по определенной тематике.</font></p> <p> <font><b>Система баз данных </b></font><font>— совокупность управляющей системы, прикладного программного обеспечения, базы данных, операционной системы и технических средств, обеспечивающих информационное обслуживание пользователей.</font></p> <p> <font><b>Хранилище данных (ХД)</b></font><font> — это база, хранящая данные, агрегированные по многим измерениям. Основные отличия ХД от БД: агрегирование данных; данные из ХД никогда не удаляются; пополнение ХД происходит на периодической основе; формирование новых агрегатов данных, зависящих от старых — автоматическое; доступ к ХД осуществляется на основе многомерного куба или гиперкуба.</font></p> <p> <font>Альтернативой хранилищу данных является концепция витрин данных (</font><font>DataMart</font><font>). </font><font><b>Витрины данных </b></font><font>— множество тематических БД, содержащих информацию, относящуюся к отдельным информационным аспектам предметной области.</font></p> <p> <font><font>Еще одним важным направлением развития баз данных являются репозитарии. Репозитарий, в упрощенном виде, можно рассматривать просто как базу данных, предназначенную для хранения не пользовательских, а системных данных.4Технология репози-тариев проистекает из словарей данных, которые по мере обогащения новыми функциями и возможностями приобретали черты инструмента для управления метаданными.</font></font></p> " ],
 ["Информатизация как процесс перехода от индустриального общества к информационному.", "<p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Обычно начальная фаза перехода к информационному обществу</b></font><font> характеризуется массовым стихийным внедрением автономной вычислительной техники, несложного телекоммуникационного оборудования и автоматизацией простейших процессов.</font></p> <p> <font><b>Следующая фаза</b></font><font> отличается созданием и использованием достаточно сложных общегородских, ведомственных и коммерческих информационных систем, баз данных, формированием единого информационного пространства с помощью телекоммуникационных сетей. Сложность работы и затраты на второй стадии информатизации значительно выше, чем на первой, и требуют соответствующего нормативно-правового и организационного обеспечения, многопрофильной кооперации и координации со стороны участников процесса.</font></p> <p> <font><b>К стратегическим направлениям перехода к информационному обществу относятся:</b></font></p> <p> • <font>формирование единого информационного пространства региона и интеграция его в информационное пространство России и единое мировое информационное пространство;</font></p> <p> • <font>подготовка населения региона к формированию информационного общества и к жизни в этом обществе;</font></p> <p> • <font>создание правовых основ перехода к информационному обществу и обеспечение условий их практического применения;</font></p> <p> • <font>создание информационной экономики региона;</font></p> <p> • <font>осуществление свободного доступа к информации каждому жителю региона при обеспечении информационной безопасности личности, общественных групп и всего населения региона в целом;</font></p> <p> • <font>научное сопровождение формирования информационного общества;</font></p> <p> • <font>участие в межрегиональном и международном сотрудничестве и разделении труда при формировании информационного общества города, регионов, стран и мира.</font></p> <p> <font><b>Для этого необходимо решить следующие стратегические задачи:</b></font></p> <p> • <font>создание и развитие информационной инфраструктуры региона и интеграция ее в национальную и мировую информационные инфраструктуры;</font></p> <p> • <font>перевод в цифровую форму и на машиночитаемые носители информационного фонда региона, формирование его информационных ресурсов;</font></p> <p> • <font>создание условий для роста информационной индустрии (промышленного производства информации и оказания информационных услуг);</font></p> <p> • <font>широкое применение современных информационных и телекоммуникационных технологий;</font></p> <p> • <font>ориентация воспитания и образования на формирование информационных культуры и потребностей, соответствующих информационному обществу;</font></p> <p> • <font>обеспечение информационной безопасности личности, общества и государства, а также прав граждан и социальных институтов на свободное получение, распространение и использование информации;</font></p> <p> • <font>формирование соответствующих банков и баз данных;</font></p> <p> • <font>удовлетворение «первоначальных» потребностей в информационной технике;</font></p> <p> • <font>формирование индустрии программных средств;</font></p> <p> • <font>разработка и начало формирования информационной инфраструктуры, рынка информационных продуктов и услуг.</font></p> <p> <font>Решение перечисленных задач позволит пройти первый</font><font><b>этап формирования информационного общества — этап компьютеризации.</b></font><font>При этом предусматривается опережающее развитие научно-технических направлений, непосредственно обеспечивающих создание и эффективное применение новых информационных технологий, модернизацию конструкторской, технологической и промышленных баз производства информационных средств и их элементов, экстенсивное распространение вычислительной и микропроцессорной техники на различные области человеческой деятельности. Начинает создаваться система, обеспечивающая формирование всеобщей компьютерной грамотности как основы воспитания информационной культуры населения. Таким образом, </font><font><b>основной задачей этапа</b></font><font>является насыщение города вычислительной и микропроцессорной техникой.</font></p> <p> <font><b>На втором этапе предусматривается развитие информационной инфраструктуры региона</b></font><font>и обеспечение условий для включения его в состав мировой экономической системы.</font></p> <p> <font><b>На данном этапе осуществляются:</b></font></p> <p> • <font>обеспечение потребностей населения региона в средствах информационной техники, в первую очередь, в персональных компьютерах и периферийных устройствах;</font></p> <p> • <font>создание широкой сети банков и баз данных;</font></p> <p> • <font>создание локальных и корпоративных информационных сетей и опорных зон формирования информационного общества и подключение их к глобальным сетям;</font></p> <p> • <font>создание широкой интегрированной сети телефонной и цифровой связи.</font></p> <p> <font>Этап характеризуется компьютерным освоением информационного фонда, загрузкой его в базы данных, объединенные в локальные и корпоративные информационные сети. Свободный доступ к информации, хранящейся в таких базах, имеет только ограниченный круг пользователей. Происходит подключение этих сетей к глобальным и их интеграция. Продолжается формирование информационной культуры населения. Второй этап формирования информационного общества может быть назван этапом персонализации информационного фонда и интеграции информационных сетей.</font></p> <p> <font><b>Целью третьего этапа</b></font><font> является развитие и удовлетворение основных информационных потребностей населения.</font></p> <p> <font><b>Этот этап включает:</b></font></p> <p> • <font>завершение создания информационной инфраструктуры и интеграции ее как составного элемента в мировую инфраструктуру;</font></p> <p> • <font>массовое применение новейших информационных средств, систем и технологий во всех сферах человеческой деятельности;</font></p> <p> • <font>обеспечение каждому жителю региона свободного доступа ко всей информации, необходимость в которой возникает в процессе его деятельности, отдыха и в быту;</font></p> <p> • <font>завершение воспитания информационной культуры населения.</font></p> <p> <font>Третий этап формирования информационного общества характеризуется обеспечением свободного доступа ко всей информации, накопленной человечеством, возможностью не только пользоваться городским, общегосударственным и мировым информационными фондами, но и непосредственно пополнять их. Информационный фонд становится достоянием практически каждого жителя и превращается в основной ресурс развития города, поэтому третий этап можно назвать этапом социализации и актуализации информационного фонда.</font></p> <p> <font><b>Реализация перечисленных выше задач предполагает дальнейшее развити</b></font><font>е и внедрение во все сферы человеческой деятельности перспективных информационных технологий, позволяющих человеку жить и работать в новой информационной среде. Эти технологии поддерживают базовые информационные процессы, обеспечивающие подготовку, сбор, передачу, накопление и хранение информации, а также преобразование данных в знания на основе моделей формализации и представления знаний. По содержанию технологии разделяют на: телекоммуникационные с асинхронной передачей данных, </font><font>CASE</font><font>-технологии, технологии распределенных баз данных и знаний с удаленным доступом, мультимедиа-технологии, геоинформационные технологии, высокопроизводительные технологии обработки данных, технологии защиты информации, технологии виртуальной реальности и др. Актуальной задачей является внедрение этих технологий в образование.</font> </p> <p> <font>Это будет способствовать формированию новой информационной культуры.</font></p> <p> <font><font><b>Информационное общество характеризуется следующими признаками:</b></font></font></p> <p> <font><font>1. Большинство работающих (до 80 %) занято в информационной сфере, т. е. сфере производства информации и информационных услуг.</font></font></p> <p> <font><font>2. Любому члену общества практически в любой точке территории и в приемлемое время обеспечена техническая, технологическая и правовая возможность доступа к нужной информации (за исключением военных, государственных, коммерческих секретов).</font></font></p> <p> <font><font>3. Информация становится стратегическим ресурсом общества и занимает ключевое место в экономике, образовании, культуре.</font></font></p> <p><font><font>_________________________________________________________________________________</font></font></p>"],
 ["Системный подход к решению функциональных задач и к организации информационных процессов.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><font>Наиболее эффективно моделирование осуществляется при использовании общих принципов </font><font><b>системного подхода</b></font><font>, лежащего в основе теории систем. Он возник в процессе изучения различных объектов и явлений. К этому методу обычно прибегают при анализе и синтезе больших (сложных) систем. Он предполагает рассмотрение системы путём последовательного перехода от общего к частному, когда исследуемый объект выделяется из окружающей среды.</font></font> </p> <p> <font><font><b>Системный подход</b></font><font> - это направление научных исследований, основанных на рассмотрении сложного объекта как целого множества элементов, включающего отношения и связи между ними; это общеметодический принцип, используемый в различных предметных областях.</font></font></p> <p> <font><font><b>Сущность системного подхода</b></font><font>– это интеграция интеллектуальных усилий общества.</font></font> </p> <p> <font><font>Системный подход базируется на первоначальном исследовании системы, выделении элементов, внутренних и внешних связей, существенным образом влияющих на исследуемые объекты и их функционирование в различных условиях и средах. Он начинается с изучения и детализации её составляющих – разбиения системы на функциональные подсистемы, которые тоже могут делиться. Процесс деления осуществляется до выявления конкретных процедур. При этом исследуемая система сохраняет целостность. Таким образом, разработка системы ведётся сверху вниз, последовательно приближаясь к конечному результату.</font></font> </p> <p> <font><font><b>Системный подход позволяет рассматривать</b></font><font> различные объекты (системы) с единой точки зрения, выявляя важнейшие черты их функционирования и учитывая наиболее существенные факторы. Он эффективно используется при проектировании и эксплуатации информационных систем, особенно автоматизированных систем управления (АСУ), которые по существу являются человеко-машинными системами. </font></font> </p> <p> <font><font><b>Системный подход подразумевает построение моделей.</b></font><font> Обычно эти модели имеют иерархическую структуру, отражающую различные особенности поведения такого сложного объекта, как предприятие, например, модель процессов, представление предприятия как разновидности систем массового обслуживания, модель данных, используемых на предприятии и т.д. При применении системного подхода учитывают все факторы проектируемой системы: функциональные, психологические, социальные, эстетические.</font></font> </p> <p> <font><font>Вне системного подхода, в отсутствие необходимой координации функционирования элементов никакая система не может достичь своей цели. В этой связи актуализируется роль координатора автоматизированного производства, способного организовать деятельность всех его участников.</font></font> </p> <p> <font><font><b>Использование системного подхода</b></font><font> позволяет принять во внимание множество факторов самого различного характера, выделить из них те, которые оказывают самое большое влияние с точки зрения имеющихся общесистемных целей и критериев, и найти пути и методы эффективного воздействия на них. Системный подход позволяет рассматривать анализ и синтез различных по своей природе и сложности объектов с единой точки зрения, выявляя при этом важнейшие характерные черты функционирования системы и учитывая наиболее существенные для всей системы факторы.</font></font> </p> <p> <font><font>Важным для системного подхода является определение структуры системы, понимаемой как совокупность связей между элементами, отражающими их взаимодействие. Наиболее общее – топологическое описание структуры – позволяет в самом общем виде определить составные части системы и формализуется с помощью теории графов. Менее общим считается функциональное описание, предназначенное для рассмотрения поведения отдельных функций (алгоритмов) системы. Оно реализуется с помощью функционального подхода.</font></font> </p> <p> <font><font>Системный подход позволяет выявить общие (типовые) процессы, элементы функционирования системы. На этой основе разрабатываются адекватные решения (рекомендации) по использованию информационных технологий с целью улучшения качества функционирования информационных систем и обслуживания с их помощью различных категорий пользователей.</font></font> </p> <p> <font><font><b>Важным элементом системного подхода</b></font><font> можно считать качественный анализ, основанный на определении функций, их характеристик и возможностей использования в том или ином процессе. Например, в результате качественного анализа можно определить затраты на организацию системы, которые могут превысить доход от её использования.</font></font> </p> <p> <font><font>Однако фактор экономической целесообразности (окупаемость вложений) не всегда может превалировать при решении вопросов использования информационных технологий, например в библиотеках. При разработке моделей и формировании информационных систем, ориентированных на создание информационных продуктов и услуг разработчики должны учитывать их возможный жизненный цикл.</font></font> </p> <p> <font><font><b>При использовании информационных технологий в системном аспекте необходимо соблюдать следующие принципы:</b></font></font></p> <p> <font><font>1</font><font><b>. Наличие сформулированной единой цели</b></font><font> у информационных технологий в рамках разрабатываемой системы. Для глобальной информационной технологии такой целью является формирование информационного ресурса в обществе. Для базовой информационной технологии целью может быть накопление информации и формирование знаний для создания концептуальной модели производства конечного продукта. Для каждого вида информационной технологии должны быть сформулированы свои локальные цели с подчинением их единой цели, определенной метасистемой.</font></font></p> <p> <font><font>2</font><font><b>. Согласование информационных технологий</b></font><font> по входам и выходам с окружающей средой.</font></font></p> <p> <font><font>В информационных технологиях как системе должны быть определены оптимальные точки доступа пользователей при условии их высокой интеллектуализации, что будет способствовать широкому внедрению информационных технологий во все сферы человеческой деятельности. Структура информационной технологии должна органически вписываться в организационную структуру той системы, где она применяется. Необходимо выполнить оптимальное распределение средств информационных технологий с адаптацией их к возможностям пользователей на всех уровнях управления производством, научным исследованием, проектированием.</font></font></p> <p> <font><font>3</font><font><b>. Типизация структур информационных технологий</b></font><font>. Это прежде всего относится к базовым информационным технологиям. Должны быть проведены типизация систем, в которые внедряются информационные технологии, и типизация структур базовых технологий по областям их применения. Очевидны специфические особенности структурной реализации технологии в производстве, научном исследовании, комплексном испытании, проектировании, обучении. Особое внимание желательно обратить на конкретные информационные технологии с тем, чтобы имелась возможность их настройки на реальные параметры системы.</font></font></p> <p> <font><font>4.</font><font><b>Стандартизация и взаимная увязка средств информационной технологии</b></font><font>. Опыт внедрения информационных технологий в различных предметных областях показал, что только при максимальной типизации проектных решений и стандартизации их реализаций возможен успех в использовании новой техники.</font></font></p> <p> <font><font>5.</font><font><b>Открытость информационных технологий как системы. </b></font><font>При разработке информационной технологии исходная цель ее создания в ряде случаев будет неполной, поэтому создаваемая информационная технология должна быть способна к развитию как по вертикали, так и по горизонтали и охватывать все уровни управления и автоматизации производства. В процессе функционирования информационная технология за счет работы проектировщика должна пополняться новыми решениями задач. Необходимо предусмотреть и расширение модели предметной области, на которую настроены информационные технологии.</font></font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Особенности новых информационных технологий; модели, методы и средства их реализации.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Информационная технология является наиболее важной составляющей процесса использования информационных ресурсов общества. К настоящему времени она прошла несколько эволюционных этапов, смена которых определялась главным образом развитием научно-технического прогресса, появлением новых технических средств переработки информации. В современном обществе основным техническим средством технологии переработки информации служит персональный компьютер. Внедрение персонального компьютера в информационную сферу и применение телекоммуникационных средств связи определили новый этап развития информационной технологии и, как следствие, изменение ее названия за счет присоединения одного из синонимов: 'новая', 'компьютерная' или 'современная'.</font></p> <p> <font><b>Прилагательное 'новая</b></font><font>' подчеркивает новаторский, а не эволюционный характер этой технологии. Ее внедрение является новаторским актом в том смысле, что она существенно изменяет содержание различных видов деятельности в организациях. В понятие новой информационной технологии включены также коммуникационные технологии, которые обеспечивают передачу информации разными средствами, а именно - телефон, телеграф, телекоммуникации, факс и др.</font> </p> <p> <font><b>Основные характеристики новой информационной технологии</b></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_78d59599.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_78d59599.png'></p> <p> <font><b>Новая информационная технология</b></font><font>– информационная технология на базе новых, компьютерных средств получения, хранения, актуализации информации (знаний).</font></p> <p> <font>Для информационных технологий естественным является то, что они устаревают и заменяются новыми. В связи с этим при внедрении новой информационной технологии необходимо учитывать, что информационные продукты имеют чрезвычайно высокую скорость сменяемости новыми видами или версиями. Периоды сменяемости колеблются от нескольких месяцев до одного года. Поэтому для эффективного использования информационных технологий их необходимо регулярно модернизировать.</font></p> <p> <font>Прилагательное 'компьютерная' подчеркивает, что </font><font><b>основным техническим средством ее реализации </b></font><font>является компьютер.</font></p> <p> <font><b>Три основных принципа новой (компьютерной) информационной технологии:</b></font></p> <p> <font>- интерактивный (диалоговый) режим работы с компьютером;</font></p> <p> <font>- интегрированность с другими программными продуктами;</font></p> <p> <font>- гибкость процесса изменения как данных, так и постановок задач.</font></p> <p> <font>Для эффективного взаимодействия конечных пользователей с вычислительной системой</font><font><b>новые информационные технологии</b></font><font> опираются на принципиально иную организацию интерфейса пользователей с вычислительной системой (так называемого дружественного интерфейса), который выражается прежде всего в следующем:</font></p> <p> <font>1.в обеспечении права пользователя на ошибку благодаря защите информационно-вычислительных ресурсов системы от непрофессиональных действий на компьютере;</font></p> <p> <font>2.в наличии широкого набора иерархических меню, системы подсказок и обучения и т.п., облегчающих процесс взаимодействия пользователя с ПК;</font></p> <p> <font>3.в наличии системы 'отката', позволяющей при выполнении регламентированного действия, последствия которого по каким-либо причинам не удовлетворили пользователя, вернуться к предыдущему состоянию системы.</font></p> <p> <font>По-видимому, более точным следует считать все же термин новая, а не компьютерная информационная технология, поскольку он отражает в ее структуре не только технологии, основанные на использовании компьютеров, но и технологии, основанные на других технических средствах, особенно на средствах, обеспечивающих телекоммуникацию.</font></p> " ],
 ["Этапы эволюции информационной технологии. Перспективы развития информатики и информационных технологий.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Эволюция информационных технологий наиболее ярко прослеживается на процессах хранения, транспортирования и обработки информации.</b></font></p> <p> <font><b>В нулевом поколении</b></font><font> (4000 г. до н.э. — 1900 г.) в течение шести тысяч лет наблюдалась эволюция от глиняных таблиц к папирусу, затем к пергаменту и, наконец, к бумаге. Имелось много новшеств в представлении данных: фонетические алфавиты, сочинения, книги, библиотеки, бумажные и печатные издания. Это были большие достижения, но обработка информации в эту эпоху осуществлялась вручную</font></p> <p> <font><b>Первое поколение</b></font><font> (1900—1955) связано с технологией перфокарт, когда запись данных представлялась на них в виде двоичных структур. Процветание компании</font><font>IBM</font><font> в период 1915—1960 гг. связано с производством электромеханического оборудования для записи данных на карты, сортировки и составления таблиц. Громоздкость оборудования, необходимость хранения громадного количества перфокарт предопределили появление новой технологии, которая должна была вытеснить электромеханические компьютеры.</font></p> <p> <font><b>Второе поколение</b></font><font> (программируемое оборудование обработки записей, 1955—1980 гг.) связано с появлением технологии магнитных лент, каждая из которых могла хранить информацию десяти тысяч перфокарт. Для обработки информации были разработаны электронные компьютеры с хранимыми программами, которые могли обрабатывать сотни записей в секунду. Ключевым моментом этой новой технологии было программное обеспечение, с помощью которого сравнительно легко можно было программировать и использовать компьютеры.</font></p> <p> <font>Программное обеспечение этого времени поддерживало модель обработки записей на основе файлов. Типовые программы последовательно читали несколько входных файлов и производили на выходе новые файлы. Операционные системы обеспечивали абстракцию файла для хранения этих записей, язык управления выполнением заданий и планировщик заданий для управления потоком работ.</font></p> <p> <font><b>Третье поколение</b></font><font> (оперативные базы данных, 1965—1980 гг.) связано с внедрением оперативного доступа к данным в интерактивном режиме, основанном на использовании систем баз данных с оперативными транзакциями.</font></p> <p> <font>Технические средства для подключения к компьютеру интерактивных компьютерных терминалов прошли путь развития от телетайпов к простым алфавитно-цифровым дисплеям и, наконец, к сегодняшним интеллектуальным терминалам, основанным на технологии персональных компьютеров.</font></p> <p> <font>Оперативные базы данных хранились на магнитных дисках или барабанах, которые обеспечивали доступ к любому элементу данных за доли секунды. Эти устройства и программное обеспечение управления данными давали возможность программам считывать несколько записей, изменять их и затем возвращать новые значения оперативному пользователю.</font> </p> <p> <font><b>Четвертое поколение</b></font><font> (реляционные базы данных: архитектура «клиент — сервер», 1980—1995 гг.) явилось альтернативой низкоуровневому интерфейсу. Идея реляционной модели состоит в единообразном представлении сущности и связи. Реляционная модель данных обладает унифицированным языком для определения данных, навигации по данным и манипулирования данными. Работы в этом направлении породили язык, названный </font><font>SQL</font><font> (</font><font>S</font><font>tructured Query Language), принятый в качестве стандарта.</font></p> <p> <font>Сегодня почти все системы баз данных обеспечивают интерфейс </font><font>SQL</font><font>. Кроме того, во всех системах поддерживаются собственные расширения, выходящие за рамки этого стандарта.</font></p> <p> <font>Кроме повышения продуктивности и простоты использования реляционная модель обладает некоторыми неожиданными преимуществами. Она оказалась хорошо пригодной к использованию в архитектуре «клиент—сервер», параллельной обработке и графических пользовательских интерфейсах. Приложение «клиент—сервер» разбивается на две части. Клиентская часть отвечает за поддержку ввода и представление выходных данных для пользователя или клиентского устройства. Сервер отвечает за хранение базы данных, обработку клиентских запросов к базе данных, возврат клиенту общего ответа.</font> </p> <p> <font>Параллельная обработка баз данных была вторым неожиданным преимуществом реляционной модели. Отношения являются однородными множествами записей. Реляционная модель включает набор операций, замкнутых по композиции: каждая операция получает отношения на входе и производит отношение как результат.</font> </p> <p> <font><b>Пятое поколение</b></font><font> (мультимедийные базы данных, с 1995 г.) связано с переходом от традиционных хранящих числа и символы к объектно-реляционным, содержащим данные со сложным поведением. Например, географам следует иметь возможность реализации карт, специалистам в области текстов имеет смысл реализовывать индексацию и выборку текстов, специалистам по графическим образам стоило бы реализовать библиотеки типов для работы с образами. </font> </p> <p> <font>Быстрое развитие Интернета усиливает эти дебаты. Клиенты и серверы Интернета строятся с использованием апплетов и «хелперов», которые сохраняют, обрабатывают и отображают данные того или иного типа. Пользователи вставляют эти апплеты в браузер или сервер. Общераспространенные апплеты управляют звуком, графикой, видео, электронными таблицами, графами. Для каждого из ассоциированных с этими апплетами типов данных имеется библиотека классов. Настольные компьютеры и </font><font>Web</font><font>-браузеры являются распространенными источниками и приемниками большей части данных. Поэтому типы и объектные модели, используемые в настольных компьютерах, будут диктовать, какие библиотеки классов должны поддерживаться на серверах баз данных.</font></p> <p> <font>Подводя итог, следует отметить, что базы данных призваны хранить не только числа и текст. Они используются для хранения многих видов объектов и связей между этими объектами, что мы видим в</font><font>WorldWideWeb</font><font>. </font> </p> <p> <font><font><b>Перспективы развития информационных технологий в сфере управления</b></font></font></p> <p> <font><font><b>Выделяют следующие основные тенденции:</b></font></font></p> <p> • <font><font><b>Усложнение информационных продуктов и возрастание их роли.</b></font><font> В современной экономике финансовое состояние организаций во многом зависит от принимаемых в ней управленческих решений. Основой для принятия управляемого решения являются информационные продукты организации (отчеты, результаты исследований, планы развития, результаты анализа и т.д.). Для формирования качественного информационного продукта необходимо использовать наиболее современные ИТ. Современные программы оснащаются мощным математическим аппаратом, средствами анализа, планирования, оптимизации, а также средствами выхода в глобальные сети.</font></font></p> <p> • <font><font><b>Обеспечение совместимости (интегрированности) ИТ.</b></font><font> В последнее время большой популярностью пользуются интегрированные пакеты пользовательских программ.</font></font></p> <p> • <font><font><b>Ликвидация промежуточных звеньев</b></font><font>. Современные ИТ, автоматизируя задачи управления, устраняют тем самым управленцев среднего и низшего звена, а также сокращают управленческие штаты.</font></font></p> <p> • <font><font><b>Глобализация</b></font><font> – это общая тенденция мировой экономики. Проявляется как в развитии глобальных сетей, глобальных БД, так и в повсеместном использовании единых программ.</font></font></p> <p> • <font><font><b>Конвергенция </b></font><font>т.е. стирание различий между сферами материального и информационного пространства, а также увеличение информационной составляющей в конечном материальном продукте.</font></font></p> <p> • <font><font><b>К параллельному взаимодействию</b></font><font> логических АИТУ, совмещению всех типов информации (текста, графики, цифр, звуков) с ориентацией на одновременное восприятие человеком посредством органов чувств.</font></font></p> <p> • <font><font><b>К ликвидации</b></font><font> всех промежуточных звеньев на пути от источника информации к ее потребителю.</font></font></p> <p> • <font><font><b>К конвергенции</b></font><font>, рассматриваемой как последняя черта современного процесса развития АИТУ, которая заключается в стирании различий между сферами материального производства и информационного бизнеса, в максимальной диверсификации деятельности фирм, взаимопроникновении различных отраслей промышленности, финансового сектора и сферы услуг.</font></font></p> <p> <font><font><b>Основные тенденции ближайших нескольких лет таковы</b></font><font>: планшеты потеснят обычные персональные компьютеры, большинство организаций начнут использовать для работы корпоративные веб-приложения, немалая часть онлайн-друзей в социальных сервисах окажется «не людьми», а многие компании уйдут «в облака». А теперь – обо всем по порядку.</font></font></p> <p> <font><font>Эксперты Gartner полагают, что успешный выход на рынок планшетов <a href='http://www.securitylab.ru/news/tags/IP-%E0%E4%F0%E5%F1/'>iPad</a> подогреет разработки в этой области, и к 2013 году 80% коммерческих организаций будут использовать планшеты в повседневной работе. Причем, если сейчас iPad и им подобные используются преимущественно для потребления контента, в будущем их приспособят контент создавать – и многим пользователям даже для работы (а не только для развлечений) больше не понадобятся громоздкие компьютеры и ноутбуки.</font></font></p> <p> <font><font>К 2014 году 90% компаний обзаведется собственными корпоративными приложениями для личных гаджетов, упрощающими сотрудникам работу (или, наоборот, усложняющими отдых). Причем «инициаторами» этого тренда станут сами работники, предпочитающие пользоваться корпоративными приложениями на собственных девайсах вместо того, чтобы пользоваться неудобными корпоративными компьютерами.</font></font></p> <p> <font><font>Уже в 2015 году 20% крупнейших мировых и «не айтишных» корпораций станут «облачными провайдерами». Это, во-первых, сделает их более независимыми от настоящих IT-провайдеров, во-вторых, превратит компании в конкурентов «айтишникам».</font></font></p> <p> <font><font>Наконец, до 2015 года критические инфраструктуры (финансовая сфера, мобильные коммуникации, электросети и т.д.) большой индустриальной двадцатки (Группа двадцати, G20) будут разрушены или сильно повреждены массивными атаками и «онлайн-саботажем». По оценкам экспертов, последствия таких атак по масштабам можно будет сравнить с последствиями теракта в Штатах 11 сентября 2001 года – а эти последствия дают о себе знать вот уже 9 лет.</font></font> </p> <p><font><font>---------------------------------------------------------------------------------------------------------</font></font></p> <ol>  <li>  <h1><font>Дисциплина: Теория информационных процессов и систем</font></h1> </li></ol> " ],
 ["Основные задачи теории систем. Определение понятия «система». Детерминированные и стохастические системы.", " <p> <font>--------------------------------------------------------------------------------------------------------- </font></p> <p> <font><b>К числу задач, решаемых теорией систем, относятся</b></font><font>: определение общей структуры системы; организация взаимодействия между подсистемами и элементами; учет влияния внешней среды; выбор оптимальной структуры системы; выбор оптимальных алгоритмов функционирования системы.</font></p> <p> <font><b>Основными задачами системного анализа являются</b></font><font>: </font><font><b>задача декомпозиции</b></font><font> (представление системы в виде подсистем, состоящих из более мелких элементов); </font><font><b>задача анализа</b></font><font> (нахождение различного рода свойств системы, ее элементов и окружающей среды с целью определения закономерностей поведения системы);</font><font><b>задача синтеза</b></font><font> (на основе знаний о системе, полученных при решении первых двух задач, создание модели системы, определение ее структуры, параметров, обеспечивающих эффективное функционирование системы, решение задач и достижение поставленных целей).</font></p> <p> <font><font><i><b>Система</b></i></font><font><b> </b></font><font>- совокупность элементов, находящихся в отношениях и связях между собой определенным образом и образующих некоторое целостное единство.</font></font></p> <p> <font><font>Система есть множество элементов, образующих структуру и обеспечивающих определенное поведение в условиях окружающей среды.</font></font></p> <p> <font><b>Детерминированные и стохастические системы.</b></font></p> <p> <font>Если внешние воздействия, приложенные к системе (управляющие и возмущающие) являются определенными известными функциями времени u=f(t). В этом случае состояние системы, описываемой обыкновенными дифференциальными уравнениями, в любой момент времени t может быть однозначно описано по состоянию системы в предшествующий момент времени. Системы, для которых состояние системы однозначно определяется начальными значениями и может быть предсказано для любого момента времени называются </font><font><b>детерминированными.</b></font></p> <p> <font><b>Детерминированные системы</b></font><font> функционируют по заранее заданным правилам, с заранее определенными результатами. Стохастические характеризуются трудно предсказуемыми входными воздействиями внешней или внутренней среды и выходными результатами.</font></p> <p> <font><b>Стохастические системы</b></font><font> – системы, изменения в которых носят случайный характер. Например, воздействие на энергосистему различных пользователей. При случайных воздействиях, данных о состоянии системы недостаточно для предсказания в последующий момент времени.</font> </p> <p> <font>Случайные воздействия могут прикладываться к системе извне, или возникать внутри некоторых элементов (внутренние шумы). Исследование систем при наличии случайных воздействий можно проводить обычными методами, минимизировав шаг моделирования, чтобы не пропустить влияния случайных параметров. При этом, так как максимальное значение случайной величины встречается редко (в основном в технике преобладает нормальное распределение), то выбор минимального шага в большинстве моментов времени не будет обоснован.</font> </p> <p> <font>В подавляющем большинстве случаев при проектировании систем пользуются не максимальным, а наиболее вероятным значением случайного параметра. В этом случае поучается более рациональная система, заранее предполагающая ухудшение работы системы в отдельные промежутки времени. Например, установка катодной защиты.</font> </p> <p> <font>Расчет систем при случайных воздействиях производится с помощью специальных статистических методов. Вводятся оценки случайных параметров, выполненные на основании множества испытаний.</font> </p> <p> <font>Статистические свойства случайной величины определяют по ее функции распределения или плотности вероятности.</font></p> " ],
 ["Терминология теории систем. Простые и сложные системы. Взаимосвязь и взаимодействие между элементами сложной системы.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><font><b>Система</b></font><font>— совокупность элементов, находящихся в определённых отношениях друг с другом и со средой.</font></font></p> <p> <font><b>Элемент.</b></font><font> Под элементом принято понимать простейшую неделимую часть системы. Можно сказать, что</font><font><b>элемент</b></font><font> – это предел деления системы с точек зрения решения конкретной задачи и поставленной цели.</font> </p> <p> <font><b>Подсистема</b></font><font>. Система может быть разделена на элементы не сразу, а последовательным расчленением на</font><font><b>подсистемы</b></font><font>, которые представляют собой компоненты более крупные, чем элементы, и в то же время более детальные, чем система в целом. Возможность деления системы на подсистемы связана с вычленением совокупностей взаимосвязанных элементов, способных выполнять относительно независимые функции, подцели, направленные на достижение общей цели системы.</font> </p> <p> <font><b>Структура.</b></font><font> Структура отражает наиболее существенные взаимоотношения между элементами и их группами (компонентами, подсистемами), которые мало меняются при изменениях в системе и обеспечивают существование системы и ее основных свойств.</font><font><b>Структура</b></font><font> – это совокупность элементов и связей между ними.</font> </p> <p> <font>Структуру часто представляют в виде иерархии.</font><font><b>Иерархия</b></font><font> – это упорядоченность компонентов по степени важности (многоступенчатость, служебная лестница). Между уровнями иерархической структуры могут существовать взаимоотношения строгого подчинения компонентов (узлов) нижележащего уровня одному из компонентов вышележащего уровня, т.е. отношения, так называемого древовидного порядка.</font> </p> <p> <font><b>Связь.</b></font><font> Понятие «связь» входит в любое определение системы наряду с понятием «элемент» и обеспечивает возникновение и сохранение структуры и целостных свойств системы. Это понятие характеризует одновременно и строение (статику), и функционирование (динамику) системы.</font></p> <p> <font><b>Состояние.</b></font><font> Понятием «состояние» обычно характеризуют мгновенную фотографию, «срез» системы, остановку в ее развитии. Его определяют либо через входные воздействия и выходные сигналы (результаты), либо через макропараметры, макросвойства системы (например, давление, скорость, ускорение – для физических систем; производительность, себестоимость продукции, прибыль – для экономических систем).</font></p> <p> <font><b>Поведение.</b></font><font> Если система способна переходить из одного состояния в другое (например, z1→z2→z3), то говорят, что она обладает </font><font><b>поведением.</b></font><font> Этим понятием пользуются, когда неизвестны закономерности переходов из одного состояния в другое. Тогда говорят, что система обладает каким-то поведением, и выясняют его закономерности.</font> </p> <p> <font><b>Внешняя среда</b></font><font>. Под внешней средой понимается множество элементов, которые не входят в систему, но изменение их состояния вызывает изменение поведения системы.</font></p> <p> <font><b>Модель.</b></font><font> Под моделью системы понимается описание системы, отображающее определенную группу ее свойств. Углубление описания – детализация модели. Создание модели системы позволяет предсказывать ее поведение в определенном диапазоне условий.</font></p> <p> <font><b>Модель функционирования (поведения) системы</b></font><font> – это модель, предсказывающая изменение состояния системы во времени, например: натурные (аналоговые), электрические, машинные на ЭВМ и др.</font></p> <p> <font><b>Равновесие</b></font><font> – это способность системы в отсутствие внешних возмущающих воздействий (или при постоянных воздействиях) сохранить свое состояние сколь угодно долго.</font></p> <p> <font><b>Устойчивость.</b></font><font> Под устойчивостью понимается способность системы возвращаться в состояние равновесия после того, как она была из этого состояния выведена под влиянием внешних возмущающих воздействий.</font></p> <p> <font><b>Развитие.</b></font><font> Исследованию процесса развития, соотношения процессов развития и устойчивости, изучению механизмов, лежащих в их основе, уделяют в кибернетике и теории систем большое внимание.</font> </p> <p> <font><b>Цель.</b></font><font> Применение понятия «цель» и связанных с ним понятий целенаправленности, целеустремленности, целесообразности сдерживается трудностью их однозначного толкования в конкретных условиях. Это связано с тем, что процесс целеобразования и соответствующий ему процесс обоснования целей в организационных системах весьма сложен и не до конца изучен. В практических применениях цель – это идеальное устремление, которое позволяет коллективу увидеть перспективы или реальные возможности, обеспечивающие своевременность завершения очередного этапа на пути к идеальным устремлениям.</font></p> <p> <font><font><b>В зависимости от степени сложности</b></font><font> системы делятся на</font><font><b>простые, сложные (большие).</b></font><font><b> </b></font></font> </p> <p> <font><font><b>Простые системы</b></font><font> с достаточной степенью точности могут быть описаны известными математическими соотношениями. Особенность простых систем – в практически взаимной независимости от свойств, которая позволяет исследовать каждое свойство в отдельности в условиях классического лабораторного эксперимента и описать методами традиционных технических дисциплин (электротехника, радиотехника, прикладная механика и др.). Примерами простых систем могут служить отдельные детали, элементы электронных схем и т.п.</font></font> </p> <p> <font><font><b>Сложные системы</b></font><font> состоят из большого числа взаимосвязанных и взаимодействующих элементов, каждый из которых может быть представлен в виде системы (подсистемы). Сложные системы характеризуются многомерностью (большим числом составленных элементов), многообразием природы элементов, связей, разнородностью структуры.</font></font> </p> <p> <font><font>К сложной можно отнести систему, обладающую по крайней мере одним из ниже перечисленных признаков:</font></font> </p> <p> – <font><font>систему можно разбить на подсистемы и изучать каждую из них отдельно;</font></font></p> <p> – <font><font>система функционирует в условиях существенной неопределённости и воздействия среды на неё, обусловливает случайный характер изменения её показателей;</font></font></p> <p> – <font><font>система осуществляет целенаправленный выбор своего поведения.</font></font> </p> <p> <font><b>Связи и взаимодействия между элементами сложных систем</b></font><font> осуществляются переносами (потоками) вещества, энергии и информации. Взаимодействие между элементами системы может иметь различную природу и выражаться разными функциями. Чаще всего рассматриваются</font><font><b>парные взаимодействия</b></font><font>типа «сдал — принял», «сигнал — ответ» или «импульс — реакция». Научный анализ систем в большинстве случаев сосредоточен именно на изучении характера этих функций. Между тем поведение системы часто определяется не столько функциональными характеристиками связей, сколько их причинной направленностью.</font></p> <p> <font>Если есть два связанных процесса А и В, то изменения А во времени могут приводить к разным случаям зависимого от А изменения В, причем однонаправленность изменений считается положительной (знак «+»), а разнонаправленность — отрицательной (знак «-»). Кроме того, речь не идет о пропорциональности изменений. В большинстве случаев зависимости бывают нелинейными. Возможно еще запаздывание ответа.</font></p> <p> <font>Кроме односторонних зависимостей существуют различные варианты</font><font><b>парных двусторонних связей</b></font><font> — взаимозависимостей или взаимодействий. При взаимодействиях главную роль приобретает качественный результат, а не только однонаправленность или противонаправленность сопряженных процессов. Эти взаимоотношения можно представить следующим образом: В первом случае — взаимное противонапраленное (негативное) действие. Во втором случае — двустороннее благоприятствование, взаимопомощь или взаимостимулирование. В третьем случае — сочетание сопряженных благоприятствования и угнетения. В теории систем наиболее важны взаимодействия третьего типа — контуры с отрицательной обратной связью, так как они авторегуляторны и содержат потенциал самоорганизации.</font></p> <p> <font>В сложных системах всегда сочетаются контуры обоих знаков. Следует подчеркнуть, что поведение подобных систем в большей степени определяется наличием контуров обратной связи, а не конкретными значениями коэффициентов, которые обуславливают силу каждой отдельной причинной связи. Чтобы изменить поведение системы, недостаточно изменить коэффициенты, гораздо важнее добавить или изъять какие-то кольца связей, которые могли бы изменить знак системы.</font></p> " ],
 ["Методика системного анализа. Методы экспертных оценок.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><i><b>Методика системного анализа</b></i></font><font><b>.</b></font><font> Методики, реализующие принципы системного анализа в конкретных условиях, направлены на то, чтобы формализовать процесс исследования системы, процесс поставки и решения проблемы. Методика системного анализа разрабатывается и применяется в тех случаях, когда у исследователя нет достаточных сведений о системе, которые позволили бы выбрать адекватный метод формализованного представления системы.</font> </p> <p> <font>Общим для всех методик системного анализа является формирование вариантов представления системы (процесса решения задачи) и выбор наилучшего варианта. Положив в основу методики системного анализа эти два этапа, их затем можно разделить на под этапы. Например,</font><font><b>первый этап можно разделить следующим образом: </b></font><font>Отделение (или ограничение) системы от среды; </font><font></font><font>Выбор подхода к представлению системы; Формирование вариантов (или одного варианта — что часто делают, если система отображена в виде иерархической структуры) представления системы.</font> </p> <p> <font><b>Второй этап можно представить следующими под этапами: </b></font><font>Выбор подхода к оценке вариантов; Выбор критериев оценки и ограничений; Проведение оценки; Обработка результатов оценки;Анализ полученных результатов и выбор наилучшего варианта (или корректировка варианта, если он был один).</font> </p> <p> <font>В настоящее время трудно привести примеры методик, в которых все этапы были бы проработаны равноценно.</font> </p> <p> <font><i><b>Методы экспертных оценок.</b></i></font><font> Термин «эксперт» происходит от латинского слова означающего «опытный».</font> </p> <p> <font>Основа этих методов – различные формы экспертного опроса с последующим оцениванием и выбором наиболее предпочтительного варианта. Возможность использования экспертных оценок, обоснование их объективности базируется на том, что неизвестная характеристика исследуемого явления трактуется как случайная величина, отражением закона распределения которой является индивидуальная оценка эксперта о достоверности и значимости того или иного события. При этом предполагается, что истинное значение исследуемой характеристики находится внутри диапазона оценок, полученных от группы экспертов и что обобщенное коллективное мнение является достоверным.</font> </p> <p> <font><b>Сущность метода экспертных оценок</b></font><font> заключается в проведении экспертами интуитивно-логического анализа проблемы с количественной оценкой суждений и формальной обработкой результатов. Получаемое в результате обработки обобщенное мнение экспертов принимается как решение проблемы. Комплексное использование интуиции (неосознанного мышления), логического мышления и количественных оценок с их формальной обработкой позволяет получить эффективное решение проблемы.</font></p> <p> <font>При выполнении своей роли в процессе управления эксперты производят</font><font><b>две основные функции</b></font><font>: формируют объекты (альтернативные ситуации, цели, решения и т. п.) и производят измерение их характеристик (вероятности свершения событий, коэффициенты значимости целей, предпочтения решений и т. п.). Формирование объектов осуществляется экспертами на основе логического мышления и интуиции. При этом большую роль играют знания и опыт эксперта.</font> </p> <p> <font><b>Характерными особенностями метода экспертных оценок</b></font><font> как научного инструмента решения сложных неформализуемых проблем являются, во-первых, научно обоснованная организация проведения всех этапов экспертизы, обеспечивающая наибольшую эффективность работы на каждом из этапов, и, во-вторых, применение количественных методов как при организации экспертизы, так и при оценке суждений экспертов и формальной групповой обработке результатов. Эти две особенности отличают метод экспертных оценок от обычной давно известной экспертизы, широко применяемой в различных сферах человеческой деятельности.</font></p> <p> <font><b>Область применения метода экспертных оценок весьма широка. Перечислим типовые задачи, решаемые методом экспертных оценок</b></font><font>:</font></p> <p> <font>1) составление перечня возможных событий в различных областях за определенный промежуток времени;</font></p> <p> <font>2) определение наиболее вероятных интервалов времени свершения совокупности событий;</font></p> <p> <font>3) определение целей и задач управления с упорядочением их по степени важности;</font></p> <p> <font>4) определение альтернативных (вариантов решения задачи с оценкой их предпочтения;</font></p> <p> <font>5) альтернативное распределение ресурсов для решения задач с оценкой их предпочтительности;</font></p> <p> <font>6) альтернативные варианты принятия решений в определенной ситуации с оценкой их предпочтительности.</font></p> <p> <font>Все множество проблем, решаемых методами экспертных оценок, делится на два класса.</font><font><b>К первому относятся такие</b></font><font>, в отношении которых имеется достаточное обеспечение информацией. При этом методы опроса и обработки основываются на использовании принципа «хорошего измерителя», т. е. эксперт — качественный источник информации; групповое мнение экспертов близко к истинному решению. </font><font><b>Ко второму классу относятся проблемы</b></font><font>, в отношении которых знаний для уверенности в справедливости указанных гипотез недостаточно. В этом случае экспертов уже нельзя рассматривать как «хороших измерителей» и необходимо осторожно подходить к обработке результатов экспертизы во избежание больших ошибок. В литературе в основном рассматриваются вопросы экспертного оценивания для решения задач первого класса.</font> </p> <p> <font>При обработке материалов коллективной экспертной оценки используются методы теории ранговой корреляции. Для количественной оценки степени согласованности мнений экспертов применяется коэффициент конкордации:</font> </p> <p><img src='/static/i_0067f68bc106c46b_html_m2eed5b20.png'></p> <p><font>где</font></p> <p><img src='/static/i_0067f68bc106c46b_html_m788887d4.png'></p> <p><img src='/static/i_0067f68bc106c46b_html_31b657aa.png'> — <font>количество экспертов,</font><font>j</font><font>= <img src='/static/i_0067f68bc106c46b_html_m1a774693.png'> — количество рассматриваемых свойств, <img src='/static/i_0067f68bc106c46b_html_698e6371.png'> — место, которое заняло <img src='/static/i_0067f68bc106c46b_html_df85514.png'>-е свойство в ранжировке</font><font>j</font><font>-м экспертом;</font><font>d</font><sub><font>i</font></sub><font> — отклонение суммы рангов по <img src='/static/i_0067f68bc106c46b_html_df85514.png'>-му свойству от среднего арифметического сумм рангов по n свойствам.</font> </p> <p> <font>Коэффициент конкордации</font><font>W</font><font> позволяет оценить, насколько согласованы между собой ряды предпочтительности, построенные каждым экспертом. Его значение находится в пределах0</font><font><font>£</font></font><font>W</font><font><font>£</font></font><font>1; </font><font>W</font><font>=0 означает полную противоположность, а </font><font>W</font><font>= 1 — полное совпадение ранжировок. Практически достоверность считается хорошей, если</font><font>W</font><font>= 0,7...0,8.</font> </p> <p> <font>Небольшое значение коэффициента конкордации, свидетельствующее о слабой согласованности мнений экспертов, является следствием следующих причин: в рассматриваемой совокупности экспертов действительно отсутствует общность мнений; внутри рассматриваемой совокупности экспертов существуют группы с высокой согласованностью мнений, однако обобщенные мнения таких групп противоположны.</font> </p> <p> <font>Для наглядности представления о степени согласованности мнений двух любых экспертов А и В служит </font><font><b>коэффициент парной ранговой корреляции:</b></font><font> </font> </p> <p><img src='/static/i_0067f68bc106c46b_html_m7c52433f.png'></p> <p><font>где <img src='/static/i_0067f68bc106c46b_html_m7a456f76.png'> — разность (по модулю) величин рангов оценок <img src='/static/i_0067f68bc106c46b_html_df85514.png'>-го свойства, назначенных экспертами А и В: <img src='/static/i_0067f68bc106c46b_html_m42167c5b.png'><img src='/static/i_0067f68bc106c46b_html_m3cac13af.png'>—показатели связанных рангов оценок экспертов А и В.</font> </p> <p> <font>Коэффициент парной ранговой корреляции принимает значения —1&lt; <img src='/static/i_0067f68bc106c46b_html_m2b7853f9.png'>&lt;+1. Значение <img src='/static/i_0067f68bc106c46b_html_m2b7853f9.png'>= +1 соответствует полному совпадению оценок в рангах двух экспертов (полная согласованность мнений двух экспертов), а <img src='/static/i_0067f68bc106c46b_html_m2b7853f9.png'>=—1— двум взаимно противоположным ранжировкам важности свойств (мнение одного эксперта противоположно мнению другого).</font> </p> " ],
 ["Методы оценивания альтернатив информационных систем. Метод скалярного критерия.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Большинство людей используют сравнительно</font><font><b>простой подход к оценке альтернатив</b></font><font> - упорядочение их по возрастанию полезности от наименее полезных до наиболее полезных. Свое отношение к альтернативам люди могут выразить и количественно, приписав каждому исходу некоторое число, определяющее его относительную предпочтительность. Например, наименее полезный исход может быть отражен числом 1, следующий числом 2 и т.д., до наиболее полезного исхода.</font></p> <p> <font>Возникает вопрос, можно ли с математической точки зрения доказать существование функции полезности в виде отображения упорядоченного множества альтернатив А в множество действительных чисел <img src='/static/i_0067f68bc106c46b_html_m5c3e66e4.png'>, обеспечив тем самым естественное упорядочение всех альтернатив. В теории полезности доказывается, что при вполне естественных допущениях относительно предпочтений</font><font><b>ЛПР (лица, принимающего решение</b></font><font>) такая функция существует. Предпочтения ЛПР формулируются в виде аксиом. Поскольку системы предпочтений у разных ЛПР могут различаться, то разные аксиоматики приводят к различным видам свертки и, следовательно, функция полезности не единственна. Причина заключается в том, что отсутствуют определения нулевой полезности, единицы полезности и шкалы полезности.</font></p> <p> <font><b>Основные аксиомы теории полезности:</b></font></p> <p> <font><b>Аксиома 1. Измеримость</b></font><font>. Каждому альтернативному исходу</font><font><i>a</i></font><sub><font><i>i</i></font></sub><font> может быть поставлено в соответствие неотрицательное действительное число, рассматриваемое как мера относительной полезности исхода <img src='/static/i_0067f68bc106c46b_html_5084bee2.png'>1.</font></p> <p> <font><b>Аксиома 2. Сравнимость</b></font><font>. Любые два исхода (альтернативы) а</font><sub><font>i</font></sub><font> и a</font><sub><font>j</font></sub><font> сравнимы: либо один исход предпочтительнее другого, либо исходы одинаково предпочтительны (эквивалентны). Другими словами, при сравнении двух альтернатив а</font><sub><font>i</font></sub><font> и a</font><sub><font>j</font></sub><font> возможен один из трех выводов: предпочтительнее альтернатива а</font><sub><font>i</font></sub><font>; между альтернативами а</font><sub><font>i</font></sub><font> нет предпочтительности; предпочтительнее альтернатива a</font><sub><font>j</font></sub><font> Аксиома основана на допущении: на множестве альтернатив существует совершенное, рефлексивное и транзитивное отношение слабого предпочтения &gt;. Рефлективность и транзитивность понимаются в обычном смысле, а совершенным называется отношение, для которого истинно следующее высказывание:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_168ee7e1.png'></p> <p> <font>Заметим, что если одновременно истинны два высказывания: <img src='/static/i_0067f68bc106c46b_html_m2ae25227.png'></font></p> <p> <font>то между a</font><sub><font>1</font></sub><font> и a</font><sub><font>2</font></sub><font> имеет место отношение безразличия: a</font><sub><font>1</font></sub><font> ~ a</font><sub><font>2</font></sub><font>. Если же <img src='/static/i_0067f68bc106c46b_html_518480bb.png'> истинно, а <img src='/static/i_0067f68bc106c46b_html_m77afdc1a.png'> ложно, то имеет место отношение строгого предпочтения: <img src='/static/i_0067f68bc106c46b_html_518480bb.png'></font></p> <p> <font><b>Аксиома 3. Транзитивность.</b></font><font> Соотношения предпочтения и эквивалентности исходов транзитивны. Если исход а</font><sub><font>i</font></sub><font> предпочтительнее исхода a</font><sub><font>j</font></sub><font>, а исход a</font><sub><font>j</font></sub><font> предпочтительнее исхода а</font><sub><font>k</font></sub><font>, то исход а</font><sub><font>i</font></sub><font> тоже предпочтительнее исхода а</font><sub><font>k</font></sub><font> Аналогично, если исход а</font><sub><font>i</font></sub><font> эквивалентен исходу a</font><sub><font>j</font></sub><font>, а исход a</font><sub><font>j</font></sub><font> эквивалентен исходу а</font><sub><font>k</font></sub><font> то исходы а</font><sub><font>i</font></sub><font> и а</font><sub><font>k</font></sub><font> тоже эквивалентны.</font></p> <p> <font><b>Аксиома 4. Коммутативность</b></font><font>. Предпочтение исхода а</font><sub><font>i</font></sub><font> исходу a</font><sub><font>j</font></sub><font> не зависит от порядка, в котором они названы и представлены.</font></p> <p> <font><b>Аксиома 5. Независимость</b></font><font>. Если исход а</font><sub><font>i</font></sub><font>, предпочтительнее исхода a</font><sub><font>j</font></sub><font> и, кроме того, существует исход a</font><sub><font>к</font></sub><font>, который не оценивается относительно исходов а</font><sub><font>i</font></sub><font> и a</font><sub><font>j</font></sub><font>, то смесь исходов а</font><sub><font>i</font></sub><font> и a</font><sub><font>к</font></sub><font> предпочтительнее смеси исходов a</font><sub><font>j</font></sub><font> и a</font><sub><font>к</font></sub><font> (Под смесью исходов a</font><sub><font>m</font></sub><font> и a</font><sub><font>n</font></sub><font> понимается исход, заключающийся в появлении одного из них с некоторой вероятностью, например исхода a</font><sub><font>m</font></sub><font> с вероятностью p, а исхода a</font><sub><font>n</font></sub><font> с дополнительной вероятностью 1-р.) Иначе говоря, предполагается, что отношение безразличия (предпочтения) между двумя альтернативами не нарушается наличием третьего:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m57d344ad.png'></p> <p> <font>Согласно теории полезности при выполнении в реальной задаче оценки систем всех пяти аксиом существует функция полезности, однозначно определенная на множестве всех альтернатив с точностью до монотонного строго возрастающего линейного преобразования, иначе полезность измеряется в шкале интервалов. Важно подчеркнуть, что функция полезности характеризует лишь относительную, а не абсолютную предпочтительность альтернатив. Так, если F(a</font><sub><font>1</font></sub><font>)=1, а F(a</font><sub><font>2</font></sub><font>)=2,отнюдь не следует, что альтернатива a</font><sub><font>1</font></sub><font> всегда в два раза или на единицу предпочтительнее альтернативы a</font><sub><font>2</font></sub><font>. Стоит произвести линейное преобразование функции полезности, и эти значения оценок будут уже другими.</font></p> <p> <font><b>Методы свертывания векторного критерия в скалярный</b></font><font><b>.</b></font><font> В этих методах первоначальная задача заменяется задачей <img src='/static/i_0067f68bc106c46b_html_7551b032.png'>, где</font><font>k</font><font>(</font><font>a</font><font>) - скалярный критерий, представляющий собой некоторую функцию от значений компонентов векторного критерия:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_76fb93a.png'></p> <p> <font>Основной проблемой этого подхода как раз и является построение функции, называемой сверткой. </font><font><b>Данная проблема распадается на четыре задачи</b></font><font>:</font></p> <p> <font><b>1.Обоснование допустимости свертки</b></font><font>. Требует подтверждения, что рассматриваемые показатели эффективности являются однородными. Известно, что показатели эффективности разделяются на три группы: показатели результативности, ресурсоемкости и оперативности. В общем случае разрешается свертка показателей, входящих в обобщенный показатель для каждой группы отдельно. Свертка показателей из разных групп может привести к потере физического смысла такого критерия.</font></p> <p> <font><b>2.Нормализация критериев для их сопоставления</b></font><font>. Проводится подобно нормировке показателей.</font></p> <p> <font><b>3.Учет приоритетов (важности) критериев</b></font><font>. Осуществляется в большинстве методов свертывания путем задания вектора коэффициентов важности критериев</font></p> <p> <font>Λ</font><font>=(</font><font>λ</font><sub><font>1</font></sub><font>, </font><font>λ</font><sub><font>1</font></sub><font>,…,</font><font>λi</font><font>)</font></p> <p> <font>Σλ</font><sub><font>i</font></sub><font>=1</font></p> <p> <font>где</font><font>λ</font><sub><font>i</font></sub><font> - коэффициент важности критерия</font><font><i>k</i></font><sub><font><i>i</i></font></sub><font>, обычно совпадающий с коэффициентом значимости частного показателя качества.</font></p> <p> <font>Определение коэффициентов важности критериев, как и в случае с показателями, сталкивается с серьезными трудностями и сводится либо к использованию формальных процедур, либо к применению экспертных оценок.</font></p> <p> <font>В результате нормализации и учета приоритетов критериев вместо исходной векторной оценки</font><font><i>K</i></font><font><i>(</i></font><font><i>a</i></font><font><i>) </i></font><font>альтернативы </font><font><i>а</i></font><font> образуется новая векторная оценка <img src='/static/i_0067f68bc106c46b_html_m643ad3f4.png'>где </font><font><i>k</i></font><sub><font><i>i</i></font></sub><font><i>(</i></font><font><i>a</i></font><font><i>)</i></font><font> - нормированный критерий - находится аналогично нормированному показателю.</font></p> <p> <font>Именно эта полученная векторная оценка подлежит преобразованию с использованием функции свертки. Способ свертки зависит от характера показателей и целей оценивания системы. Известны несколько видов свертки. Наиболее часто используются аддитивная и мультипликативная свертка компонентов векторного критерия.</font></p> <p> <font><b>4.Построение функции свертки, позволяющей решить задачу оптимизации.</b></font></p> <p> <font>Аддитивная свертка компонентов векторного критерия состоит в представлении обобщенного скалярного критерия в вице суммы взвешенных нормированных частных критериев:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m378454b6.png'> </p> <p> <font>Такие критерии образуют группу</font><font><b>аддитивных критериев.</b></font><font> В них свертка основана на использовании принципа справедливой компенсации абсолютных значений нормированных частных критериев.</font><font><b>Сформулируем суть этого принципа:</b></font><font> справедливым следует считать такой компромисс, при котором суммарный уровень абсолютного снижения значений одного или нескольких показателей не превышает суммарного уровня абсолютного увеличения значений других показателей.</font></p> <p> <font><b>Главный недостаток аддитивных критериев</b></font><font> состоит в том, что они не вытекают из объективной роли частных критериев в определении качества системы и выступают поэтому как формальный математический прием, придающий задаче удобный вид. Кроме того, низкие оценки по одним критериям могут компенсироваться высокими оценками по другим критериям. Это значит, что уменьшение одного из критериев вплоть до нулевого значения может быть покрыто возрастанием другого критерия.</font></p> <p> <font><b>Мультипликативная свертка</b></font><font> компонентов векторного критерия состоит в представлении обобщенного скалярного критерия в виде произведения:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_5d28e595.png'> </p> <p> <font>Мультипликативный критерий образуется путем простого перемножения частных критериев</font><font><i>k</i></font><sub><font><i>i</i></font></sub><font> возведенных в степени</font><font>λ</font><sub><font>i</font></sub><font>. Если все частные критерии имеют одинаковую важность, то</font><font>λ</font><sub><font>i</font></sub><font> = 1. При разной важности критериев</font><font>λ</font><sub><font>i</font></sub><font> ≠ 1.</font></p> <p> <font>В мультипликативных критериях схема компромисса предполагает оперирование не с абсолютными, а с относительными изменениями частных критериев.</font></p> <p> <font>Правомочность мультипликативного критерия основывается на принципе справедливой относительной компенсации: справедливым следует считать такой компромисс, при котором суммарный уровень относительного снижения значений одного или нескольких критериев не превышает суммарного уровня относительного увеличения значений других критериев.</font></p> <p> <font><b>Достоинством мультипликативного критерия</b></font><font> является то, что при его использовании не требуется нормировки частных критериев.</font><font><b>Недостатки критерия</b></font><font>: критерий компенсирует недостаточную величину одного частного критерия избыточной величиной другого и имеет тенденцию сглаживать уровни частных критериев за счет неравнозначных первоначальных значений частных критериев.</font></p> <p> <font>Выбор между аддитивной и мультипликативной свертками частных критериев определяется степенью важности абсолютных или относительных изменений значений частных критериев соответственно.</font></p> " ],
 ["Закономерности информационных систем. Принципы анализа информационных систем.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Закономерности информационных систем:</b></font></p> <p> <font><b>Целостность.</b></font><font> Закономерность целостности проявляется в системе в возникновении новых интегративных качеств, не свойственных образующим ее компонентам. Чтобы глубже понять закономерность целостности, необходимо рассмотреть две ее стороны: </font> </p> <p> <font>1. свойства системы (целого) не являются суммой свойств элементов или частей (несводимость целого к простой сумме частей);</font> </p> <p> <font>2. свойства системы (целого) зависят от свойств элементов, частей (изменение в одной части вызывает изменение во всех остальных частях и во всей системе).</font> </p> <p> <font>Существенным проявлением закономерности целостности являются новые взаимоотношения системы как целого со средой, отличные от взаимодействия с ней отдельных элементов. </font> </p> <p> <font>Свойство целостности связано с целью, для выполнения которой предназначена система.</font><img src='/static/i_0067f68bc106c46b_html_dcb09a3.png'> </p> <p> <font>Строго говоря, любая система находится всегда между крайними точками как бы условной шкалы: абсолютная целостность — абсолютная аддитивность, и рассматриваемый этап развития системы можно охарактеризовать степенью проявления в ней одного или другого свойства и тенденцией к его нарастанию или уменьшению.</font> </p> <p> <font><b>Интегративность.</b></font><font> Этот термин часто употребляют как синоним целостности. Однако им подчеркивают интерес не к внешним факторам проявления целостности, а к более глубоким причинам формирования этого свойства и, главное,— к его сохранению. Интегративными называют системообразующие, системоохраняющие факторы, важными среди которых являются неоднородность и противоречивость ее элементов.</font> </p> <p> <font><b>Коммуникативность.</b></font><font> Система образует особое единство со средой; как правило, любая исследуемая система представляет собой элемент системы более высокого порядка; элементы любой исследуемой системы, в свою очередь, обычно выступают как системы более низкого порядка. Иными словами, система не изолирована, она связана множеством коммуникаций со средой, которая не однородна, а представляет собой сложное образование, содержит надсистему (или даже надсистемы), задающую требования и ограничения исследуемой системе, подсистемы и системы одного уровня с рассматриваемой.</font> </p> <p> <font><b>Иерархичность как закономерность</b></font><font> заключается в том, что закономерность целостности проявляется на каждом уровне иерархии. Благодаря этому на каждом уровне возникают новые свойства, которые не могут быть выведены как сумма свойств элементов. При этом важно, что не только объединение элементов в каждом узле приводит к появлению новых свойств, которых у них не было, и утрате некоторых свойств элементов, но и что каждый член иерархии приобретает новые свойства, отсутствующие у него в изолированном состоянии. Таким образом, на каждом уровне иерархии происходят сложные качественные изменения, которые не всегда могут быть представлены и объяснены. </font> </p> <p> <font><b>Эквифинальность.</b></font><font> Это одна из наименее исследованных закономерностей. Она характеризует предельные возможности систем определенного класса сложности. Эквифинальность применительно к «открытой» системе это способность полностью детерминированных начальными условиями систем достигать не зависящего от времени состояния.</font> </p> <p> <font><b>Историчность.</b></font><font> Время является непременной характеристикой системы, поэтому каждая система исторична, и это такая же закономерность, как целостность, интегративность и др.</font> </p> <p> <font>Основа закономерности историчности — внутренние противоречия между компонентами системы. В частности, в системотехнике при создании сложных технических комплексов требуется на стадии проектирования системы рассматривать не только вопросы разработки и обеспечения развития системы, но и вопрос, как и когда нужно ее уничтожить.</font> </p> <p> <font><b>Закон необходимого разнообразия</b></font><font>. Его впервые сформулировал У. Р. Эшби: чтобы создать систему, способную справиться с решением проблемы, обладающей определенным, известным разнообразием, нужно, чтобы сама система имела еще большее разнообразие, чем разнообразие решаемой проблемы, или была способна создать в себе это разнообразие.</font> </p> <p> <font><b>Закономерность осуществимости и потенциальной эффективности систем.</b></font><font> Исследования взаимосвязи сложности структуры системы со сложностью ее поведения позволили получить количественные выражения предельных законов для таких качеств системы, как надежность, помехоустойчивость, управляемость и др. На основе этих законов оказалось возможным получение количественных оценок порогов осуществимости систем с точки зрения того или иного качества, а объединяя качества — предельные оценки жизнеспособности и потенциальной эффективности сложных систем.</font> </p> <p> <font><b>Закономерность целеобразования</b></font><font>. Анализ понятия «цель» позволяет сделать вывод, что, формулируя цель, нужно стремиться отразить в формулировке или в способе представления цели ее активную роль в познании и в то же время сделать ее реалистичной, направить с ее помощью деятельность на получение определенного результата. При этом формулировка цели и представление о ней зависит от стадии познания объекта и в процессе развития представления об объекте цель может переформулироваться. При анализе причин возникновения цели нужно учитывать как внешние по отношению к выделенной системе факторы (внешние потребности, мотивы, программы), так и внутренние потребности, мотивы, программы («самодвижение» целостности). При этом цели могут возникать на основе противоречий как между внешними и внутренними факторами, так и между внутренними факторами, имевшимися ранее и вновь возникающими в находившейся в постоянном самодвижении целостности.</font> </p> <p> <font><b>Возможность сведения задачи формирования общей цели к задаче структуризации цели.</b></font><font> Анализ процессов формулирования глобальной цели в сложной системе показывает, что эта цель возникает в сознании руководителя или коллектива не как единичное понятие, а как некоторая, достаточно «размытая» область. На любом уровне цель возникает вначале в виде «образа» цели. При этом достичь одинакового понимания общей цели всеми исполнителями, по видимому, принципиально невозможно без ее детализации в виде упорядоченного или неупорядоченного набора взаимосвязанных подцелей, которые делают ее понятной и более конкретной для разных исполнителей. Таким образом, задача формулирования общей цели в сложных системах должна быть сведена к задаче структуризации цели.</font> </p> <p> <font><b>Системный анализ основывается на следующих принципах:</b></font></p> <p> <font>1) единства – совместное рассмотрение системы как единого целого и как совокупности частей;</font></p> <p> <font>2) развития – учет изменяемости системы, ее способности к развитию, накапливанию информации с учетом динамики окружающей среды;</font></p> <p> <font>3) глобальной цели – ответственность за выбор глобальной цели. Оптимум подсистем не является оптимумом всей системы;</font></p> <p> <font>4) функциональности – совместное рассмотрение структуры системы и функций с приоритетом функций над структурой;</font></p> <p> <font>5) децентрализации – сочетание децентрализации и централизации;</font></p> <p> <font>6) иерархии – учет соподчинения и ранжирования частей;</font></p> <p> <font>7) неопределенности – учет вероятностного наступления события;</font></p> <p> <font>8) организованности – степень выполнения решений и выводов.</font></p> " ],
 ["Методы экспертных оценок. Метод ранжировки.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_320f02f2.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_320f02f2.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m58b55806.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m58b55806.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m15178770.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m15178770.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_2ab28fc5.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_2ab28fc5.png'></p> <p> <font><font>Если имеется n объектов, то в результате их ранжирования j-ым экспертом каждый объект получает оценку xij – ранг, приписываемый i-му объекту j-ым экспертом.</font></font></p> <p> <font><font>Значения xij находятся в интервале от 1 до n. Ранг самого важного фактора равен единице, наименее значимого – числу n.</font></font></p> <p> <font><font>Ранжировкой j-го эксперта называется последовательность рангов x1j, x2j, …, xnj.</font></font></p> <p> <font><b>Достоинства метода простой ранжировки:</b></font> </p> <p> <font>1) сравнительная простота процедуры получения оценок;</font> </p> <p> <font>2) меньшее число экспертов по сравнению с другими методами при оценке одного и того же набора признаков.</font> </p> <p> <font><b>Недостаток же его в том, что:</b></font> </p> <p> <font>1) заведомо считают распределение оценок равномерным;</font> </p> <p> <font>2) уменьшение важности признаков предполагается также равномерным, в то время как на практике этого не бывает.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Методы экспертных оценок. Методы непосредственной оценки и последовательных предпочтений.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m20020ff0.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m20020ff0.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m20020ff0.png'></p> <p> <font><b>1) эксперт упорядочивает все признаки в порядке уменьшения их значимости:</b></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m5a297295.png'></p> <p> <font><b>2) присваивает первому признаку значение</b></font><font>, равное единице: A1=1, остальным же признакам назначает весовые коэффициенты в долях единицы;</font> </p> <p> <font><b>3) сравнивает значение первого признака с суммой всех последующих</b></font><font>. </font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m5a297295.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m5a297295.png'></p> <p> <font><b>Преимущество</b></font><font> данного метода состоит в том, что эксперт в процессе оценивания признаков сам анализирует свои оценки. Вместо назначения коэффициентов возникает творческий процесс создания этих коэффициентов.</font> </p> <p> <font><b>Недостатки метода таковы:</b></font> </p> <p> <font>1) сложность его; неподготовленный эксперт будет с трудом справляться с этой процедурой; вместо того, чтобы уточнять свои первоначальные оценки, он будет путаться в них;</font> </p> <p> <font>2) громоздкость; на оценку одного и того же набора признаков он требует в четыре раза больше операций, чем метод простой ранжировки (другими словами, для одной и той же работы нужно в четыре раза больше экспертов).</font></p> " ],
 ["Основные понятия теории моделирования. Однопродуктовая и многопродуктовая балансовые аналитические модели.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Моделирование</b></font><font> – это представление (замещение) объекта (системы) другим объектом – моделью – с целью получения информации об объекте оригинале, необходимой для его исследования.</font></p> <p> <font><b>Модель</b></font><font> – это такой материальный или мысленно представимый объект, который в процессе исследования заменяет объект оригинал так, что его непосредственное изучение дает новые знания об объекте оригинале, т.е. это формализованное представление об объекте исследования с точки зрения поставленной цели.</font></p> <p> <font>В большинстве случаев строятся приближенные (частные) модели, в которых некоторые стороны реального объекта вообще не моделируются. Такие частные модели обозначаются как </font><font><b>гомоморфизм </b></font><font><b>f</b></font><font><b>:</b></font><font> </font><font>A</font><font>→</font><font>M</font><font> или <img src='/static/i_0067f68bc106c46b_html_mf0e45f0.png'>где </font><font>f</font><font> – способ построения модели. Элемент </font><font>f</font><font>(</font><font>a</font><font>)=</font><font>m</font><font>, где <img src='/static/i_0067f68bc106c46b_html_55be2787.png'>называется </font><font><b>образом</b></font><font>а. А – область определения, а М – область значений отображения</font><font>f</font><font>. Отображение</font><font>f</font><font>: </font><font>A</font><font>→</font><font>M</font><font> называется гомоморфизмом множеств, если выполняется условие:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m5b6fb331.png'></p> <p> <font><b>Изоморфизм</b></font><font> множества А на М, это взаимно однозначный гомоморфизм, т.е.</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m3c820e60.png'></p> <p> <font>Следовательно, модель можно определить, как изоморфизм или гомоморфизм А на М, причем М – абстрактное или реальное множество задается</font><font><b>кортежем</b></font><font>: <img src='/static/i_0067f68bc106c46b_html_bbbce34.png'></font></p> <p> <font>где <img src='/static/i_0067f68bc106c46b_html_708fced2.png'> - множество элементов модели, соответствующих элементам моделируемого объекта;</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_27a5307b.png'><font>- предикаты, отражающие наличие того или иного отношения между элементами предметной области.</font></p> <p> <font>Множество элементов модели <img src='/static/i_0067f68bc106c46b_html_708fced2.png'> называется</font><font><b>носителем модели.</b></font><font> Носитель модели является содержательной областью предикатов. Предикаты <img src='/static/i_0067f68bc106c46b_html_27a5307b.png'> называются</font><font><b>сигнатурой модели.</b></font><font></font> </p> <p> <font>Выбор носителя и сигнатуры модели определяется объектом и целью моделирования и определяет класс модели.</font> </p> <p> <font>Любую модель строят в зависимости от цели, которую ставят перед ней. В зависимости от целей моделирования различают: структурное, функциональное, информационное и поведенческое моделирование.</font> </p> <p> <font><b>В зависимости от типа носителя и сигнатуры, модели делятся на:</b></font><font>Детерминированные и стохастические; Статические и динамические; Дискретные, непрерывные и дискретно-непрерывные.</font></p> <p> <font><b>Однопродуктовая модель</b></font><font> может использоваться не только в отраслях с однопродуктовым производством, но в ряде случаев и в многопродуктовых отраслях, если производимые в них продукты взаимозаменяемы в потреблении или их можно свести к одному продукту посредством использования относительных показателей, например коэффициентов пересчета. Эти коэффициенты позволяют соизмерять потребительные стоимости различных продуктов по какому-либо одному полезному качеству, имеющему главное значение. Например, в топливной промышленности - по теплотворной способности энергоносителя.</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m66489a20.png'></p> <p> <font><b>В многопродуктовых моделях</b></font><font> рассматриваются два и более ограничений по спросу на продукцию, вырабатываемую отраслью в целом, и на потребление сырья или любого другого ресурса. В этих моделях может использоваться возможность приведения различных продуктов к однородным с учетом взаимозаменяемости в потреблении. В этом случае составляющие спроса характеризуют не отдельные продукты, а величины потребностей, которые удовлетворяются различными взаимозаменяемыми продуктами. Тогда даже значительное число производимых в отрасли продуктов можно свести к ограниченному количеству групп продуктов. </font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_6acc36dc.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_6acc36dc.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_ea54d92.png'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1> <font>Дисциплина: Управление данными</font></h1> </li></ol> " ],
 ["Реляционные объекты данных. Целостность реляционных данных.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Реляционная модель данных</b></font><font> (РМД) была впервые предложена Э.Ф. Коддом в 1970 г. в его основополагающей статье «Реляционная модель данных для больших совместно используемых банков данных». Цели создания данной модели формулировались следующим образом: обеспечение более высокой степени независимости от данных, создание основы для решения семантических вопросов, а также проблем непротиворечивости и избыточности данных, расширение языков управления данными за счет включения операций над множествами.</font> </p> <p> <font>В целом реляционная модель делится на три части, в которых рассматриваются классы объектов (типы сущностей), целостность и операторы. При этом используются термины: тип данных, отношение, кортеж, атрибут, кардинальное число, степень отношения, домен и первичный ключ.</font></p> <p> <font><b>Типы данных:</b></font><font> Как правило, типы данных делятся на три группы: 1) Простые типы данных. 2) Структурированные типы данных. (Массивы, Структуры). 3) Ссылочные типы данных (указатели).</font></p> <p> <font>Реляционная модель требует, чтобы типы используемых данных были простыми (не обладали внутренней структурой).</font> </p> <p> <font><b>Отношение</b></font><font> — это множество кортежей, соответствующих одной схеме отношения.</font><font><i><b>Отношение</b></i></font><font> соответствует тому, что мы называем таблицей, т.е. отношение – это плоская таблица, состоящая из строк и столбцов. </font><font><b>Свойства отношений</b></font><font>: 1) В отношении нет одинаковых кортежей. 2) Кортежи не упорядочены (сверху вниз). 3) Атрибуты не упорядочены (слева направо). 4) Все значения атрибутов атомарны.</font></p> <p> <font><b>Кортеж</b></font><font> — это набор именованных значений заданного типа.</font><font><i><b>Кортеж</b></i></font><font> соответствует строке этой таблицы, а </font><font><i><b>атрибут</b></i></font><font> – поименованному столбцу. Количество кортежей называется</font><font><i><b>кардинальным числом</b></i></font><font>, а количество атрибутов –</font><font><i><b>степенью</b></i></font><font><b> отношения</b></font><font>. </font><font><i><b>Первичный ключ</b></i></font><font> – уникальный идентификатор кортежей внутри отношения. </font> </p> <p> <font><i><b>Домен</b></i></font><font><b> </b></font><font>– это набор допустимых значений для одного или нескольких атрибутов определенного отношения. Домен характеризуется следующими свойствами:</font></p> <p> <font>- Домен имеет уникальное имя (в пределах базы данных).</font></p> <p> <font>- Домен определен на некотором простом типе данных или на другом домене.</font></p> <p> <font>- Домен может иметь некоторое логическое условие, позволяющее описать подмножество данных, допустимых для данного домена.</font></p> <p> <font>- Домен несет определенную смысловую нагрузку.</font></p> <p> <font><b>Реляционной базой данных</b></font><font> называется набор отношений. Схемой реляционной базы данных называется набор заголовков отношений, входящих в базу данных.</font></p> <p> <font><font><b>Реляционной считается такая база данных</b></font><font>, в которой все данные представлены для пользователя в виде прямоугольных таблиц значений данных, и все операции над базой данных сводятся к манипуляциям с таблицами. Таблица состоит из строк и столбцов и имеет имя, уникальное внутри базы данных. Таблица отражает тип объекта реального мира (сущность), а каждая ее строка -- конкретный объект. Так, таблица Деталь содержит сведения о всех деталях, хранящихся на складе, а ее строки являются наборами значений атрибутов конкретных деталей. Каждый столбец таблицы -- это совокупность значений конкретного атрибута объекта. Так, столбец Материал представляет собой множество значений 'Сталь', 'Олово', 'Цинк', 'Никель' и т.д. В столбце Количество содержатся целые неотрицательные числа. Значения в столбце Вес - вещественные числа, равные весу детали в килограммах.</font></font></p> <p> <font><b>Целостность реляционных данных.</b></font></p> <p> <font>Современные СУБД допускают использование null-значений, т.к. данные часто бывают неполными или неизвестными.</font></p> <p> <font><b>Потенциальный ключ отношения</b></font><font> — это набор атрибутов отношения, обладающий свойствами уникальности и неизбыточности. Доступ к конкретному кортежу можно получить, лишь зная значение потенциального ключа для этого кортежа. Традиционно один из потенциальных ключей объявляется первичным ключом, остальные — альтернативными ключами. Потенциальный ключ, состоящий из одного атрибута, называется простым, иначе составным.</font></p> <p> <font>Отношения связываются друг с другом при помощи внешних ключей. </font><font><b>Внешний ключ отношения</b></font><font> — это набор атрибутов отношения, содержащий ссылки на потенциальный ключ другого (или того же самого) отношения. Отношение, содержащее потенциальный ключ, на который ссылается некоторый внешний ключ, называется родительским отношением. Отношение, содержащее внешний ключ, называется дочерним отношением.</font></p> <p> <font>Для пользователей информационной системы недостаточно, чтобы база данных просто отражала объекты реального мира. Важно, чтобы такое отражение было однозначным и непротиворечивым. В этом случае говорят, что база данных удовлетворяет условию целостности (integrity).</font></p> <p> <font>Для того, чтобы гарантировать корректность и взаимную непротиворечивость данных, на базу данных накладываются некоторые ограничения, которые называют ограничениями целостности (data integrity constraints).</font></p> <p> <font><b>В любой реляционной базе данных должны выполняться два ограничения</b></font><font>:</font><font> </font> </p> <ul>  <li>  <p> <font>Целостность сущностей,</font></p>  </li><li>  <p> <font>Целостность внешних ключей.</font></p> </li></ul> <p> <font><b>Целостность сущностей.</b></font><font><b> </b></font><font>Объекту или сущности реального мира в реляционных БД соответствуют кортежи отношений. Конкретно требование состоит в том, что любой кортеж любого значения-отношения любой переменной отношения должен быть отличим от любого другого кортежа этого значения отношения по составным значениям заранее определенного множества атрибутов переменной отношения, т. е., другими словами, любая переменная отношения должна обладать первичным ключом. На самом деле,</font><font><b>требование целостности сущности полностью звучит следующим образом:</b></font><font> у любой переменной отношения должен существовать первичный ключ, и никакое значение первичного ключа в кортежах значения-отношения переменной отношения не должно содержать неопределенных значений.</font></p> <p> <font><b>Целостность внешних ключей.</b></font><font><b> Требование целостности по ссылкам, или требование целостности внешнего ключа</b></font><font>, состоит в том, что для каждого значения внешнего ключа, появляющегося в кортеже значения-отношения ссылающейся переменной отношения, либо в значении-отношении переменной отношения, на которую указывает ссылка, должен найтись кортеж с таким же значением первичного ключа, либо значение внешнего ключа должно быть полностью неопределенным (т. е. ни на что не указывать). Т.е. внешние ключи не должны ссылаться на отсутствующие в родительском отношении кортежи, т.е. внешние ключи должны быть корректны.</font></p> <p> <font>Ссылочную целостность могут нарушить операции, изменяющие состояние базы данных. Такими операциями являются операции вставки, обновления и удаления кортежей.</font></p> <p> <font>Для поддержания ссылочной целостности обычно используются </font><font><b>две основные стратегии:</b></font></p> <p> <font>RESTRICT (ОГРАНИЧИТЬ) — не разрешать выполнение операции, приводящей к нарушению ссылочной целостности.</font></p> <p> <font>CASCADE (КАСКАДИРОВАТЬ) — разрешить выполнение требуемой операции, но внести каскадные изменения в другие отношения так, чтобы не допустить нарушения ссылочной целостности.</font></p> " ],
 ["Безопасность данных: управление доступом, шифрование.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Термин безопасность</b></font><font> относится к защите данных от несанкционированного доступа, изменения или разрушения данных.</font> </p> <p> <font><b>Среди многочисленных аспектов проблемы безопасности необходимо отметить следующие:</b></font> </p> <p> <font>1.Правовые, общественные и этические аспекты (имеет ли право некоторое лицо получить запрашиваемую информацию, например об оценках студента).</font> </p> <p> <font>2. Физические условия (например, закрыт ли данный компьютер или терминальная комната или защищен каким-либо другим образом).</font> </p> <p> <font>3.Организационные вопросы (например, как в рамках предприятия, обладающего некой системой, организован доступ к данным).</font> </p> <p> <font>4.Вопросы реализации управления (например, если используется метод доступа по паролю, то как организована реализация управления и как часто меняются пароли).</font> </p> <p> <font>5.Аппаратное обеспечение (обеспечиваются ли меры безопасности на аппаратном уровне, например, с помощью защитных ключей или привилегированного режима управления). </font> </p> <p> <font>6. Безопасность операционной системы (например, затирает ли базовая операционная система содержание структуры хранения и файлов с данными при прекращении работы с ними).</font> </p> <p> <font>7.И наконец, некоторые вопросы, касающиеся непосредственно самой системы управления базами данных (например, существует ли для базы данных некоторая концепция предоставления прав владения данными).</font> </p> <p> <font>Избирательное управление доступом поддерживается многими СУБД. Избирательное управление доступом поддерживается в языке SQL.</font> </p> <p> <font><b>В общем случае система безопасности таких СУБД базируется на трех компонентах:</b></font> </p> <p> <font>1.</font><font><b>Пользователи.</b></font><font> СУБД выполняет любое действия с БД от имени какого-то пользователя. Каждому пользователю присваивается идентификатор – короткое имя, однозначно определяющее пользователя в СУБД. Для подтверждения того, что пользователь может работать с введенным идентификатором используется пароль. Таким образом, с помощью идентификатора и пароля производится идентификация и аутентификация пользователя. Большинство коммерческих СУБД позволяет объединять пользователей с одинаковыми привилегиями в группы – это позволяет упростить процесс администрирования.</font> </p> <p> <font>2.</font><font><b>Объекты БД.</b></font><font> По стандарту SQL2 защищаемыми объектами в БД являются таблицы, представления, домены и определенные пользователем наборы символов. Большинство коммерческих СУБД расширяет список объектов, добавляя в него хранимые процедуры и др. объекты. </font> </p> <p> <font>3.</font><font><b>Привилегии. </b></font><font>Привилегии показывают набор действий, которые возможно производить над тем или иным объектом. Например пользователь имеет привилегию для просмотра таблицы.</font></p> <p> <font><b>Методы обязательного управления доступом</b></font><font> применяются к базам данных, в которых данные имеют достаточно статичную или жесткую структуру, свойственную, например, правительственным или военным организациям. Как уже отмечалось, основная идея заключается в том, что каждый объект данных имеет некоторый уровень классификации, например: секретно, совершенно секретно, для служебного пользования и т.д., а каждый пользователь имеет уровень допуска с такими же градациями, что и в уровне классификации. Предполагается, что эти уровни образуют строгий иерархический порядок, например: совершенно секретно, секретно, для служебного пользования и т.д. Тогда на основе этих сведений можно сформулировать</font><font><b>два очень простых правила безопасности</b></font><font>: </font> </p> <p> <font>1. пользователь имеет доступ к объекту, только если его уровень допуска больше или равен уровню классификации объекта.</font> </p> <p> <font>2. пользователь может модифицировать объекту, только если его уровень допуска равен уровню классификации объекта.</font> </p> <p> <font>Правило 1 достаточно очевидно, а правило 2 требует дополнительных разъяснений. Прежде всего следует отметить, что по-другому второе правило можно сформулировать так: любая информация, записанная некоторым пользователем, автоматически приобретает уровень, равный уровню классификации этого пользователя. Такое правило необходимо, например, для того, чтобы предотвратить запись секретных данных, выполняемую пользователем с уровнем допуска 'секретно', в файл с меньшим уровнем классификации, что нарушает всю систему секретности.</font> </p> <p> <font>В последнее время методы обязательного управления доступом получили широкое распространение. Требования к такому управлению доступом изложены в двух документах, которые неформально называются 'оранжевой' книгой (Orange Book) и 'розовой' книгой (Lavender Book). В 'оранжевой' книге перечислен набор требований к безопасности для некой 'надежной вычислительной базы' (Trusted Computing Base), а в 'розовой' книге дается интерпретация этих требований для систем управления базами данных.</font></p> <p> <font>Наиболее эффективным методом борьбы с угрозами, вызванными нелегальным копированием баз данных, </font><font><b>является шифрование данных</b></font><font><b>,</b></font><font> т.е. хранение и передача особо важных данных в зашифрованном виде.</font> </p> <p> <font>Для обсуждения основных концепций кодирования данных следует ввести некоторые новые понятия. Исходные (незакодированные) данные называются открытым текстом. Открытый текст шифруется с помощью специального алгоритма шифрования. В качестве входных данных для такого алгоритма выступают открытый текст и ключ шифрования, а в качестве выходных – зашифрованная форма открытого текста, которая называется зашифрованным текстом. Если детали алгоритма шифрования могут быть опубликованы или, по крайней мере, могут не утаиваться, то ключ шифрования обязательно хранится в секрете. Именно зашифрованный текст, который непонятен тем, кто не обладает ключом шифрования, хранится в базе данных и передается по коммуникационному каналу.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Классификация СУБД. Современные настольные СУБД.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Система управления базами данных (СУБД)</b></font><font> – это комплекс языковых и программных средств, предназначенный для создания, ведения и совместного использования БД многими пользователями.</font> </p> <ol>  <li>  <p><font><b>По «мощности» СУБД делятся на:</b></font></p> </li></ol> <ul>  <li>  <p><font><b>Настольные. </b></font><font>Это программное обеспечение, ориентированное на решение задач локального пользователя или компактной группы пользователей и предназначенная для использования на персональном компьютере.</font></p>  </li><li>  <p><font><b>Корпоративные. Корпоративные СУБД</b></font><font> обеспечивают работу в распределенной среде, высокую производительность, поддержку коллективной работы при проектировании систем, имеют развитые средства администрирования и более широкие возможности поддержания целостности.</font> </p> </li></ul> <ol>  <li>  <p><font><b>По типу управляемой базы данных СУБД разделяются на:</b></font></p> </li></ol> <ul>  <li>  <p><font><b>Иерархические -</b></font><font>система управления базами данных, использующих в своей основе древовидную структуру;</font></p> </li></ul> <ul>  <li>  <p><font><b>Сетевые </b></font><font>- система управления базами данных, поддерживающая сетевую организацию: любая запись, называемая записью старшего уровня, может содержать данные, которые относятся к набору других записей, называемых записями подчиненного уровня;</font></p>  </li><li>  <p><font><b>Реляционные -</b></font><font>система управления реляционными БД. Реляционная модель ориентирована на организацию данных в виде двумерных таблиц. Каждая реляционная таблица представляет собой двумерный массив;</font></p>  </li><li>  <p><font><b>Объектно-реляционные (постреляционные).</b></font><font> реляционная система управления БД, использующая в своей работе заимствования и методы свойственные объектно-ориентированному подходу: объекты, классы и наследование реализованы в структуре баз данных и языке запросов;</font> </p>  </li><li>  <p><font><b>Объектно-ориентированные -</b></font><font>система управления базами данных, основанная на объектной модели данных. Эта система управления обрабатывает данные как абстрактные объекты, наделённые свойствами и использующие методы взаимодействия с другими объектами окружающего мира;</font></p>  </li><li>  <p><font><b>Многомерные,</b></font><font> в основе которых лежит многомерная модель данных.</font></p> </li></ul> <ol>  <li>  <p><font><b>По степени распределённости:</b></font></p> </li></ol> <ul>  <li>  <p><font><b>Локальные СУБД</b></font><font> (все части локальной СУБД размещаются на одном компьютере)</font></p>  </li><li>  <p><font><b>Распределённые СУБД</b></font><font> (части СУБД могут размещаться на двух и более компьютерах).</font></p> </li></ul> <ol>  <li>  <p><font><b>По способу доступа к БД:</b></font></p> </li></ol> <ul>  <li>  <p><font><b>Файл-серверные. </b></font><font>В файл-серверных СУБД файлы данных располагаются централизованно на файл-сервере. СУБД располагается на каждом клиентском компьютере (рабочей станции). Доступ СУБД к данным осуществляется через локальную сеть. Примеры: Microsoft Access, Borland Paradox.</font></p>  </li><li>  <p><font><b>Клиент-серверные. </b></font><font>Клиент-серверная СУБД располагается на сервере вместе с БД и осуществляет доступ к БД непосредственно, в монопольном режиме. Все клиентские запросы на обработку данных обрабатываются клиент-серверной СУБД централизованно. Примеры</font><font>: Firebird, Interbase, IBM DB2, MS SQL Server, Sybase, Oracle, PostgreSQL, MySQL,</font><font>ЛИНТЕР</font><font>.</font></p>  </li><li>  <p><font><b>Встраиваемые. </b></font><font>Встраиваемая СУБД — СУБД, которая может поставляться как составная часть некоторого программного продукта, не требуя процедуры самостоятельной установки. Встраиваемая СУБД предназначена для локального хранения данных своего приложения и не рассчитана на коллективное использование в сети. Примеры: OpenEdge, SQLite, BerkeleyDB, один из вариантов Firebird, один из вариантов MySQL, Sav Zigzag, Microsoft SQL Server Compact, ЛИНТЕР.</font></p> </li></ul> <p> <font><b>Современные настольные СУБД.</b></font> </p> <p> <font><b>Настольные СУБД отличаются тем</b></font><font>, что используют модель вычислений с сетью и файловым сервером (архитектура «файл-сервер»). Они поддерживают не все возможные функции СУБД (например, не ведется журнал транзакций, отсутствует возможность автоматического восстановления базы данных после сбоев и т. п.). Тем не менее, такие системы имеют достаточно обширную область применения. Прежде всего, это государственные (муниципальные) учреждения, сфера образования, сфера обслуживания, малый и средний бизнес.</font> </p> <p> <font>На сегодняшний день известно более двух десятков форматов данных настольных СУБД, однако наиболее популярными, исходя из числа проданных копий, следует признать dBase, Paradox, FoxPro и Access. Рассмотрим каждую из этих СУБД в отдельности.</font> </p> <ol>  <li>  <p><font><b>dBase и Visual dBase.</b></font></p> </li></ol> <p> <font>Первая промышленная версия СУБД dBase - dBase II (принадлежащая тогда компании Ashton-Tate, приобретенной позже компанией Borland) появилась в начале 80-х годов.</font> </p> <p>  <font>  Хранение данных в dBase основано на принципе  &lt;одна таблица - один файл&gt;  (эти файлы обычно имеют расширение *.dbf). MEMO-поля и BLOB-поля (доступные в поздних версиях dBase) хранятся в отдельных файлах (обычно с расширением *.dbt). Индексы для таблиц также хранятся в отдельных файлах.  </font> </p> <p> <font>Формат данных dBase является открытым, что позволило ряду других производителей заимствовать его для создания dBase-подобных СУБД, частично совместимых с dBase по форматам данных.</font> </p> <p> <font>После покупки dBase компанией Borland этот продукт получил впоследствии название Visual dBase.</font> </p> <p> <font>В настоящее время Visual dBase принадлежит компании dBase, Inc. Его последняя версия - Visual dBase 7.5 имеет </font><font><b>следующие возможности:</b></font><font> </font><font>c</font><font>редства манипуляции данными dBase и FoxPro всех версий; средства создания форм, отчетов и приложений; средства публикации данных в Internet и создания Web-клиентов; средства публикации отчетов в Web; средства визуального построения запросов; средства генерации исполняемых файлов и дистрибутивов.</font></p> <ol>  <li>  <p><font><b>Paradox</b></font></p> </li></ol> <p><font>Paradox был разработан компанией Ansa Software, и первая его версия увидела свет в 1985 году. Этот продукт был впоследствии приобретен компанией Borland. С июля 1996 года он принадлежит компании Corel и является составной частью Corel Office Professional.</font></p> <p> <font>Принцип хранения данных в Paradox сходен с принципами хранения данных в dBase - каждая таблица хранится в своем файле (расширение *.db), MEMO - и BLOB-поля хранятся в отдельном файле (расширение *.md), как и индексы (расширение *.px).</font></p> <p> <font>Однако, в отличие от dBase, формат данных Paradox не является открытым, поэтому для доступа к данным этого формата требуются специальные библиотеки.</font> </p> <p> <font>Текущая версия данной СУБД - Paradox 11. Содержит: средства манипуляции данными Paradox и dBase; средства создания форм, отчетов и приложений; средства визуального построения запросов; средства публикации данных и отчетов в Internet и создания Web-клиентов; Corel Web-сервер; ODBC-драйвер для доступа к данным формата Paradox из Windows-приложений; средства для доступа к данным формата Paradox из Java-приложений.</font></p> <ol>  <li>  <p><font><b>Microsoft FoxPro</b></font><font><b>и</b></font><font><b> Visual FoxPro</b></font></p> </li></ol> <p> <font>FoxPro ведет свое происхождение от настольной СУБД FoxBase фирмы Fox Software. По сравнению с аналогичными версиями dBase, FoxBase и более поздняя версия этого продукта, получившая название FoxPro, предоставляли своим пользователям несколько более широкие возможности, такие как использование деловой графики, генерация кода приложений, автоматическая генерация документации к приложениям и т.д.</font></p> <p> <font>Последняя версия этого продукта - Visual FoxPro 9.0. Отличительной особенностью этой настольной СУБ является интеграция этого продукта с технологиями Microsoft, в частности поддержка COM (Component Object Model - компонентная объектная модель, являющаяся основой функционирования 32-разрядных версий Windows и организации распределенных вычислений в этой операционной системе), интеграция с Microsoft SQL Server.</font></p> <p> <font><b>Visual Fox Pro 9.0 предоставляет следующие возможности: </b></font><font>средства публикации данных в Internet и создания Web-клиентов; средства создания COM-объектов и объектов для Microsoft Transaction Server, позволяющих создавать масштабируемые многозвенные приложения для обработки данных; средства доступа к данным Microsoft SQL Server и Oracle, включая возможность создания и редактирования таблиц, триггеров, хранимых процедур; средства отладки хранимых процедур Microsoft SQL Server.</font></p> <ol>  <li>  <p><font><b>Microsoft Access</b></font></p> </li></ol> <p> <font>Первая версия СУБД Access появилась в начале 90-х годов. Это была первая настольная реляционная СУБД для 16-разрядной версии Windows. Популярность Access значительно возросла после включения этой СУБД в состав Microsoft Office.</font></p> <p> <font>В отличие от Visual FoxPro, фактически превратившегося в средство разработки приложений, Access ориентирован в первую очередь на пользователей Microsoft Office, в том числе и не знакомых с программированием. Это, в частности, проявилось в том, что вся информация, относящаяся к конкретной базе данных, а именно таблицы, индексы (естественно, поддерживаемые), правила ссылочной целостности, бизнес-правила, список пользователей, а также формы и отчеты хранятся в одном файле, что в целом удобно для начинающих пользователей.</font></p> <p> <font>Последняя версия этой СУБД - Access 13. Access 2013 позволяет быстро создавать персонализированные приложения, не требуя специальных знаний в разработке программ.</font></p> <p> <font>Основные возможности Access 2013:</font></p> <ul>  <li>  <p><font><b>Быстрое и легкое создание баз данных.</b></font><font> Access 2013 предлагает уже готовые шаблоны и компоненты, что делает его простым и эффективным решением для работы с базами данных. Всего пару щелчков мышкой, и база данных создана.</font></p>  </li><li>  <p><font><b>Выразительные формы и отчеты.</b></font><font> Новые и усовершенствованные инструменты Access 2013 помогают создавать профессионально выглядящие формы и отчеты.</font></p>  </li><li>  <p><font><b>Сложные выражения без написания кода.</b></font><font>Построитель выражений программы Access упрощает создание формул и выражений, что существенно сокращает количество ошибок.</font></p>  </li><li>  <p><font><b>Удобство работы.</b></font><font>Наиболее часто используемые команды можно расположить там, где Вам будет удобней их находить.</font></p>  </li><li>  <p> <font><b>Управление базами данных.</b></font><font>Access 2013 позволяет легко объединять данные и создавать связи между ними. Кроме того, пользователи могут также импортировать данные из внешних источников, собирать и обновлять их по электронной почте — сервер для этого не требуется.</font></p> </li></ul> <ol>  <li>  <h1><font>Дисциплина: Информационные сети</font></h1> </li></ol> " ],
 ["Информационные сети как открытые информационные системы. Многоуровневый подход.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><i><b>Информационная сеть</b></i></font><font> - совокупность устройств для сбора, обработки, хранения и передачи данных. Информационную сеть, которая объединяет открытые системы, принято также называть открытой информационной сетью.</font></p> <p> <font><i><b>Открытая система</b></i></font><font> - это система, реализующая открытые спецификации на интерфейсы, службы, и форматы данных, достаточные для того, чтобы обеспечить:</font></p> <ul>  <li>  <p> <font>возможность переноса (мобильность) прикладных систем, разработанных должным образом, с минимальными изменениями на широкий диапазон систем;</font> </p>  </li><li>  <p> <font>совместную работу (интероперабельность) с другими прикладными системами на локальных и удаленных платформах;</font> </p>  </li><li>  <p> <font>взаимодействие с пользователями в стиле, облегчающем последним переход от системы к системе (мобильность пользователей)'.</font></p> </li></ul> <p> <font>Ярким примером открытой системы является сеть Internet. Эта сеть развивалась в полном соответствии с требованиями, предъявляемыми к открытым системам. В разработке ее стандартов принимали участие тысячи специалистов-пользователей из различных университетов, научных организаций и фирм-производителей вычислительной аппаратуры и программного обеспечения, работающих в разных странах. Само название стандартов, определяющих работу Internet — Request For Comments (RFC, что можно перевести как 'запрос на комментарии', — говорит об открытом характере принимаемых стандартов. В результате сеть Internet объединила в себе разнообразное оборудование и программное обеспечение огромного количества сетей, разбросанных по всему миру.</font></p> <p> <font>Мировая практика создания систем привела к необходимости разработки стандартов по всему комплексу вопросов организации сетевых систем. В 1977 году Международная организация по стандартам ISO (</font><font>InternationalStandardizationOrganization</font><font>) разработала описание эталонной модели взаимодействия открытых систем OSI (</font><font>OpenSystemInterconnect</font><font>), которая получила название 7-уровневой модели.</font></p> <p> <font>В компьютерных сетях идеологической основой стандартизации является многоуровневый подход к разработке средств сетевого взаимодействия. Именно на основе этого подхода была создана стандартная семиуровневая модель взаимодействия открытых систем, ставшая своего рода универсальным языком сетевых специалистов.</font></p> <p> <font>Организация взаимодействия между устройствами сети является сложной задачей. Как известно, для решения сложных задач используется универсальный прием — декомпозиция, то есть разбиение одной задачи на несколько задач-модулей. Декомпозиция состоит в четком определении функций каждого модуля, а также порядка их взаимодействия (интерфейсов). В результате достигается логическое упрощение задачи, а, кроме того, появляется возможность модификации отдельных модулей без изменения остальной части системы.</font></p> <p> <font><b>При декомпозиции</b></font><font> часто используют многоуровневый подход</font><font>. Он заключается в следующем:</font></p> <ul>  <li>  <p> <font>все множество модулей, решающих частные задачи, разбивают на группы и упорядочивают по уровням, образующим иерархию;</font></p>  </li><li>  <p> <font>в соответствии с принципом иерархии для каждого промежуточного уровня можно указать непосредственно примыкающие к нему соседние вышележащий и нижележащий уровни;</font></p>  </li><li>  <p> <font>группа модулей, составляющих каждый уровень, должна быть сформирована таким образом, чтобы все модули этой группы для выполнения своих задач обращались с запросами только к модулям соседнего нижележащего уровня;</font></p>  </li><li>  <p> <font>с другой стороны, результаты работы всех модулей, отнесенных к некоторому уровню, могут быть переданы только модулям соседнего вышележащего уровня.</font></p> </li></ul> <p> <font>В</font><font>OSI</font><font> модели достаточно сложная задача разработки единого интерфейса между взаимодействующими компьютерами разбита на семь более простых. В каждом компьютере передаваемые данные проходят семь уровней преобразований, образующих стек интерфейсов и протоколов взаимодействия.</font></p> <p> <font>Эталонная модель определяет функции уровней обмена следующим образом.</font></p> <p> <font><b>Физический уровень</b></font><font> отвечает за подключение к среде передачи данных и определяет электротехнические, механические, процедурные и функциональные спецификации активизации и поддержания функционирования канала обмена между взаимодействующими системами. Спецификации физического уровня также определяют характеристики среды передачи данных. Такими характеристиками могут быть уровни напряжений и временные параметры сигналов, частотные характеристики, типы кабелей и разъемов, максимальные расстояния между устройствами и другие. Протоколы физического уровня: IEEE 802.15 (Bluetooth), IRDA, EIA RS-232, RS-485, DSL, ISDN, 802.11 Wi-Fi, Etherloop, GSM Um radio interface, ITU и ITU-T, TransferJet, ARINC 818.</font></p> <p> <font><b>Канальный уровень</b></font><font> обеспечивает надежную передачу данных через физический канал. В его функции входит формирование, прием и передача кадров данных, получаемых от сетевого и физического уровней. Спецификации канального уровня определяют различные характеристики сети и протокола обмена, включая физическую адресацию устройств, топологию сети, уведомление об ошибках, последовательность передаваемых кадров данных, загрузку каналов обмена. Протоколы</font><font> </font><font>канального</font><font> </font><font>уровня</font><font>: Controller Area Network (CAN), Econet, Ethernet, Ethernet Automatic Protection Switching (EAPS), Fiber Distributed Data Interface (FDDI), Frame Relay, High-Level Data Link Control (HDLC), IEEE 802.11 wireless LAN, Multiprotocol Label Switching (MPLS), Point-to-Point Protocol (PPP), Point-to-Point Protocol over Ethernet (PPPoE), StarLan, Token ring, Unidirectional Link Detection (UDLD), x.25.</font><font>В программировании этот уровень представляет драйвер сетевой платы, в операционных системах имеется программный интерфейс взаимодействия канального и сетевого уровней между собой.</font> </p> <p> <font><b>Сетевой уровень</b></font><font> определяет сетевые адреса компьютеров источника и приемника информации, которые отличаются от их физических адресов. Поскольку этот уровень имеет дело с логической организацией информационной сети, маршрутизаторы могут использовать его для определения направления передачи данных. Протоколы сетевого уровня: IP/IPv4/IPv6 (Internet Protocol), IPX (Internetwork Packet Exchange, протокол межсетевого обмена), X.25 (частично этот протокол реализован на уровне 2), CLNP (сетевой протокол без организации соединений), IPsec (Internet Protocol Security). Протоколы</font><font> </font><font>маршрутизации</font><font> - RIP (Routing Information Protocol), OSPF (Open Shortest Path First).</font></p> <p> <font><b>Транспортный уровень</b></font><font> является ответственным за то, чтобы данные не содержали ошибок, а кадры были переданы в соответствующей последовательности. Если в данных обнаруживается ошибка, то они должны быть переданы повторно. Транспортный уровень также управляет потоком обмена и следит, чтобы передающее устройство не посылало данных больше, чем может обработать приемное. Этот уровень выполняет функции мультиплексирования, то есть обеспечение приема данных от разных приложений и их отправку по одной физической линии связи. Этот же уровень отвечает за организацию и поддержание виртуальных сетей. Протоколы</font><font> </font><font>транспортного</font><font> </font><font>уровня</font><font>: ATP (AppleTalk Transaction Protocol), CUDP (Cyclic UDP), DCCP (Datagram Congestion Control Protocol), FCP (Fiber Channel Protocol), NBF (NetBIOS Frames protocol), NCP (NetWare Core Protocol), SCTP (Stream Control Transmission Protocol), SST (Structured Stream Transport), TCP (Transmission Control Protocol), UDP (User Datagram Protocol).</font></p> <p> <font><b>Сеансовый уровень</b></font><font> управляет началом и окончанием сеансов обмена данными. Он обеспечивает формирование запросов на передачу данных и ответных действий между приложениями, работающими в разных сетях, то есть осуществляет синхронизацию процессов передачи и приема данных в передающем и принимающем компьютерах. Протоколы сеансового уровня: ADSP (AppleTalk Data Stream Protocol), ASP (AppleTalk Session Protocol), H.245 (Call Control Protocol for Multimedia Communication), ISO-SP (OSI Session Layer Protocol (X.225, ISO 8327)), L2TP (Layer 2 Tunneling Protocol), NetBIOS (Network Basic Input Output System), PAP (Password Authentication Protocol), PPTP (Point-to-Point Tunneling Protocol), RPC (Remote Procedure Call Protocol), RTCP (Real-time Transport Control Protocol), SCP (Session Control Protocol), ZIP (Zone Information Protocol), SDP (Sockets Direct Protocol).</font></p> <p> <font><b>Представительный уровень</b></font><font> обеспечивает возможность обмена данными между приложениями, использующими различные методы кодирования, форматы и структуры данных, то есть отвечает за то, чтобы информация, посылаемая из прикладного уровня одной системы, была читаемой прикладным уровнем другой системы. Например, приложения могут использовать разные форматы графических изображений –</font><font>GIF</font><font> и</font><font>JPEG</font><font>. При наличии подобных различий представительный уровень осуществляет перекодирование, трансляцию, переформатирование данных и другие необходимые операции. Протоколы</font><font> </font><font>уровня</font><font> </font><font>представления</font><font>: AFP — Apple Filing Protocol, ICA — Independent Computing Architecture, LPP — Lightweight Presentation Protocol, NCP — NetWare Core Protocol, NDR — Network Data Representation, XDR — eXternal Data Representation, X.25 PAD — Packet Assembler/Disassembler Protocol.</font></p> <p> <font><b>Прикладной уровень</b></font><font> определяет возможность осуществления обмена данными между приложениями компьютеров и, если такая возможность есть, инициирует действия нижних уровней модели. Получив от соответствующего компонента приложения запрос на обслуживание, прикладной уровень определяет наличие в сети партнера, возможность установления с ним связи и достаточность ресурсов для реализации обмена. Напрямую взаимодействуя с приложениями, прикладные уровни синхронизируют их работу в рамках обмена данными. Протоколы прикладного уровня: RDP, HTTP, SMTP, SNMP, POP3, FTP, XMPP, OSCAR, SIP, TELNET и другие.</font></p> <p> <font>На практике каждый из этих уровней, за исключением физического, взаимодействует с выше – и нижележащими уровнями – представляет услуги вышележащему и пользуется услугами нижележащего. В реальной ситуации на одном компьютере независимо друг от друга иногда выполняется несколько реализаций одного уровня. Например, компьютер может иметь несколько сетевых адаптеров стандарта Ethernet или адаптеры стандартов Ethernet и Token-Ring и.т.д.</font></p> <p> <font>Модель</font><font>OSI</font><font> описывает концепцию организации информационной связи компьютеров, но не конкретный способ обмена данными. Реальная последовательность действий компьютеров определяется используемыми протоколами обмена. В рассматриваемом контексте протокол определяется как набор правил и соглашений, предписывающих компьютерам последовательность действий для осуществления обмена через среду передачи данных.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Модели и структуры информационных сетей: одноранговые сети, серверные сети, гибридные сети.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Вычислительная сеть</b></font><font> - это многослойный комплекс взаимосвязанных и согласованно функционирующих программных и аппаратных компонентов: компьютеров, коммуникационного оборудования, операционных систем, сетевых приложений.</font></p> <p> <font><b>Сеть может быть построена по одной из трех схем:</b></font> </p> <ul>  <li>  <p> <font>сеть на основе одноранговых узлов - одноранговая сеть;</font></p>  </li><li>  <p> <font>сеть на основе клиентов и серверов - сеть с выделенными серверами;</font></p>  </li><li>  <p> <font>сеть, включающая узлы всех типов - гибридная сеть.</font></p> </li></ul> <p><font><b>В одноранговых сетях</b></font><font> все компьютеры равны в возможностях доступа к ресурсам друг друга. Каждый пользователь может по своему желанию объявить какой-либо ресурс своего компьютера разделяемым, после чего другие пользователи могут с ним работать. Изменение роли компьютера в одноранговой сети достигается за счет того, что функции серверной или клиентской частей просто не используются. В одноранговой сети два или более компьютера соединены через сеть и могут обмениваться ресурсами (такими как принтеры и файлы), не имея выделенного сервера. Каждое подключенное конечное устройство (известное как узел) может функционировать либо как сервер, либо как клиент.</font> </p> <p><font>Простая домашняя сеть с двумя соединенными компьютерами, использующими общий принтер, является примером одноранговой сети.</font></p> <p> <font>Одноранговые сети проще в развертывании и эксплуатации; по этой схеме организуется работа в небольших сетях, в которых количество компьютеров не превышает 10-20.</font></p> <p> <font><b>Однораногвые сети</b></font><font>:</font></p> <ul>  <li>  <p> <font>Не требуют дополнительных расходов на серверы и необходимое ПО</font> </p>  </li><li>  <p> <font>просты в инсталляции </font> </p>  </li><li>  <p> <font>Не требуют специальной должности администратора сети</font> </p>  </li><li>  <p> <font>Позволяют пользователям управлять разделением ресурсов</font> </p>  </li><li>  <p> <font>При работе не вынуждают полагаться на функционирование других компьютеров</font> </p>  </li><li>  <p> <font>Стоимость создания небольших сетей достаточно низка</font> </p> </li></ul> <p> <font><b>Для одноранговых сетей характерны следующие недостатки:</b></font></p> <ul>  <li>  <p> <font>Дополнительная нагрузка на компьютеры из-за совместного использования ресурсов</font> </p>  </li><li>  <p> <font>Неспособность одноранговых узлов обслуживать большое число соединений</font> </p>  </li><li>  <p> <font>Отсутствие централизованной организации, что затрудняет поиск данных</font> </p>  </li><li>  <p> <font>Нет центрального места хранения файлов, что осложняет их архивирование</font> </p>  </li><li>  <p> <font>Необходимость администрирования пользователями собственных компьютеров</font> </p>  </li><li>  <p> <font>Слабая и неудобная система защиты</font> </p>  </li><li>  <p> <font>Отсутствие централизованного управления, осложняющее работу с большими одноранговыми сетями </font> </p> </li></ul> <p> <font>В больших сетях средства централизованного администрирования, хранения и обработки данных, а особенно защиты данных необходимы. Такие возможности легче обеспечить в сетях с выделенными серверами.</font> </p> <p> <font><b>Сети с выделенным сервером</b></font><font><b> </b></font> </p> <p> <font><b>Серверные сети</b></font><font> (клиент/сервер) характеризуются наличием в сети серверов, обеспечивающих защиту сети и ее администрирование. Серверные сети функционируют при наличии клиентов. Клиенты обращаются к серверу, который предоставляет им различные средства, например, печать или работу с файлами. Клиентские компьютеры, обычно менее мощные, чем машины в одноранговых сетях или серверы.</font></p> <p> <font>Здесь, сервер – это высокопроизводительный компьютер, обслуживающий клиентсткие подключения. </font> </p> <p> <font>Сетевые ресурсы в такой сети концентрируются на сервере, он же представляет услуги централизованного управления этими ресурсами.</font></p> <p> <font><b>Клиентами сети</b></font><font> на основе сервера являются компьютеры пользователей, которые обращаются к серверу за услугами по решению прикладных задач, таких как работа с общими файлами, отправка и получение электронной почты, ресурсоемкие вычисления, доступ в Интернет и т.п.</font> </p> <p> <font><b>Преимущества серверных сетей</b></font></p> <ul>  <li>  <p> <font>Сильная централизованная защита</font> </p>  </li><li>  <p> <font>Центральное хранилище файлов, благодаря чему все пользователи могут работать с одним набором данных, а резервное копирование важной информации значительно упрощается </font> </p>  </li><li>  <p> <font>Возможность совместного использования серверами доступного аппаратного и программного обеспечения снижают общие затраты</font> </p>  </li><li>  <p> <font>Способность совместного использования дорогого оборудования, например лазерных принтеров.</font> </p>  </li><li>  <p> <font>Оптимизированные выделенные серверы функционируют в режиме разделения ресурсов быстрее, чем одноранговые узлы</font> </p>  </li><li>  <p> <font>Менее назойливая система защиты - доступ к разделяемым ресурсам всей сети - обеспечивается по одному паролю</font> </p>  </li><li>  <p> <font>Освобождение пользователей от задачи управления разделяемыми ресурсами</font> </p>  </li><li>  <p> <font>Простая управляемость при большом числе пользователей</font> </p>  </li><li>  <p> <font>Централизованная организация, предотвращающая потерю данных на компьютерах</font> </p> </li></ul> <p> <font><b>Серверным сетям присущи некоторые недостатки:</b></font> </p> <ul>  <li>  <p> <font>Дорогое специализированное аппаратное оборудование</font> </p>  </li><li>  <p> <font>Дорогостоящие серверные ОС и клиентские лицензии</font> </p>  </li><li>  <p> <font>Как правило, требуется специальный администратор сети</font> </p> </li></ul> <p> <font><b>Гибридная сеть</b></font></p> <p> <font>В больших сетях наряду с отношениями клиент-сервер сохраняется необходимость и в одноранговых связях, поэтому такие сети чаще всего строятся по гибридной схеме.</font> </p> <p> <font>В гибридных сетях имеются все трипа клиентов, а также (как правило) активные домены и рабочие группы. Это означает, что хотя большинство общих ресурсов находится на серверах, пользователи имеют доступ к любым ресурсам, определенные как разделяемые на компьютерах в рабочей группе. Кроме того, для доступа к ресурсам рабочей группы, с которыми совместно работают одноранговые узлы сети, пользователям необязательно регистрироваться на контроллере домена.</font></p> <p> <font><b>Преимущества гибридных сетей:</b></font></p> <ul>  <li>  <p> <font>Достоинства серверной сети</font> </p>  </li><li>  <p> <font>Многие преимущества одноранговых вычислений</font> </p>  </li><li>  <p> <font>Позволяют пользователям и администраторам управлять защитой в зависимости от важности разделяемого ресурса</font> </p> </li></ul> <p> <font><b>Недостатки гибридных сетей:</b></font><font>те же, что и у серверных сетей</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Методы передачи данных. Синхронная и асинхронная передача. Обнаружение и коррекция ошибок.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>При обмене данными по каналам связи используются три метода передачи данных:</b></font></p> <p> <font>1) Симплексная (однонаправленная) —</font><font>TV</font><font>, радио;</font></p> <p> <font>2) Полудуплексная передача — (приём и передача данных осуществляются поочерёдно);</font> </p> <p> <font>3) Дуплексная (двунаправленная) – каждая станция одновременно передаёт и принимает данные.</font></p> <p> <font><b>Для передачи данных в информационных системах наиболее часто применяется последовательная (полудуплексная) передача. Она разделяется на два метода:</b></font></p> <p> <font>а) Асинхронная передача;</font></p> <p> <font>б) Синхронная передача.</font></p> <p> <font><b>При асинхронной передаче</b></font><font> каждый символ передаётся отдельной посылкой. Стартовые биты предупреждают о начале передачи. Затем передаётся символ. Для определения достоверности передачи используется бит чётности (бит чётности равен 1, если количество единиц в символе нечётно, и равен 0 в противном случае). Последний бит сигнализирует об окончании передачи. В асинхронных протоколах применяются стандартные наборы символов, чаще всего ASCII или EBCDIC.</font></p> <p> <font><b>Преимущества:</b></font></p> <p> <font>1) Несложная отработанная система;</font></p> <p> <font>2) Недорогое интерфейсное оборудование.</font></p> <p> <font><b>Недостатки:</b></font></p> <p> <font>1) Третья часть пропускной способности теряется на передачу служебных битов;</font></p> <p> <font>2) Невысокая скорость передачи данных по сравнению с синхронной;</font></p> <p> <font>3) При множественной ошибке с помощью бита чётности невозможно определить достоверность полученной информации.</font></p> <p> <font>Асинхронная передача используется в системах, где обмен данными происходит время от времени, и не требуется высокая скорость передачи данных.</font></p> <p> <font><b>Снхронный метод</b></font><font><b>.</b></font><font> Между пересылаемыми символами (байтами) нет стартовых и стоповых сигналов, поэтому отдельные символы в этих протоколах пересылать нельзя. Данные при синхронном методе передаются блоками. Для синхронизации работы приёмника и передатчика в начале блока передаются биты синхронизации. Затем передаются данные, код обнаружения ошибки и символ окончания передачи. Код обнаружения ошибки вычисляется по содержимому поля данных и позволяет однозначно определить достоверность принятой информации.</font></p> <p> <font><b>Преимущества:</b></font></p> <p> <font>1) Высокая эффективность передачи данных;</font></p> <p> <font>2) Высокая скорость передачи данных;</font></p> <p> <font>3) Надёжный встроенный механизм обнаружения ошибок.</font></p> <p> <font><b>Недостатки:</b></font></p> <p> <font>1) Интерфейсное оборудование более сложное и дорогое.</font></p> <p> <font>Канальный уровень должен</font><font><b>обнаруживать ошибки передачи данных, связанные с искажением бит в принятом кадре данных или с потерей кадра, и по возможности их корректировать.</b></font></p> <p> <font>Большая часть протоколов канального уровня выполняет только первую задачу - обнаружение ошибок, считая, что корректировать ошибки, то есть повторно передавать данные, содержавшие искаженную информацию, должны протоколы верхних уровней. Так работают такие популярные протоколы локальных сетей, как Ethernet, Token Ring, FDDI и другие. Однако существуют протоколы канального уровня, например LLC2 или LAP-B, которые самостоятельно решают задачу восстановления искаженных или потерянных кадров.</font></p> <p> <font>Очевидно, что протоколы должны работать наиболее эффективно в типичных условиях работы сети. Поэтому для сетей, в которых искажения и потери кадров являются очень редкими событиями, разрабатываются протоколы типа Ethernet, в которых не предусматриваются процедуры устранения ошибок.</font> </p> <p> <font>Напротив, если в сети искажения и потери случаются часто, то желательно уже на канальном уровне использовать протокол с коррекцией ошибок, а не оставлять эту работу протоколам верхних уровней. Протоколы верхних уровней, например транспортного или прикладного, работая с большими тайм-аутами, восстановят потерянные данные с большой задержкой. В глобальных сетях первых поколений, например сетях Х.25, которые работали через ненадежные каналы связи, протоколы канального уровня всегда выполняли процедуры восстановления потерянных и искаженных кадров. Поэтому нельзя считать, что один протокол лучше другого потому, что он восстанавливает ошибочные кадры, а другой протокол - нет. Каждый протокол должен работать в тех условиях, для которых он разработан.</font></p> <p> <font><b>Методы коррекции ошибок</b></font><font> в вычислительных сетях основаны на повторной передаче кадра данных в том случае, если кадр теряется и не доходит до адресата или приемник обнаружил в нем искажение информации.</font></p> <p> <font><b>Существуют два подхода к организации процесса обмена квитанциями</b></font><font>: с простоями и с организацией «окна». </font><font><i><b>Метод с простоями (Idle Source)</b></i></font><font> требует, чтобы источник, пославший кадр, ожидал получения квитанции (положительной или отрицательной) от приемника и только после этого посылал следующий кадр (или повторял искаженный). Если же квитанция не приходит в течение тайм-аута, то кадр (или квитанция) считается утерянным и его передача повторяется. Второй метод называется методом</font><font><b>«</b></font><font><i><b>скользящего</b></i></font><font><b> окна»</b></font><font></font><font><i><b>(sliding window)</b></i></font><font><b>.</b></font><font> В этом методе для повышения коэффициента использования линии источнику разрешается передать некоторое количество кадров в непрерывном режиме, то есть в максимально возможном для источника темпе, без получения на эти кадры положительных ответных квитанций.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Протоколы сетевых решений. Многоканальные, коммуникационные, циклические подсети.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Протокол сетевого уровня</b></font><font> (англ.</font><font><i>Network layer</i></font><font>) — протокол 3-его уровня сетевой модели OSI, предназначается для определения пути передачи данных. Отвечает за трансляцию логических адресов и имён в физические, определение кратчайших маршрутов, коммутацию и маршрутизацию, отслеживание неполадок и заторов в сети. На этом уровне работает такое сетевое устройство, как маршрутизатор. </font> </p> <p> <font>В пределах семантики иерархического представления модели OSI Сетевой уровень отвечает на запросы обслуживания от Транспортного уровня и направляет запросы обслуживания на Канальный уровень.</font></p> <p> <font>Протоколы сетевого уровня маршрутизируют данные от источника к получателю и могут быть разделены на два класса:</font><font><b>протоколы с установкой соединения и без него.</b></font></p> <ul>  <li>  <p> <font><i><b>Протоколы с установкой соединения</b></i></font><font> начинают передачу данных с вызова или установки маршрута следования пакетов от источника к получателю. После чего начинают последовательную передачу данных и затем по окончании передачи разрывают связь.</font></p> </li></ul> <ul>  <li>  <p> <font><i><b>Протоколы без установки соединения</b></i></font><font> посылают данные, содержащие полную адресную информацию в каждом пакете. Каждый пакет содержит адрес отправителя и получателя. Далее каждое промежуточное сетевое устройство считывает адресную информацию и принимает решение о маршрутизации данных. Письмо или пакет данных передается от одного промежуточного устройства к другому до тех пор, пока не будет доставлено получателю. Протоколы без установки соединения не гарантируют поступление информации получателю в том порядке, в котором она была отправлена, т.к. разные пакеты могут пройти разными маршрутами. За восстановления порядка данных при использовании сетевых протоколов без установки соединения отвечают транспортные протоколы.</font></p> </li></ul> <p> <font>Так как многие сети разделены на подсети и соединяются с другими сетями широковещательными каналами, сети используют специальные хосты, которые называются шлюзами или роутерами (маршрутизаторами) для доставления пакетов между сетями. Это также используется в интересах мобильных приложений, когда пользователь двигается от одного приложения к другому, в этом случае пакеты (сообщения) должны следовать за ним. В протоколе IPv4 такая идея описана, но практически не применяется. IPv6 содержит более рациональное решение.</font></p> <p> <font><b>Коммуникационная подсеть</b></font><font> представляет собой совокупность физической среды, программных и аппаратных средств, обеспечивающих передачу информации между группой абонентских систем. Рассматриваемая подсеть является важным компонентом информационно-вычислительной сети. В соответствии с этим к ней предъявляются</font><font><b>требования, основные из которых сводятся к следующим: </b></font><font>высокая надежность передачи блоков данных; небольшая стоимость передачи; высокая скорость передачи; износоустойчивость и долговечность оборудования; малые потери информации; минимальный штат обслуживания; передача данных, закодированных любым способом.</font></p> <p> <font>Коммуникационная система, как правило, состоит из группы практически одинаковых микропроцессорных блоков; Один из них специализируется на выполнении административных функций (сбор статистики, диагностика системы, выдача отчетов о работе). Остальные блоки выполняют функции, связанные с маршрутизацией и коммутацией информации. Число коммуникационных блоков зависит от размеров создаваемой коммуникационной подсети. В случае необходимости, при увеличении размеров подсети, в коммуникационную систему добавляется необходимое число коммуникационных блоков. Блоки коммуникационной системы соединяются одной либо, для надежности, двумя общими шинами.</font></p> <p> <font><b>Многоканальные подсети</b></font><font> - группа коммуникационных подсетей, созданных на базе единой физической среды, в которой за счет частотного уплотнения выделяется множество логических частотных двух- и многоточечных каналов. По каждому частотному каналу, выделяемому в многоканальной подсети, информация передается наложением сигналов на несущую частоту. Так как многоканальная подсеть характеризуется широким диапазоном передаваемых частот, то ее нередко называют широкополосным каналом.</font></p> <p> <font><b>Существует два метода передачи информации в многоканальной подсети.</b></font><font> Первый из них заключается в том, что в многоканальной подсети выделяются пары частотных каналов, передача информации по которым осуществляется на различных частотах. Канал 1 собирает блоки данных, передаваемые абонентскими системами. Что же касается канала 2, то он, наоборот, раздает этим системам полученные им блоки данных. А так как каналы работают на разных частотах, то многоканальная подсеть имеет головной преобразователь частоты. Его задачей является передача блоков, полученных из канала 1, в канал 2.</font></p> <p> <font><b>Второй метод</b></font><font> передачи информации заключается в том, что кабель делает петлю в головной части многоканальной подсети и благодаря этому дважды проходит мимо всех блоков доступа. Одна его часть собирает блоки данных, а вторая - раздает эти блоки.</font></p> <p> <font>Сравнивая оба метода, следует отметить, что при использовании первого из них длина дорогостоящей многоканальной подсети сокращается вдвое. Однако при этом вдвое уменьшается и пропускная способность. Поэтому выбор метода зависит от экономических факторов и необходимой пропускной способности канала.</font></p> <p> <font><b>Достоинствами многоканальной подсети</b></font><font> являются ее универсальность и высокая пропускная способность. Выделяя различные полосы и субполосы, здесь можно обеспечить передачу информации для широкого круга абонентов. Единые физические средства, используемые для передачи, также относятся к ее положительным качествам. Однако многоканальная подсеть очень дорога, громоздка и сложна в эксплуатации.</font></p> <p> <font><b>Циклической является коммуникационная подсеть</b></font><font>, выполненная в виде кольца, содержащего повторители в тех точках, в которых необходимо подключение абонентских систем. Каждый повторитель обладает небольшой задержкой, необходимой абонентской системе для записи данных и чтения-информации, проходящей мимо нее по кольцевому каналу. К повторителю подключается блок доступа, соединяемый абонентским звеном с абонентской системой. Так как каждый повторитель имеет задержку, время передачи блока данных по кольцу оказывается зависимым от числа подключаемых абонентских систем.</font></p> <p> <font>Циклическая подсеть является простым типом коммуникационной подсети.</font></p> <p> <font><b>Оно обеспечивает:</b></font></p> <p> <font>- легкость подключения абонентских систем,</font></p> <p> <font>- несложное управление передачей данных,</font></p> <p> <font>- низкую стоимость сети.</font></p> <p> <font>Однако циклическое кольцо обладает и </font><font><b>рядом значительных недостатков</b></font><font>. К ним в первую очередь относятся:</font></p> <p> <font>- ненадежность, связанная с тем, что выход из строя одного элемента кольца приводит к прекращению работы всей сети,</font></p> <p> <font>- возрастание времени передачи данных по кольцу при увеличении числа абонентских систем, подключенных к сети,</font></p> <p> <font>- трудности, связанные с передачей речи,</font></p> <p> <font>- необходимость синхронизации работы всех повторителей, установленных в кольце.</font></p> " ],
 ["Особенности технической реализации коммутаторов. Характеристики, влияющие на производительность коммутаторов.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>После того, как технология коммутации привлекла общее внимание и получила высокие оценки специалистов, многие компании занялись реализацией этой технологии в своих устройствах, применяя для этого различные технические решения.</font></p> <p> <font>В настоящее время коммутаторы используют в качестве базовой одну из трех схем взаимодействия своих блоков или модулей:</font><font><b>коммутационная матрица; разделяемая многовходовая память; общая шина.</b></font><font>Часто эти три способа взаимодействия комбинируются в одном коммутаторе.</font></p> <p> <font><b>Коммутаторы на основе коммутационной матрицы</b></font></p> <p> <font><i>Коммутационная матрица</i></font><font> - основной и самый быстрый способ взаимодействия процессоров портов, именно он был реализован в первом промышленном коммутаторе локальных сетей. Однако, реализация матрицы возможна только для определенного числа портов, причем сложность схемы возрастает пропорционально квадрату количества портов коммутатора.</font> </p> <p> <font>Входные блоки процессоров портов на основании просмотра адресной таблицы коммутатора определяют по адресу назначения номер выходного порта. Эту информацию они добавляют к байтам исходного кадра в виде специального ярлыка - тэга (tag). Матрица состоит из трех уровней двоичных переключателей, которые соединяют свой вход с одним из двух выходов в зависимости от значения бита тэга. Переключатели первого уровня управляются первым битом тэга, второго - вторым, а третьего - третьим. Матрица может быть реализована и по-другому, на основании комбинационных схем другого типа, но ее особенностью все равно остается технология коммутации физических каналов. Известным недостатком этой технологии является отсутствие буферизации данных внутри коммутационной матрицы - если составной канал невозможно построить из-за занятости выходного порта или промежуточного коммутационного элемента, то данные должны накапливаться в их источнике, в данном случае - во входном блоке порта, принявшего кадр.</font> </p> <p> <font><b>Коммутаторы с общей шиной</b></font></p> <p> <font>Коммутаторы с общей шиной используют для связи процессоров портов высокоскоростную шину, используемую в режиме разделения времени. Эта архитектура похожа на архитектуру коммутаторов на основе универсального процессора, но отличается тем, что шина здесь пассивна, а активную роль выполняют специализированные процессоры портов. </font> </p> <p> <font>Для того, чтобы шина не была узким местом коммутатора, ее производительность должна быть по крайней мере в N/2 раз выше скорости поступления данных во входные блоки процессоров портов. Кроме этого, кадр должен передаваться по шине небольшими частями, по несколько байт, чтобы передача кадров между несколькими портами происходила в псевдопараллельном режиме, не внося задержек в передачу кадра в целом. Размер такой ячейки данных определяется производителем коммутатора. Входной блок процессора помещает в ячейку, переносимую по шине, тэг, в котором указывает номер порта назначения. Каждый выходной блок процессора порта содержит фильтр тэгов, который выбирает тэги, предназначенные данному порту.</font> </p> <p> <font>Шина, так же как и коммутационная матрица, не может осуществлять промежуточную буферизацию, но так как данные кадра разбиваются на небольшие ячейки, то задержек с начальным ожиданием доступности выходного порта в такой схеме нет.</font> </p> <p> <font><b>Коммутаторы с разделяемой памятью</b></font></p> <p> <font>Третья базовая архитектура взаимодействия портов - двухвходовая разделяемая память.</font></p> <p> <font>Входные блоки процессоров портов соединяются с переключаемым входом разделяемой памяти, а выходные блоки этих же процессоров соединяются с переключаемым выходом этой памяти. Переключением входа и выхода разделяемой памяти управляет менеджер очередей выходных портов. В разделяемой памяти менеджер организует несколько очередей данных, по одной для каждого выходного порта. Входные блоки процессоров передают менеджеру портов запросы на запись данных в очередь того порта, который соответствует адресу назначения пакета. Менеджер по очереди подключает вход памяти к одному из входных блоков процессоров и тот переписывает часть данных кадра в очередь определенного выходного порта. По мере заполнения очередей менеджер производит также поочередное подключение выхода разделяемой памяти к выходным блокам процессоров портов, и данные из очереди переписываются в выходной буфер процессора.</font> </p> <p> <font>Память должна быть достаточно быстродействующей для поддержания скорости переписи данных между N портами коммутатора. Применение общей буферной памяти, гибко распределяемой менеджером между отдельными портами, снижает требования к размеру буферной памяти процессора порта.</font> </p> <p> <font><b>Комбинированные коммутаторы</b></font></p> <p> <font>У каждой из описанных архитектур есть свои преимущества и недостатки, поэтому часто в сложных коммутаторах эти архитектуры применяются в комбинации друг с другом.</font></p> <p> <font>Коммутатор состоит из модулей с фиксированным количеством портов (2 - 8), выполненных на основе специализированной БИС (ASIC), реализующей архитектуру коммутационной матрицы. Если порты, между которыми нужно передать кадр данных, принадлежат одному модулю, то передача кадра осуществляется процессорами модуля на основе имеющейся в модуле коммутационной матрицы. Если же порты принадлежат разным модулям, то процессоры общаются по общей шине. При такой архитектуре передача кадров внутри модуля будет происходить чаще всего быстрее, чем при межмодульной передаче, так как коммутационная матрица - наиболее быстрый, хотя и наименее масштабируемый способ взаимодействия портов. Скорость внутренней шины коммутаторов может достигать нескольких Гб/c, а у наиболее мощных моделей - до 10 - 14 Гб/с.</font> </p> <p> <font><b>Основными характеристиками коммутатора, измеряющими его производительность, являются:</b></font><font><b> </b></font><font>скорость фильтрации (filtering); скорость маршрутизации (forwarding); пропускная способность (throughput); задержка передачи кадра.</font></p> <p> <font>Кроме того, существует несколько характеристик коммутатора, </font><font><b>которые в наибольшей степени влияют на указанные характеристики производительности. К ним относятся:</b></font><font>размер буфера (буферов) кадров; производительность внутренней шины; производительность процессора или процессоров; размер внутренней адресной таблицы.</font></p> <p> <font><b>Скорость фильтрации</b></font><font> (filtering) определяет скорость, с которой коммутатор выполняет следующие этапы обработки кадров: прием кадра в свой буфер; просмотр адресной таблицы с целью нахождения порта для адреса назначения кадра; уничтожение кадра, так как его порт назначения и порт источника принадлежат одному логическому сегменту.</font></p> <p> <font><b>Скорость продвижения</b></font><font> (forwarding) определяет скорость, с которой коммутатор выполняет следующие этапы обработки кадров: прием кадра в свой буфер; просмотр адресной таблицы с целью нахождения порта для адреса назначения кадра; передача кадра в сеть через найденный по адресной таблице порт назначения.</font></p> <p> <font>Как скорость фильтрации, так и скорость продвижения измеряются обычно в кадрах в секунду. Если в характеристиках коммутатора не уточняется, для какого протокола и для какого размера кадра приведены значения скоростей фильтрации и продвижения, то по умолчанию считается, что эти показатели даются для протокола Ethernet и кадров минимального размера, то есть кадров длиной 64 байт (без преамбулы) с полем данных в 46 байт.</font> </p> <p> <font><b>Пропускная способность</b></font><font> коммутатора измеряется количеством переданных в единицу времени через его порты пользовательских данных.</font></p> <p> <font>Максимальное значение пропускной способности коммутатора всегда достигается на кадрах максимальной длины, так как при этом доля накладных расходов на служебную информацию кадра гораздо ниже, чем для кадров минимальной длины, а время выполнения коммутатором операций по обработке кадра, приходящееся на один байт пользовательской информации, существенно меньше.</font></p> <p> <font><b>Задержка передачи кадра</b></font><font> измеряется как время, прошедшее с момента прихода первого байта кадра на входной порт коммутатора до момента появления этого байта на выходном порту коммутатора.</font> </p> <p> <font>Задержка складывается из времени, затрачиваемого на буферизацию байт кадра, а также времени, затрачиваемого на обработку кадра коммутатором, - просмотра адресной таблицы, принятия решения о фильтрации или продвижении и получения доступа к среде выходного порта.</font></p> <p> <br> </p> " ],
 ["Принципы объединения сетей на основе протоколов сетевого уровня. Понятие", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>В стандартной модели взаимодействия открытых систем в функции сетевого уровня входит решение следующих задач:</b></font></p> <ul>  <li>  <p> <font>передача пакетов между конечными узлами в составных сетях;</font></p>  </li><li>  <p> <font>выбор маршрута передачи пакетов, наилучшего по некоторому критерию;</font></p>  </li><li>  <p> <font>согласование разных протоколов канального уровня, использующихся в отдельных подсетях одной составной сети.</font></p> </li></ul> <p> <font>Протоколы сетевого уровня реализуются, как правило, в виде программных модулей и выполняются на конечных узлах-компьютерах, называемых хостами, а также на промежуточных узлах - маршрутизаторах, называемых шлюзами. Функции маршрутизаторов могут выполнять как специализированные устройства, так и универсальные компьютеры с соответствующим программным обеспечением.</font></p> <p> <font><b>Понятие internetworking</b></font></p> <p> <font>Основная идея введения сетевого уровня состоит в следующем. Сеть в общем случае рассматривается как совокупность нескольких сетей и называется составной сетью или интерсетью</font><font><i>(internetwork</i></font><font> или</font><font><i>internet).</i></font><font> Сети, входящие в составную сеть, называются подсетями</font><font><i>(subnet),</i></font><font> составляющими сетями или просто сетями</font></p> <p> <font>Подсети соединяются между собой маршрутизаторами. Компонентами составной сети могут являться как локальные, так и глобальные сети.</font></p> <p> <font>Сетевой уровень выступает в качестве координатора, организующего работу всех подсетей, лежащих на пути продвижения пакета по составной сети. Для перемещения данных в пределах подсетей сетевой уровень обращается к используемым в этих подсетях технологиям.</font></p> <p> <font>Естественным способом формирования сетевого адреса является уникальная нумерация всех подсетей составной сети и нумерация всех узлов в пределах каждой подсети. Таким образом, сетевой адрес представляет собой пару: номер сети (подсети) и номер узла.</font></p> <p> <font>В качестве номера узла может выступать либо локальный адрес этого узла, либо некоторое число, никак не связанное с локальной технологией, которое однозначно идентифицирует узел в пределах данной подсети. И в том и другом случае каждый узел составной сети имеет наряду со своим локальным адресом еще один - универсальный сетевой адрес.</font></p> <p> <font>Данные, которые поступают на сетевой уровень и которые необходимо передать через составную сеть, снабжаются заголовком сетевого уровня. Данные вместе с заголовком образуют пакет. Заголовок пакета сетевого уровня имеет унифицированный формат, не зависящий от форматов кадров канального уровня тех сетей, которые могут входить в объединенную сеть, и несет наряду с другой служебной информацией данные о номере сети, которой предназначается этот пакет. Сетевой уровень определяет маршрут и перемещает пакет между подсетями.</font></p> <p> <font>При передаче пакета из одной подсети в другую пакет сетевого уровня, инкапсулированный в прибывший канальный кадр первой подсети, освобождается от заголовков этого кадра и окружается заголовками кадра канального уровня следующей подсети. Информацией, на основе которой делается эта замена, являются служебные поля пакета сетевого уровня. В поле адреса назначения нового кадра указывается локальный адрес следующего маршрутизатора.</font></p> <p> <font>Основным полем заголовка сетевого уровня является номер сети-адресата. Явная нумерация сетей позволяет протоколам сетевого уровня составлять точную карту межсетевых связей и выбирать рациональные маршруты при любой их топологии, в том числе альтернативные маршруты, если они имеются, что не умеют делать мосты и коммутаторы.</font></p> <p> <font>Кроме номера сети заголовок сетевого уровня должен содержать и другую информацию, необходимую для успешного перехода пакета из сети одного типа в сеть другого типа.</font></p> <p> <font>Когда две или более сети организуют совместную транспортную службу, то такой режим взаимодействия обычно называют</font><font><b>межсетевым взаимодействием (internetworking).</b></font></p> <p> <font>Важнейшей задачей сетевого уровня является</font><font><b>маршрутизация</b></font><font> - передача пакетов между двумя конечными узлами в составной сети.</font></p> <p> <font>В сложных составных сетях почти всегда существует несколько альтернативных маршрутов для передачи пакетов между двумя конечными узлами. </font><font><b>Маршрут</b></font><font> - это последовательность маршрутизаторов, которые должен пройти пакет от отправителя до пункта назначения.</font></p> <p> <font><b>Основная функция маршрутизатора</b></font><font> - чтение заголовков пакетов сетевых протоколов, принимаемых и буферизуемых по каждому порту, и принятие решения о дальнейшем маршруте следования пакета по его сетевому адресу, включающему, как правило, номер сети и номер узла.</font></p> <p> <font>Функции маршрутизатора могут быть разбиты на 3 группы в соответствии с уровнями модели OSI.</font></p> <p> <font><b>На нижнем уровне маршрутизатор</b></font><font>, как и любое устройство, подключенное к сети, обеспечивает физический интерфейс со средой передачи, включая согласование уровней электрических сигналов, линейное и логическое кодирование, оснащение определенным типом разъема.</font></p> <p> <font><b>На сетевом уровне</b></font><font> выполняется одна из важнейших функций маршрутизатора - фильтрация трафика. Маршрутизатор, обладая более высоким интеллектом, нежели мосты и коммутаторы, позволяет задавать и может отрабатывать значительно более сложные правила фильтрации.</font></p> <p> <font>Сетевые протоколы активно используют в своей работе таблицу маршрутизации, но ни ее построением, ни поддержанием ее содержимого не занимаются. Эти функции выполняют протоколы маршрутизации. На основании этих протоколов маршрутизаторы обмениваются информацией о топологии сети, а затем анализируют полученные сведения, определяя наилучшие по тем или иным критериям маршруты. Результаты анализа и составляют содержимое таблиц маршрутизации.</font></p> <p> <font>В настоящее время стек TCP/IP является самым популярным средством организации составных сетей.В стеке TCP/IP определены 4 уровня: прикладной, основной (транспортный), уровень межсетевого взаимодействия, уровень сетевых интерфейсов.</font></p> <p> <font>Стержнем всей архитектуры является</font><font><i>уровень межсетевого взаимодействия,</i></font><font> который реализует концепцию передачи пакетов в режиме без установления соединений, то есть дейтаграммным способом. Именно этот уровень обеспечивает возможность перемещения пакетов по сети, используя тот маршрут, который в данный момент является наиболее рациональным. Этот уровень также называют уровнем internet, указывая тем самым на основную его функцию - передачу данных через составную сеть.</font></p> <p> <font>Поскольку на сетевом уровне не устанавливаются соединения, то нет никаких гарантий, что все пакеты будут доставлены в место назначения целыми и невредимыми или придут в том же порядке, в котором они были отправлены. Эту задачу - обеспечение надежной информационной связи между двумя конечными узлами - решает</font><font><i>основной уровень</i></font><font> стека TCP/IP, называемый также</font><font><i>транспортным</i></font><font>.</font></p> <p> <font><i>Прикладной уровень</i></font><font> объединяет все службы, предоставляемые системой пользовательским приложениям.</font></p> <p> <font>Идеологическим отличием архитектуры стека TCP/IP от многоуровневой организации других стеков является интерпретация функций самого нижнего уровня -</font><font><i>уровня сетевых интерфейсов.</i></font></p> <p> <font>Уровень сетевых интерфейсов в протоколах TCP/IP не регламентируется, но он поддерживает все популярные стандарты физического и канального уровней.</font></p> <ol>  <li>  <p> <font>Основные схемы глобальных связей при удаленном доступе.</font></p> </li></ol> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Удаленный доступ</b></font><font> - очень широкое понятие, которое включает в себя различные типы и варианты взаимодействия компьютеров, сетей и приложений. Если рассматривать все многочисленные схемы взаимодействия, которые обычно относят к удаленному доступу, то всем им присуще</font><font><i>использование глобальных каналов или глобальных сетей</i></font><font> при взаимодействии. Кроме того, для удаленного доступа, как правило, характерна</font><font><i>несимметричность взаимодействия</i></font><font>, когда, с одной стороны, имеется центральная крупная сеть или центральный компьютер, а с другой - отдельный удаленный терминал, компьютер или небольшая сеть, которые хотят получить доступ к информационным ресурсам центральной сети. Количество удаленных от центральной сети узлов и сетей, требующих этот доступ, постоянно растет, поэтому современные средства удаленного доступа рассчитаны на поддержку большого количества удаленных клиентов.</font></p> <p> <font><b>Основные схемы удаленного доступа, отличающиеся типом взаимодействующих систем:</b></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m1edad037.jpg'></p> <p> <br> </p> <ul>  <li>  <p> <font>терминал-компьютер-(1);</font></p>  </li><li>  <p> <font>компьютер-компьютер - (2);</font></p>  </li><li>  <p> <font>компьютер-сеть- (3);</font></p>  </li><li>  <p> <font>сеть-сеть - (4).</font></p> </li></ul> <p> <font>Первые три вида удаленного доступа часто объединяют понятием индивидуального доступа, а схемы доступа сеть - сеть иногда делят на два класса - ROBO и SOHO. Класс</font><font><i>ROBO (Regional Office/Branch Office)</i></font><font> соответствует случаю подключения к центральной сети сетей средних размеров - сетей региональных подразделений предприятия, а классу</font><font><i>SOHO (Small Office/Home Office)</i></font><font> соответствует случай удаленного доступа сетей небольших офисов и домашних сетей.</font></p> <p> <font><b>Типы поддерживаемых служб</b></font></p> <p> <font>Схемы удаленного доступа могут отличаться также и типом служб, которые поддерживаются для удаленного клиента. Наиболее часто используется удаленный доступ к файлам, базам данных, принтерам в том же стиле, к которому пользователь привык при работе в локальной сети. Такой режим называется</font><font><i>режимом удаленного узла (remote node)</i></font><font>. Иногда при удаленном доступе реализуется обмен с центральной сетью сообщениями </font><font><i>электронной почты</i></font><font>, с помощью которого можно в автоматическом режиме получить запрашиваемые корпоративные данные, например из базы данных.</font></p> <p> <font>Особое место среди всех видов удаленного доступа к компьютеру занимает способ, при котором пользователь получает возможность удаленно работать с компьютером таким же способом, как если бы он управлял им с</font><font><b>помощью локально подключенного терминала.</b></font><font> В этом режиме он может запускать на выполнение программы на удаленном компьютере и видеть результаты из выполнения. При этом принято подразделять такой способ доступа на</font><font><i><b>терминальный доступ</b></i></font><font><b> и </b></font><font><i><b>удаленное управление</b></i></font><font>. Если у удаленного пользователя в распоряжении имеется только неинтеллектуальный алфавитно-цифровой терминал или же он запускает на своем персональном компьютере программу эмуляции такого терминала, то такой режим работы называют</font><font><b>терминальным доступом (терминал - компьютер).</b></font><font> Отличительной особенностью терминального доступа является то, что операционные системы на компьютере, к которому получают доступ пользователи, рассчитаны на многотерминальный режим работы, поэтому главное здесь — отличная от стандартного варианта схема подключения терминала, ориентированная на глобальные сети.</font></p> <p> <font><b>При удаленном управлении (компьютер-компьютер)</b></font><font> пользователь запускает на своем компьютере программу, которая эмулирует ему на экране сеанс работы с операционной системой, которая не поддерживает многотерминальный режим работы. Программа эмуляции экрана через глобальные каналы взаимодействует с дополнительным программным обеспечением, работающим под управлением соответствующей операционной системы на удаленном компьютере. Пользователь, как и при терминальном доступе, также получает полное управление удаленным компьютером, при этом он видит на экране графический интерфейс привычной ему операционной системы. Результат получается практически тот же, но за счет нестандартного дополнительного программного обеспечения на удаленном компьютере.</font></p> <p> <font><b>Доступ компьютер - сеть</b></font></p> <p> <font>В связи с широким использованием на предприятиях локальных сетей наиболее часто встречающийся вид удаленного доступа — это доступ не к отдельному компьютеру, а к сети в целом. Для этой цели в центральной сети предприятия устанавливается специальная система — сервер удаленного доступа (Remote Access Server, RAS), который выполняет большой спектр функций по обслуживанию многочисленных удаленных клиентов. Задачи сервера удаленного доступа, который часто называют также коммуникационным сервером, зависят от схемы удаленного доступа.</font></p> <p> <font><b>Коммуникационный сервер</b></font><font> — это обычный компьютер или специализированное устройство, предоставляющее пользователям локальной сети прозрачный доступ к последовательным портам ввода/вывода, к которым подключены разделяемые модемы. Пользователь, подключившийся по локальной сети к коммуникационному серверу, может работать с одним из подключенных к нему модемов точно так же, как если бы этот модем был подключен непосредственно к компьютеру пользователя. Таким образом, коммуникационный сервер обслуживает пользователей локальной сети, делая локальные модемы разделяемыми ресурсами. </font> </p> <p> <font><b>Типы используемых глобальных служб</b></font></p> <p> <font>Схема организации удаленного доступа во многом определяется теми глобальными транспортными службами, которые доступны в точках нахождения многочисленных клиентов удаленного доступа. Кроме степени распространенности необходимо учитывать и стоимость глобальной службы.</font></p> <p> <font><i>Экономические аспекты</i></font><font> удаленного доступа должны учитывать способ его оплаты и интенсивность использования, которое обычно оценивается количеством часов загруженности глобальных каналов в месяц. Необходимо иметь в виду, что практически все транспортные службы удаленного доступа, связанные с коммутируемыми каналами, оплачиваются повременно, а в транспортных службах постоянных каналов схема оплаты помесячная, не зависящая от загрузки канала.</font></p> <p> <font>Поэтому обычно сначала определяется, какое количество часов в месяц будет тот или иной удаленный пользователь работать с центральной локальной сетью удаленно. Затем на основании тарифов оплаты телекоммуникационных услуг находится тот вид услуги, который более экономичен для данного количества часов месячной работы.</font></p> <ol>  <li>  <h1><font>Дисциплина: Основы теории управления</font></h1> </li></ol> " ],
 ["Управление как информационный процесс. Информационные технологии в управлении.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Управление по своей сущности является информационным процессом</b></font><font><b>,</b></font><font> связанным со сбором информации, ее хранением, обработкой и выработкой управленческого решения о целенаправленном воздействии на систему, причем само решение формируется в виде информационного импульса, корректирующего траекторию развития системы.</font> </p> <p> <font>Действительно для принятия тех или иных решений и их реализации требуется постоянно производить различные действия с информацией: получить и обработать данные о состоянии регулируемого объекта и окружающее его среды, передать контролируемому объекту управляющие команды для изменения его состояния в соответствии с целью управления. Часто при организации процесса управления требуется также хранить поступающую информацию, для того чтобы использовать ее в дальнейшем. Таким образом</font><font><b>, в ходе управления применяются все наиболее важные виды работы с информацией,</b></font><font> фигурирующие в определении информационного процесса.</font> </p> <p> <font>Необходимо отметить, что первоначально все исследования в области информации относились к кибернетике. Однако с развитием науки область ее проблем расширялась, изучались все новые аспекты работы с информацией. В результате возникла более общая наука - информатика, в которую в качестве составной части вошла кибернетика.</font> </p> <p> <font>Системы, изучаемые в кибернетике, могут быть очень сложными, включающими в себя множество взаимодействующих объектов. Однако для понимания базовых понятий теории можно обойтись простейшей из таких систем, которая содержит всего два объекта - управляющий и исполнительный (управляемый). Примером может служить, например, система, состоящая из светофора и автомобиля.</font></p> <p> <font>В простейшем случае управляющий объект посылает свои команды исполнительному объекту, без учета его состояния. В этом случае воздействия передаются только в одном направлении, такая система называется разомкнутой. </font> </p> <p> <font>Такой процесс не учитывает состояние управляемого объекта и обеспечивает управление по прямому каналу (от управляющего объекта к управляемому). Подобные системы управления называются разомкнутыми. </font><font><b>Информационную модель разомкнутой системы управления</b></font><font> можно наглядно представить с помощью следующей схемы:</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_27465076.png'></p> <p> <font><b>Разомкнутыми системами</b></font><font> являются всевозможные информационные табло на вокзалах и аэропортах, которые управляют перемещениями пассажиров. К рассматриваемому классу систем можно отнести и современные программируемые бытовые приборы.</font> </p> <p> <font>Как правило, описанная схема управления не очень эффективна и нормально работает только до возникновения экстремальных условий. Так, при больших потоках транспорта возникают пробки, в аэропортах и вокзалах приходится дополнительно открывать справочные бюро, в микроволновой печи при неправильной программе может произойти перегрев и. т. п.</font></p> <p> <font>Более совершенные системы управления отслеживают результаты деятельности управляемой системы. В таких системах дополнительно появляется ещё один информационный поток - от объекта управления к системе управления; его принято называть обратной связью. Именно по каналу обратной связи передаются сведения о состоянии объекта и степени достижения (или, наоборот, не достижения) цели управления.</font> </p> <p> <font>В том случае, когда управляющий объект получает информацию о реальном положении управляемого объекта по каналу обратной связи и производит необходимые перемещения по прямому каналу управления,</font><font><b>система управления называются замкнутой</b></font><font>. Информационная модель замкнутой системы управления наглядно представлена на схеме:</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_1d5fb061.png'></p> <p> <font><b>Главным принципом управления в замкнутой системе</b></font><font> является выдача управляющих команд в зависимости от получаемых сигналов обратной связи. В такой системе управляющий объект стремится скомпенсировать любое отклонение управляемого объекта от состояния, предусмотренного целями управления.</font> </p> <p> <font>Обратную связь, при которой управляющий сигнал стремится уменьшить (скомпенсировать) отклонение от некоторой поддерживаемой величины, принято называть отрицательной.</font> </p> <p> <font>Примером замкнутых систем управления является хорошо знакомое вам обучение в классе. Здесь управляющую систему представляет учитель, а ученики являются объектом управления. Прямой канал передачи информации - что передача знаний учителем, а обратная связь - ответы учеников, результаты контрольных работ, сочинения и т. п. Благодаря обратной связи в результате анализа проведенной контрольной учитель может, например, провести дополнительный урок по данной теме или, наоборот, особо отличившихся учеников освободить от заданий.</font></p> <p> <font><b>Автоматизированная информационная технология</b></font><font> - информационная технология, в которой для передачи, сбора, хранения и обработки данных, используются методы и средства вычислительной техники и систем связи.</font></p> <p> <font><b>Технология</b></font><font>- это правила действия с использованием каких-либо средств, которые являются общими для целой совокупности задач или задачных ситуации. Если реализация технологии направлена на выработку управляющего воздействия,</font><font><b>то это технология управления.</b></font></p> <p> <font><b>Информационные технологии в управлении</b></font><font> – это комплекс методов переработки разрозненных исходных данных в надежную и оперативную информацию механизма принятия решений с помощью аппаратных и программных средств с целью достижения оптимальных рыночных параметров объекта управления.</font></p> <p> <font><b>Состав информационной технологии управления.</b></font><font>Для информатизации общества и бизнеса необходим широкий спектр программно-аппаратных средств, в том числе вычислительной техники и средств связи. Различные технические средства обеспечивают прием и передачу трех основных видов информации (речь, печатный текст, графика) в статике и динамике с максимальным использованием трех чувств восприятия человека (слух, осязание, зрение).</font> </p> <p> <font>Программные средства обеспечивают обработку данных и состоят из общего и прикладного программного обеспечения и программных документов, необходимых для эксплуатации этих программ.</font><font><b>К общему программному обеспечению</b></font><font> относят операционные системы, системы программирования и программы технического обслуживания, которые предоставляют сервис для эксплуатации компьютера, выявления ошибок при сбоях, восстановления испорченных программ и данных</font><font><b>. Прикладное программное обеспечение</b></font><font> определяет разнообразие информационных технологий и состоит из отдельных прикладных программ или пакетов, называемых приложениями. Ряд приложений могут применять все пользователи, а применение некоторых приложений требует определенного уровня квалификации проектировщика.</font></p> <p> <font>Разнообразие технических средств и операционных систем вынудили разработчиков ввести понятие платформы.</font><font><b>Платформа</b></font><font> определяет тип компьютера и операционной системы, на которых можно установить используемую информационную технологию. Практика показывает, что эволюция программно-аппаратного комплекса идет непрерывно по мере повышения квалификации и уровня знаний тех, кто реально использует эти средства. Модульность программно-аппаратных средств - ключ к эволюционному развитию систем.</font> </p> <p> <font><b>Структура конкретной автоматизированной информационной технологии управления для своей реализации предполагает наличие трех компонент:</b></font></p> <p> • <font>комплекса технических средств, состоящего из средств вычислительной, коммуникационной и организационной техники;</font></p> <p> • <font>системы программных средств, состоящей из системного (общего) и прикладного программного обеспечения;</font></p> <p> • <font>системы организационно-методического обеспечения, включающей инструктивные и нормативно-методические материалы по организации работы управленческого и технического персонала и рамках конкретной АИТУ обеспечения управленческой деятельности.</font></p> <p> <font>Автоматизированные информационные технологии по способу реализации в автоматизированной информационной системе делятся</font><font><b>на традиционные и новые.</b></font><font> </font><font><b>Традиционные АИТУ</b></font><font> существовали в условиях централизованной обработки данных и до массового использования персональных компьютеров были ориентированы главным образом на снижение трудоемкости процессов формирования регулярной отчетности. </font><font><b>Новые информационные технологии</b></font><font> связаны с информационным обеспечением процесса управления в режиме реального времени.</font><font><b>Новая информационная технология</b></font><font> – это технология, которая основывается на применении компьютеров, активном участии пользователей (непрофессионалов в области программирования) в информационном процессе, высоком уровне дружественного пользовательского интерфейса, широком применении пакетов прикладных программ общего и проблемного направления, использовании режима реального времени и</font></p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> " ],
 ["Управляемость линейных систем. Наблюдаемость линейных систем. Двойственность управляемости и наблюдаемости.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Пусть управляемый процесс описывается уравнением</b></font><font>: <img src='/static/i_0067f68bc106c46b_html_145e7b1f.gif'> (1)</font></p> <p> <font>В котором А и В – постоянные матрицы размерности</font><font>n</font><font>*</font><font>n</font><font> и</font><font>n</font><font>*</font><font>r</font><font>соответственно. Допустимыми управлениями будем считать функции <img src='/static/i_0067f68bc106c46b_html_d8a4d93.gif'>, где Т – произвольный, но заранее фиксированный момент времени.</font></p> <p> <font><b>Для того чтобы система (1) при</b></font><font><b>f</b></font><font><b>(</b></font><font><b>t</b></font><font><b>)=0 была вполне управляемой</b></font><font>на отрезке [0,Т], необходимо и достаточно, чтобы вектор функции <img src='/static/i_0067f68bc106c46b_html_26ee40ac.gif'> были линейно независимыми на этом отрезке.</font></p> <p> <font>Практическое применение данного утверждения связано с необходимостью строить вектор функции <img src='/static/i_0067f68bc106c46b_html_26ee40ac.gif'>, которые являются столбцами матрицы <img src='/static/i_0067f68bc106c46b_html_m2e2cb466.gif'>. Поэтому для проверки условий управляемости требуется строить фундаментальную матрицу решений однородного уравнения </font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m7a664517.gif'><font>(2)</font></p> <p> <font>Свойства этой матрицы полностью определяются матрицей А. Именно поэтому попытаемся получить условия полной управляемости системы (1), выраженные непосредственно через свойства матрицы А и В.</font></p> <p> <font>Так как А – постоянная матрица, то фундаментальная матрица решений уравнения (2), нормальная при <img src='/static/i_0067f68bc106c46b_html_455eb68f.gif'> имеет вид <img src='/static/i_0067f68bc106c46b_html_2202a65f.gif'>. Поэтому решение уравнения (1), удовлетворяющее начальному условию: <img src='/static/i_0067f68bc106c46b_html_m1ee1b37.gif'></font><font><i>,</i></font></p> <p> <font>можно записать в виде: <img src='/static/i_0067f68bc106c46b_html_m4b7e42c9.gif'></font></p> <p> <font>Если уравнение</font><font>u</font><font>(</font><font>t</font><font>) обеспечивает переход системы к моменту времени</font><font>t</font><font> =</font><font>T</font><font> в состояние <img src='/static/i_0067f68bc106c46b_html_f014f94.gif'>,</font></p> <p> <font>То</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_ma1d9f0a.gif'></p> <p> <font>И, следовательно,</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m1376bd.gif'> <font>(3)</font></p> <p> <font>Матрица <img src='/static/i_0067f68bc106c46b_html_5029bd89.gif'> допускает представление</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_5fccfe7e.gif'></p> <p> <font>Где <img src='/static/i_0067f68bc106c46b_html_m2e3d855.gif'> - коэффициенты интерполяционного многочлена Лагранжа-Сильвестра, а</font><font>m</font><font>– степень минимального многочлена матрицы А.Поэтому из (3) получаем</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_4412e0b9.gif'> <font>(4)</font></p> <p> <font>Обозначая через</font><font>U</font><font> вектор с компонентами</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_55bbf135.gif'> <font>(5)</font></p> <p> <font>А через</font><font>W</font><font> матрицу</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_1932a648.gif'><font>(6)</font></p> <p> <font>Равенство (4) запишем в виде</font><font>WU</font><font>=с.</font></p> <p> <font>Обозначая, далее, через</font><font>w</font><sub><font>k</font></sub><font> –</font><font>k</font><font>-й столбец матрицы</font><font>W</font><font>, последнему равенству можно придать вид</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_2b6ef128.gif'> <font>(7)</font></p> <p> <font>Это равенство, в частности, означает, что произвольный вектор <img src='/static/i_0067f68bc106c46b_html_m5554e845.gif'> представляет собой линейную комбинацию векторов</font><font>w</font><sub><font>1</font></sub><font>, …,</font><font>w</font><sub><font>q</font></sub><font>, размерность каждого из которых также равна</font><font>n</font><font>.</font></p> <p> <font>Так как</font><font>q</font><font> =</font><font>mr</font><font> ≥</font><font>n</font><font>, то числа</font><font>U</font><sub><font>1</font></sub><font>, …,</font><font>U</font><sub><font>q</font></sub><font>, определяются из (7) неоднозначно. Однако их однозначность и не требуется. Важно, что эти числа существуют. Каждый их набор определяется с помощью отношений (5) функции <img src='/static/i_0067f68bc106c46b_html_5798f9f0.gif'>.</font></p> <p> <font>В самом деле, пусть числа</font><font>U</font><sub><font>1</font></sub><font>, …,</font><font>U</font><sub><font>q</font></sub><font> каким-либо способом определены. Тогда равенства (5) можно рассматривать как моментные соотношения относительно функции <img src='/static/i_0067f68bc106c46b_html_5798f9f0.gif'>. При этом их можно разбить на группы. К первой группе относим моментальные соотношения относительно функции <img src='/static/i_0067f68bc106c46b_html_m11dbce90.gif'>. Ко второй – относительно <img src='/static/i_0067f68bc106c46b_html_m664dc132.gif'> и т.д. Согласно первоначального утверждения первая группа этих соотношений определяет <img src='/static/i_0067f68bc106c46b_html_m11dbce90.gif'>, так как функции <img src='/static/i_0067f68bc106c46b_html_mb8bd940.gif'>линейно независимы. По той же причине из остальных соотношений последовательно находим <img src='/static/i_0067f68bc106c46b_html_671d8323.gif'>.</font></p> <p> <font>Полученный результат можно сформулировать следующим образом.</font></p> <p> <font><b>Линейная стационарная система (1) вполне управляема на отрезке 0 ≤</b></font><font><b>t</b></font><font><b> ≤</b></font><font><b>T</b></font><font><b> тогда и только тогда, когда матрица (6) имеет ранг, равный</b></font><font><b>n</b></font><font>.</font></p> <p> <font><b>Наблюдаемость.</b></font></p> <p> <font><i>Для того чтобы система</i></font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m7a664517.gif'><font>(8)</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_75ee8194.gif'><font>(9)</font></p> <p> <font>где А и С – постоянные матрицы размерности</font><font>n</font><font>*</font><font>n</font><font> и</font><font>n</font><font>*</font><font>r</font><font>соответственно,</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_107baa1a.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_530a9ffe.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_530a9ffe.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_530a9ffe.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_530a9ffe.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_5d590859.png'></p> <p> <font><b>Принцип двойственности</b></font><font><b>.</b></font><font> Как видно из условий управляемости и условий наблюдаемости, они определяются сходными соотношениями. Здесь мы покажем, что за этими внешними признаками кроется содержательная закономерность.</font> </p> <p> <font>Пусть даны две системы. Одна из них описывается уравнениями</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m77c86f9e.png'><font> (10)</font></p> <p> <font>где А, В, С и D — постоянные матрицы размерностей</font><font>n</font><font>*</font><font>n</font><font> и</font><font>n</font><font>*</font><font>r</font><font> соответственно. Вторая система описывается уравнениями</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_4c6ca0e3.png'> <font>(11)</font></p> <p> <font>где векторы v, w и z имеют размерности n, p и г соответственно. </font> </p> <p> <font>Согласно теореме </font><font><b>система (11) вполне управляема тогда и только тогда</b></font><font>, когда матрица <img src='/static/i_0067f68bc106c46b_html_a9706f1.gif'> (12) имеет ранг, равный</font><font>n</font><font>. С другой стороны, эта же система вполне наблюдаема тогда и только тогда, когда матрица <img src='/static/i_0067f68bc106c46b_html_m10eed872.png'> (13)</font></p> <p> <font>имеет ранг, также равный</font><font>n</font><font>. Это следует из утверждений, приведенных выше.</font></p> <p> <font>На основании тех же утверждений находим, что для полной наблюдаемости системы (11) необходимо и достаточно, чтобы матрица (12) имела ранг, равный</font><font>n</font><font>, и для того чтобы эта система была вполне управляемой, необходимо и достаточно, чтобы матрица (13) имела ранг, равный</font><font>n</font><font>. </font> </p> <p> <font>Таким образом, условия полной управляемости для системы (10) совпадают с условиями полной наблюдаемости для системы (11) и, наоборот, условия полной наблюдаемости системы (10) совпадают с условиями полной управляемости системы (11). Этот результат обычно формулируется в виде следующего принципа.</font> </p> <p> <font><b>Принцип двойственности. Для того чтобы система (10) была вполне управляемой {вполне наблюдаемой), необходимо и достаточно, чтобы система (11) была вполне наблюдаема {вполне управляема).</b></font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1> <font>Дисциплина: Моделирование систем</font></h1> </li></ol> " ],
 ["Моделирование как метод научного познания. Определения понятий модели и моделирования.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Исследование значения моделирования должно начинаться с определения понятия 'модель'.</font></p> <p> <font>Слово</font><font><b>'модель</b></font><font>' означает: мера, образ, способ и т.д. Его первоначальное значение было связано со строительным искусством, и почти во всех европейских языках оно употреблялось для обозначения образа или прообраза, или вещи, сходной в каком-то отношении с другой вещью.</font> </p> <p> <font>С другой стороны, в таких науках о природе, как астрономия, механика, физика, химия, термин 'модель' стал применяться для обозначения того, к чему даннная теория относится или может относиться, того, что она описывает. Под моделью в широком смысле понимают мысленно или практически созданную структуру, воспроизводящую часть действительности в упрощенной и наглядной форме. В более узком смысле термин </font><font><b>'модель</b></font><font>' применяют тогда, когда хотят изобразить некоторую область явлений с помощью другой, более хорошо изученной, легче понимаемой. Так, физики 18 века пытались изобразить оптические и электрические явления посредством механических ('планетарная модель атома' - строение атома изображалось как строение солнечной системы).</font></p> <p> <font>В научной литературе анализируется несколько понятий</font><font><b>модели</b></font><font>, но наиболее полное определение понятия 'модель' дает В. А. Штофф в своей книге 'Моделирование и философия'. </font><font><b>Под моделью</b></font><font> понимается такая мысленно представляемая или материально реализуемая система, которая отображая или воспроизводя объект исследования, способна замещать его так, что ее изучение дает нам новую информацию об этом объекте.</font></p> <p> <font><b>Дадим определение понятия моделирование.</b></font><font> Моделирование - метод исследования объектов познания на их моделях; построение и изучение моделей реально существующих предметов и явлений (органических и неорганических систем, инженерных устройств, разнообразных процессов - физических, химических, биологических, социальных) и конструируемых объектов для определения либо улучшения их характеристик, рационализации способов их построения, управления и т.п.</font><font><b>Моделирование может быть:</b></font></p> <ul>  <li>  <p> <font>предметным (исследование объекта на модели основных геометрических, физических, динамических, функциональных его характеристик)</font></p>  </li><li>  <p> <font>физическим (воспроизведение физических процессов)</font></p>  </li><li>  <p> <font>предметно-математическим (исследование физического процесса путем опытного изучения каких-либо явлений иной физической природы, но описываемых те ми же математическими соотношениями, что и моделируемый процесс)</font></p>  </li><li>  <p> <font>знаковым (расчетное моделирование, абстрактно-математическое)</font></p> </li></ul> <p> <font><b>Познание любой системы (S)</b></font><font>сводится по существу к созданию её модели. Перед изготовлением каждого устройства или сооружения разрабатывается его модель - проект. Любое произведение искусства является моделью, фиксирующее действительность.</font></p> <p> <font>Достижения математики привели к распространению математических моделей различных объектов и процессов. Подмечено, что динамика функционирования разных по физической природе систем характеризуется однотипными зависимостями, что позволяет моделировать их на ЭВМ.</font> </p> <p> <font>На качественно новую ступень поднялось моделирование в результате разработки методологии имитационного моделирования на ЭВМ.</font></p> <p> <font>Специалисты считают, что моделирование становится основной функцией вычислительной системы (ВС). На практике широко используются АСУ технологическими процессами, организационно-экономическими комплексами, процессами проектирования, базами данных и знаний. Но любая из этих систем нуждается в информации об управляемом объекте и модели управляемого объект, в моделировании тех или иных управляющих решений.</font></p> <p> <font>Обычно процесс разработки сложной системы осуществляется итерационно с использованием моделирования проектных решений. Если характеристики не удовлетворяют предъявленным требованиям, то по результатам анализа производят корректировку проекта, затем снова проводят моделирование.</font> </p> <p> <font>При анализе действующих систем с помощью моделирования определяют границы работоспособности системы, выполняют имитацию экспериментальных условий, которые могут возникнуть в процессе функционирования системы. Искусственное создание таких условий на действительной системе затруднено и может привести к катастрофическим последствиям.</font> </p> <p> <font>Применение моделирования может быть полезным при разработке стратегии развития ВС, её усовершенствования при создании сетей ЭВМ.</font></p> <p> <font>В литературе приводятся несколько определений понятия «моделирование». Мы под моделированием будем понимать средство изучения системы путём её замены более удобной для исследования системой (моделью), сохраняющей интересующие исследователя свойства.</font> </p> <p> <font><b>Иными словами - модель</b></font><font> - это объект любой природы, который способен замещать изучаемый объект в интересующих исследователя свойствах, а моделирование - это построение (или выбор) и изучение моделей с целью получения новых знаний об объектах.</font></p> <p> <font><b>Моделирование</b></font><font> - это замещение одного объекта (оригинала) другим (моделью) и фиксация и изучение свойств модели. Замещение производится с целью упрощения, удешевления, ускорения изучения свойств оригинала.</font> </p> <p> <font>В общем случае объектом-оригиналом может быть естественная или искусственная, реальная или воображаемая система. Она имеет множество параметров S</font><sub><font>0</font></sub><font> и характеризуется определёнными свойствами. Количественной мерой свойств системы служит множество характеристик Y</font><sub><font>0</font></sub><font>, система проявляет свои свойства под влиянием внешних воздействий Х.</font> </p> <p> <font>Множество параметров S и их значений отражает её внутреннее содержание - структуру и принципы функционирования. Характеристики S - это в основном её внешние признаки, которые важны при взаимодействии с другими S.</font> </p> <p> <font>Характеристики S находятся в функциональной зависимости от её параметров. Каждая характеристика системы y</font><sub><font>0</font></sub><font><font>⊂</font></font><font>Y</font><sub><font>0</font></sub><font> определяется в основном ограниченным числом параметров{S</font><sub><font>0k</font></sub><font>} </font><font><font>⊂</font></font><font>S</font><sub><font>0</font></sub><font>. Остальные параметры не влияют на значение данной характеристики S. Исследователя интересуют, как правило, только некоторые характеристики S{y}</font><font><font>⊂</font></font><font>Y</font><sub><font>0</font></sub><font> при конкретных воздействиях на систему {x</font><sub><font>mn</font></sub><font>} </font><font><font>⊂</font></font><font>X. </font> </p> <p> <font><b>Модель</b></font><font> — это тоже система со своими множествами параметров S</font><sub><font>m</font></sub><font> и характеристик Y</font><sub><font>m</font></sub><font>. Оригинал и модель сходны по одним параметрам и различны по другим.</font> </p> <p> <font>Моделирование целесообразно, когда у модели отсутствуют те признаки оригинала, которые препятствуют его исследованию.</font> </p> <p> <font><b>Теория моделирования</b></font><font> — взаимосвязанная совокупность положений, определений, методов и средств создания моделей. Сами модели являются предметом теории моделирования.</font> </p> <p> <font>Теория моделирования является основной составляющей общей теории систем - системологии, гдев качестве главного принципа постулируются осуществимые модели: система представима конечным множеством моделей, каждая из которых отражает определённую грань её сущности.</font></p> " ],
 ["Сущность системного подхода к моделированию систем. Цели и этапы моделирования систем.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Бурное развитие науки и техники, выход практически всех отраслей знаний на новый, более всеобъемлющий уровень, все возрастающее взаимопроникновение фундаментальных и технических дисциплин потребовали объединения усилий специалистов разных направлений. Создание очень сложных и разветвленных народнохозяйственных механизмов, разработка сложных технических объектов и систем, проблемы управления, экономики и экологии обусловили необходимость использования нетрадиционных для конкретной области методов и методик. Проявилась необходимость проведения исследований междисциплинарного характера.</font><font><b>В этих условиях возникли так называемые системные методы исследований</b></font><font>, особенно сильным толчком для развития которых и, по существу, определяющим их возможности явилось появление вычислительной техники. Развитие любой отрасти науки и техники в современных условиях невозможно без ЭВМ и это особенно характерно для системных исследований. В литературе, посвященной кибернетике и системным исследованиям, можно найти достаточно много определений понятия 'система'. И практически все они, так или иначе, сводятся к определению, которое приведено в классическом издании Большой советской энциклопедии: '</font><font><b>система</b></font><font> - это множество элементов, находящихся в отношениях и связях друг с другом, которое образует определенную целостность и единство'. В рамках этого определения под сложной системой будем понимать систему, обладающую большим количеством элементов и связей, которую можно описать каким-либо образом.</font></p> <p> <font>Все, кто сталкивается с понятием «системный подход», в принципе представляют, что это такое. Исследователь всегда стремился изучать явление, факт или объект в совокупности с другими явлениями, фактами или объектами. Иными словами, стремление к комплексному, системному изучению является очевидным для ученого или практика.</font><font><b>Системный подход</b></font><font> - это некий общеметодологический принцип.</font></p> <p> <font><b>Системный подход позволяет решить</b></font><font> проблему построения сложной системы с учетом всех факторов и возможностей, пропорциональных их значимости, на всех этапах исследования системы S и построения модели М. Системный подход означает, что каждая система S является интегрированным целым даже тогда, когда она состоит из отдельных разобщенных подсистем. Таким образом,</font><font><b>в основе системного подхода</b></font><font> лежит рассмотрение системы как интегрированного целого, причем это рассмотрение при разработке начинается с главного — формулировки цели функционирования. Важным для системного подхода является определение структуры системы – совокупности связей между элементами системы, отражающих их взаимодействие.</font></p> <p> <font>На основе исходных данных Д, которые известны из анализа внешней системы, тех ограничений, которые накладываются на систему сверху либо, исходя из возможностей ее реализации, и на основе цели функционирования формулируются исходные требования Т к модели системы S. На базе этих требований формируются ориентировочно некоторые подсистемы П, элементы Э и осуществляется наиболее сложный этап синтеза — выбор В составляющих системы, для чего используются специальные критерии выбора (КВ).</font> </p> <p> <font>При моделировании необходимо обеспечить максимальную эффективность модели системы. Эффективность обычно определяется как некоторая разность между какими-то показателями ценности результатов, полученных в итоге эксплуатации модели, и теми затратами, которые были вложены в ее разработку и создание.</font></p> <p><font><b>Основная общая цель моделирования</b></font><font> заключается в наблюдении за системой, подверженной воздействию внешних или внутренних факторов при достижении системой определенного состоянии, которое может быть как задано, так и неизвестно, из-за отсутствия информации или по каким либо иным причинам. Моделирование позволяет определить сможет ли система функционировать при таких условиях или нет, во время этого перехода. В зависимости от реальной модели и цели расширяются и конкретизируются.</font></p> <p> <font><b>Можно выделить следующие основные этапы построения моделей.</b></font></p> <p> <font>1.</font><font><b>Содержательное описание моделируемого объекта.</b></font><font> Объекты моделирования описываются с позиций системного подхода. Исходя из цели исследования устанавливаются совокупность элементов, взаимосвязи между элементами, возможные состояния каждого элемента, существенные характеристики состояний и отношения между ними. Например, фиксируется, что если значение одного параметра возрастает, то значение другого — убывает и т.п. Вопросы, связанные с полнотой и единственностью выбора характеристик, не рассматриваются. Естественно, в таком словесном описании возможны логические противоречия, неопределенности. Это исходная естественно-научная концепция исследуемого объекта. Такое предварительное, приближенное представление системы называют концептуальной моделью. Для того чтобы содержательное описание служило хорошей основой для последующей формализации, требуется обстоятельно изучить моделируемый объект. Нередко естественное стремление ускорить разработку модели уводит исследователя от данного этапа непосредственно к решению формальных вопросов. В результате построенная без достаточного содержательного базиса модель оказывается непригодной к использованию. На этом этапе моделирования широко применяются качественные методы описания систем, знаковые и языковые модели.</font></p> <p> <font>2.</font><font><b>Формализация операций</b></font><font>. Формализация сводится в общих чертах к следующему. На основе содержательного описания определяется исходное множество характеристик системы. Для выделения существенных характеристик необходим хотя бы приближенный анализ каждой из них. При проведении анализа опираются на постановку задачи и понимание природы исследуемой системы. После исключения несущественных характеристик выделяют управляемые и неуправляемые параметры и производят символизацию. Затем определяется система ограничений на значения управляемых параметров. Если ограничения не носят принципиальный характер, то ими пренебрегают.</font></p> <p> <font>Дальнейшие действия связаны с формированием целевой функции модели. В соответствии с известными положениями выбираются показатели исхода операции и определяется примерный вид функции полезности на исходах. Если функция полезности близка к пороговой (или монотонной), то оценка эффективности решений возможна непосредственно по показателям исхода операции. В этом случае необходимо выбрать способ свертки показателей (способ перехода от множества показателей к одному обобщенному показателю) и произвести саму свертку. По свертке показателей формируются критерий эффективности и целевая функция.</font></p> <p> <font>Если при качественном анализе вида функции полезности окажется, что ее нельзя считать пороговой (монотонной), прямая оценка эффективности решений через показатели исхода операции неправомочна. Необходимо определять функцию полезности и уже на ее основе вести формирование критерия эффективности и целевой функции. В целом замена содержательного описания формальным — это итеративный процесс.</font></p> <p> <font><b>3. Проверка адекватности модели.</b></font><font> Требование адекватности находится в противоречии с требованием простоты, и это нужно учитывать при проверке модели на адекватность. Исходный вариант модели предварительно проверяется по следующим основным аспектам:</font></p> <p> <font>Все ли существенные параметры включены в модель?</font></p> <p> <font>Нет ли в модели несущественных параметров?</font></p> <p> <font>Правильно ли отражены функциональные связи между параметрами?</font></p> <p> <font>Правильно ли определены ограничения на значения параметров?</font></p> <p> <font>Для проверки рекомендуется привлекать специалистов, которые не принимали участия в разработке модели. Они могут более объективно рассмотреть модель и заметить ее слабые стороны, чем ее разработчики. Такая предварительная проверка модели позволяет выявить грубые ошибки. После этого приступают к реализации модели и проведению исследований. Полученные результаты моделирования подвергаются анализу на соответствие известным свойствам исследуемого объекта.</font> </p> <p> <font>Главным путем проверки адекватности модели исследуемому объекту выступает практика. Однако она требует накопления статистики, которая далеко не всегда бывает достаточной для получения надежных данных. Для многих моделей первые два приемлемы в меньшей степени. В этом случае остается один путь: заключение о подобии модели и прототипа делать на основе сопоставления их структур и реализуемых функций. Такие заключения не носят формального характера, поскольку основываются на опыте и интуиции исследователя.</font></p> <p> <font>По результатам проверки модели на адекватность принимается решение о возможности ее практического использования или о проведении корректировки.</font></p>ого числа действующих факторов тех, которые в наибольшей степени влияют на общее поведение системы;</font></p>?етры, ограничения на значения управляемых параметров, показатели исхода операции, связи показателей исхода операции с существенными параметрами, критерий эффективности. После внесения изменений в модель вновь выполняется оценка адекватности.</font></p> <p> <font><b>5. Оптимизация модели.</b></font><font> Сущность оптимизации моделей состоит в их упрощении при заданном уровне адекватности. Основными показателями, по которым возможна оптимизация модели, выступают время и затраты средств для проведения исследований на ней. В основе оптимизации лежит возможность преобразования моделей из одной формы в другую. Преобразование может выполняться либо с использованием математических методов, либо эвристическим путем.</font></p> <p> <font>Эксперименты по моделированию проводятся с весьма разнообразными целями, в числе которых могут быть:</font></p> <ul>  <li>  <p> <font>оценка – определение, насколько хорошо система предлагаемой структуры будет соответствовать некоторым конкретным критериям;</font></p>  </li><li>  <p> <font>сравнение альтернатив – сопоставление конкурирующих систем, рассчитанных на выполнение определенной функции, или же на сопоставление нескольких предлагаемых рабочих принципов или методик;</font></p>  </li><li>  <p> <font>прогноз – оценка поведения системы при некотором предполагаемом сочетании рабочих условий;</font></p>  </li><li>  <p> <font>анализ чувствительности – выявление из большого числа действующих факторов тех, которые в наибольшей степени влияют на общее поведение системы;</font></p>  </li><li>  <p> <font>выявление функциональных соотношений – определение природы зависимости между двумя или несколькими действующими факторами, с одной стороны, и откликом системы с другой;</font></p>  </li><li>  <p> <font>оптимизация – точное определение такого сочетания действующих факторов и их величин, при котором обеспечивается наилучший отклик всей системы в целом.</font></p> </li></ul> " ],
 ["Классификация видов моделирования. Классификационные признаки. Классификация в зависимости от характера изучаемых процессов и форм представлений объекта.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>В основе моделирования лежит теория подобия, которая утверждает, что абсолютное подобие может иметь место лишь при замене одного объекта другим точно таким же. При моделировании абсолютное подобие не имеет места и стремятся к тому, чтобы модель достаточно хорошо отображала исследуемую сторону функционирования объекта.</font></p> <p> <font>Классификационные признаки моделирования систем S приведены на рис. 1.</font></p> <p><img src='/static/i_0067f68bc106c46b_html_43bd4971.png'></p> <p> <font>Рис. 1. Классификация видов моделирования систем</font></p> <p> <font><b>В зависимости от характера изучаемых процессов в системе S все виды моделирования могут быть разделены:</b></font></p> <ul>  <li>  <p> <font><b>Детерминированные</b></font><font> - отображают детерминированные процессы, т.е. процессы, в которых предполагается отсутствие всяких случайных воздействий;</font></p>  </li><li>  <p> <font><b>Стохастические</b></font><font> - отображают вероятностные процессы и события. В этом случае анализируется ряд реализаций случайного процесса, и оцениваются средние характеристики, т. е. набор однородных реализаций;</font></p>  </li><li>  <p> <font><b>Статические и динамические.</b></font><font> </font><font><b>Статическое моделирование</b></font><font> служит для описания поведения объекта в какой-либо момент времени, а</font><font><b>динамическое моделирование</b></font><font> отражает поведение объекта во времени.</font></p>  </li><li>  <p> <font><b>Дискретные и непрерывные</b></font><font>. </font><font><b>Дискретное моделирование</b></font><font> служит для описания процессов, которые предполагаются дискретными, соответственно </font><font><b>непрерывное моделирование</b></font><font> позволяет отразить непрерывные процессы в системах, а</font><font><b>дискретно-непрерывное моделирование</b></font><font> используется для случаев, когда хотят выделить наличие как дискретных, так и непрерывных процессов.</font></p> </li></ul> <p> <font><b>В зависимости от формы представления объекта (системы S) можно выделить мысленное и реальное моделирование.</b></font></p> <p> <font><i><u><b>Мысленное моделирование</b></u></i></font><font> часто является единственным способом моделирования объектов, которые либо практически нереализуемы в заданном интервале времени, либо существуют вне условий, возможных для их физического создания. Например, на базе мысленного моделирования могут быть проанализированы многие ситуации микромира, которые не поддаются физическому эксперименту.</font> </p> <p> <font><b>Мысленное моделирование может быть реализовано в виде</b></font><font>наглядного;</font><font><b> </b></font><font>символического;</font><font><b> </b></font><font>математического.</font></p> <p> <font><i><u><b>При наглядном моделировании</b></u></i></font><font> на базе представлений человека о реальных объектах создаются различные наглядные модели, отображающие явления и процессы, протекающие в объекте.</font> </p> <p> <font><i><u><b>Символическое моделирование</b></u></i></font><font> представляет собой искусственный процесс создания логического объекта, который замещает реальный и выражает основные свойства его отношений с помощью определенной системы знаков или символов.</font></p> <p> <font><i><u><b>Математическое моделирование</b></u></i></font><font>. Для исследования характеристик процесса функционирования любой системы</font><font>S</font><font> математическими методами, включая и машинные, должна быть проведена формализация этого процесса, т. е. построена математическая модель.</font></p> <p> <font><i><u>Под математическим моделированием</u></i></font><font> будем понимать процесс установления соответствия данному реальному объекту некоторого математического объекта, называемого математической моделью, и исследование этой модели, позволяющее получать характеристики рассматриваемого реального объекта.</font> </p> <p> <font><i><u><b>При реальном моделировании</b></u></i></font><font> используется возможность исследования различных характеристик либо на реальном объекте целиком, либо на его части. Такие исследования могут проводиться как на объектах, работающих в нормальных режимах, так и при организации специальных режимов для оценки интересующих исследователя характеристик. Реальное моделирование является наиболее адекватным, но при этом его возможности с учетом особенностей реальных объектов ограничены.</font></p> <p> <font><b>Виды реального моделирования:</b></font><font>натурное;</font><font><b> </b></font><font>физическое.</font></p> <p> <font><i><u><b>Натурным моделированием</b></u></i></font><font><i><u> называют</u></i></font><font> проведение исследования на реальном объекте с последующей обработкой результатов эксперимента на основе теории подобия.</font> </p> <p> <font>Другим видом реального моделирования является </font><font><i><u><b>физическое</b></u></i></font><font><i><u>,</u></i></font><font> отличающееся от натурного тем, что исследование проводится на установках, которые сохраняют природу явлений и обладают физическим подобием. В процессе физического моделирования задаются некоторые характеристики внешней среды и исследуется поведение либо реального объекта, либо его модели при заданных или создаваемых искусственно воздействиях внешней среды.</font> </p> " ],
 ["Статистическое моделирование систем. Определение понятий статистические испытания и статистическое моделирование. Метод Монте – Карло.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><font>В практике моделирования систем наиболее часто приходится иметь дело с объектами, которые в процессе своего функционирования содержат элементы стохастичности или подвергаются стохастическим воздействиям внешней среды. Поэтому основным методом получения результатов с помощью имитационных моделей таких стохастических систем является</font></font><font><font><b>метод статистического моделирования</b></font></font><font><font> на ЭВМ, использующий в качестве теоретической базы предельные теоремы теории вероятностей.</font></font></p> <p> <font><font><b>Статистическое моделирование</b></font></font><font><font> представляет собой метод получения с помощью ЭВМ статистических данных о процессах, происходящих в моделируемой системе. Для получения представляющих интерес оценок характеристик моделируемой системы</font></font><font><font><i><b>S</b></i></font></font><font><font><i> </i></font></font><font><font>с</font></font><font><font><i> </i></font></font><font><font>учетом воздействий внешней среды</font></font><font><font><i><b>Е</b></i></font></font><font><font><i> </i></font></font><font><font>статистические данные обрабатываются и классифицируются с использованием методов математической статистики.</font></font></p> <p> <font><font>На этапе исследования и проектирования систем при построении и реализации машинных моделей (аналитических и имитационных) широко используется</font></font><font><font><b>метод статистических испытаний</b></font></font><font><font> (Монте-Карло), который базируется на использовании случайных чисел, т. е. возможных значений некоторой случайной величины с заданным распределением вероятностей.</font></font></p> <p> <font><font><b>Метод статистических испытаний</b></font></font><font><font> – метод вычислительной и прикладной математики, основанный на моделировании случайных величин и построении статистических оценок для искомых величин.</font></font> </p> <p> <font><b>Метод Монте – Карло</b></font></p> <p> <font><font>Одним из широко применяемых методов статистического анализа является метод Монте-Карло. Исходными данными для анализа являются внутренние Х={х1, х2,…, хn} и внешние параметры F= {f1, f2, …, fk} (воздействие среды — сигналы, нагрузка, температура, помехи и т.п.), а результатом решения — определение выходных параметров исследуемого объекта Y= G (X, F).</font></font></p> <p> <font><font>При производстве изделий и в процессе их эксплуатации имеются неизбежные отклонения от номинальных (требуемых) значений X и F, что приводит к отличию У от Уном. Поэтому окончательное суждение о качестве изделия можно сделать после выполнения статистического анализа, позволяющего оценить рассеяния выходных параметров относительно номинальных (требуемых) значений.</font></font><img src='/static/i_0067f68bc106c46b_html_m513d7676.jpg'></p> <p> <font></font><font><font><b>Метод Монте-Карло реализует статистический анализ на основе статистических испытаний.</b></font></font><font><font> В этом случае исходной информацией являются числовые характеристики закона распределения внутренних параметров X и допустимые диапазоны изменения внешних параметров F, а результатом — числовые характеристики закона распределения У. Алгоритм метода включает выполнение N-испытаний (опытов). В каждом испытании задаются случайные значения хi, и fj в соответствии с их законом распределения и определяются случайные значения параметров уk.</font></font> </p> <p> <font><font>Схема вычислений методом Монте-Карло представлена на рисунке. В методе многократно (N раз) повторяется детерминированный, одновариантный расчет; N должно быть достаточно большим, чтобы выборка была представительной.</font></font></p> <p> <font><font>Метод статистических испытаний успешно применяется, например, при статистическом анализе микросхем, интегральных схем. Эти схемы имеют большую размерность, нелинейные и корреляционные связи между параметрами, что существенно осложняет прямые аналитические расчеты. Метод Монте-Карло реализует вариантный расчет и, по существу, представляет собой численный метод решения аналитической задачи.</font></font></p> <p> <font>--------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Моделирование случайных величин с заданным законом распределения. Метод нелинейных преобразований.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Моделирование случайных величин с заданным законом распределения</b></font></p> <p> <font>Практически все методы моделирования случайных величин с заданными законами распределения основаны на нелинейных преобразованиях одной или нескольких равномерно в интервале (0,1) или нормально распределенных случайных величин. В результате моделирования на ЦВМ формируется последовательность выборочных значений (реализаций) случайной (псевдослучайной) величины с заданным распределением.</font></p> <p> <font>Задача моделирования непрерывных или дискретных случайных величин является распространенной задачей при моделировании возмущений, действующих на радиоэлектронную систему. Алгоритмы моделирования, разработанные для этого случая, часто служат основой для моделирования случайных векторов и случайных процессов.</font></p> <p> <font><b>Моделирование случайных величин методом нелинейного преобразования, обратного функции распределения</b></font></p> <p> <font>Другое название этого метода – стандартный метод моделирования непрерывной случайной величины. Он позволяет с помощью функционального преобразования равномерно распределенной в интервале (0, 1) случайной величины α формировать случайные величины с заданным распределением.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m1d5a3537.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_5319ca3d.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_5319ca3d.png'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Основные понятия планирования экспериментов. Методика планирования имитационных экспериментов с моделями.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Под экспериментом</b></font><font> будем понимать совокупность операций, совершаемых над объектом исследования с целью получения информации о его свойствах. Эксперимент, в котором исследователь по своему усмотрению может изменять условия его проведения, называется активным экспериментом. Если исследователь не может самостоятельно изменять условия его проведения, а лишь регистрирует их, то это пассивный эксперимент.</font></p> <p> <font><b>План эксперимента</b></font><font> – совокупность данных определяющих число, условия и порядок проведения опытов.</font></p> <p> <font><b>Планирование эксперимента</b></font><font> – выбор плана эксперимента, удовлетворяющего заданным требованиям, совокупность действий направленных на разработку стратегии экспериментирования (от получения априорной информации до получения работоспособной математической модели или определения оптимальных условий). Это целенаправленное управление экспериментом, реализуемое в условиях неполного знания механизма изучаемого явления.</font></p> <p> <font><b>Основная задача планирования машинных экспериментов </b></font><font>заключается в получении необходимой информации об исследуемой системе при ограниченных ресурсах (затраты машинного времени, памяти и т. п.). К числу частных задач, решаемых при планировании машинных экспериментов, относятся задачи уменьшения затрат машинного времени на моделирование, уменьшения погрешности результатов моделирования, проверки адекватности модели и т. п.</font> </p> <p> <font>Эффективность машинных экспериментов существенно зависит от выбора плана эксперимента, т. к. именно план определяет объём и порядок проведения вычислений на ЭВМ, приёмы накопления и статистической обработки результатов моделирования системы. Поэтому </font><font><b>основная задача планирования машинных экспериментов</b></font><font> с моделью формируется следующим образом: необходимо получить представление об объёме моделирования, заданном в виде моделирующего алгоритма (программы) при минимальных или ограниченных затратах машинных ресурсов на реализацию процесса моделирования.</font> </p> <p> <font>Таким образом, при машинном моделировании необходимо не только рационально планировать и проектировать саму модель системы, но и процесс её использования, т. е. проведения с ней эксперимента. При планировании машинных экспериментов возникает целый ряд проблем, взаимно связанных как с особенностью функционирования моделируемого объекта, так и с особенностью машинной реализации модели и обработки результатов эксперимента. В первую очередь к таким относятся проблемы построения плана машинного эксперимента, стохастической сходимости результатов, ограниченности машинных ресурсов, уменьшения дисперсии оценок, полученных на машинной модели и т. д.</font> </p> <p> <font><b>Рассмотрим основные понятия теории планирования эксперимента.</b></font><font> В планировании эксперимента различают входные (изогенные) и выходные (эндогенные) переменные: х</font><sub><font>1</font></sub><font>, х</font><sub><font>2</font></sub><font>,…, х</font><sub><font>к</font></sub><font>; y</font><sub><font>1</font></sub><font>, y</font><sub><font>2</font></sub><font>…, y</font><sub><font>e</font></sub><font>. Входные переменные в ТПЭ </font><font><b>называют факторами,</b></font><font> а выходные — </font><font><b>реакциями</b></font><font>. Каждый фактор x</font><sub><font>i</font></sub><font>, i=1,2,…,k может принимать в эксперименте одно или несколько значений, называемых уровнями. Фиксированный набор уровней факторов определяет одно из возможных состояний рассматриваемой системы. Одновременно этот набор представляет собой условия проведения одного из возможных экспериментов. Каждому фиксированному набору уровня факторов соответствует определённая точка в многомерном пространстве, называемая факторным пространством. Эксперименты не могут быть реализованы во всех точках факторного пространства, а лишь в принадлежащих допустимой области, как это например показано для случая двух факторов Х</font><sub><font>1</font></sub><font> и Х</font><sub><font>2</font></sub><font> на рисунке (см. ниже рисунок).</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m120a41c0.png'></p> <p> <font><b>Реакцию (отклик) системы</b></font><font> можно представить в виде зависимости: y</font><sub><font><i>l</i></font></sub><font>=Ψ</font><sub><font><i>l</i></font></sub><font>(x</font><sub><font>1</font></sub><font>, x</font><sub><font>2</font></sub><font>,…,x</font><sub><font>k</font></sub><font>); </font><font><i>l</i></font><font>=1…m. Функцию Ψ</font><sub><font><i>l</i></font></sub><font>, связанную с факторами, называют</font><font><b>функцией отклика</b></font><font>, а её геометрический образ – поверхностью отклика. Исследователю заранее не известен вид зависимостей Ψ</font><sub><font><i>l</i></font></sub><font>, </font><font><i>l</i></font><font> =1…m, поэтому используют приближение соотношения: <img src='/static/i_0067f68bc106c46b_html_m43673ea3.png'></font></p> <p> <font>Зависимость и Ψ</font><sub><font><i>l</i></font></sub><font> находятся по данным эксперимента. Последний необходимо поставить так, чтобы при минимальных затратах ресурсов (числе испытаний), варьируя выходные значения по специально сформулированным правилам, построить математическую модель системы и оценить её характеристики. Факторы при проведении эксперимента могут быть управляемыми и неуправляемыми, количественными или качественными, фиксированными и случайными. Фактор относится к изучаемым, если он включён в модель для изучения свойств системы. Количественными факторами являются интенсивности входящих потоков заявок, интенсивности потоков обслуживания, ёмкости накопителей, количество обслуживающих каналов и другие. Качественным факторам не соответствует числовая шкала (дисциплины постановки на очередь, обслуживание каналов и другие). Фактор является управляемым, если его уровни целенаправленно выбираются экспериментатором.</font> </p> <p> <font><b>При планировании</b></font><font> эксперимента обычно изменяются несколько факторов. Основными требованиями, предъявляемыми к факторам, являются независимость и совместимость. Совместимость означает, что все комбинации факторов осуществимы. Для выбора конкретной модели планирования эксперимента необходимо сформулировать такие её особенности, как адекватность, содержательность, простота. План эксперимента обычно используется для определения экстремальной характеристики объекта. Поэтому</font><font><b>планирование эксперимента называется экстремальным</b></font><font>. В планировании эксперимента наибольшее значение нашли модели в виде алгебраических полиномов.</font> </p> <p> <font>Предполагаем, что изучается влияние К количественных факторов х</font><sub><font>i</font></sub><font> на некоторую η в отведённый для экспериментирования локальной области факторного пространства ограниченного х</font><sub><font>imin</font></sub><font>—</font><font>x</font><sub><font>imax</font></sub><font>, </font><font>i</font><font>=1…</font><font>k</font><font>. </font> </p> <p> <font>Функцию отклика обычно выбирают линейной или квадратичной. </font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_cbe0fe8.png'></p> <p> <font>где <img src='/static/i_0067f68bc106c46b_html_2850451b.png'>= вектор с элементами <img src='/static/i_0067f68bc106c46b_html_73d3526f.png'>, входящими в исходный полином; <img src='/static/i_0067f68bc106c46b_html_m6d30b412.png'> - вектор коэффициентов. Для двух факторов имеем: f</font><sub><font>0</font></sub><font>=1, f</font><sub><font>1</font></sub><font>=x</font><sub><font>1</font></sub><font>, f</font><sub><font>2</font></sub><font>=</font><font>x</font><sub><font>2</font></sub><font>, </font><font>f</font><sub><font>12</font></sub><font>=</font><font>x</font><sub><font>1</font></sub><font>x</font><sub><font>2</font></sub><font>, </font><font>f</font><sub><font>11</font></sub><font>=</font><font>x</font><sub><font>1</font></sub><sup><font>2</font></sup><font>, </font><font>f</font><sub><font>22</font></sub><font>=</font><font>x</font><sub><font>2</font></sub><sup><font>2</font></sup><font>. <img src='/static/i_0067f68bc106c46b_html_m6d30b412.png'> = (</font><font>b</font><sub><font>0</font></sub><font>,b</font><sub><font>1</font></sub><font>,b</font><sub><font>2</font></sub><font>,b</font><sub><font>12</font></sub><font>,b</font><sub><font>11</font></sub><font>,b</font><sub><font>22</font></sub><font>). </font> </p> <p> <font>Так как полином (1) содержит d коэффициентов, то план эксперимента должен содержать N ≥d различных экспериментальных точек:</font></p> <p> <font>где x</font><sub><font>in</font></sub><font> - значение, которое принимает i- ая переменная в</font><font>n</font><font>-ом испытании. i=1…k,</font><font>n</font><font>=1...N. Матрица D называется планом эксперимента. Реализовав испытания в N точках области факторного пространства, определённом планом эксперимента, получим вектор наблюдений имеющий следующий вид:</font><img src='/static/i_0067f68bc106c46b_html_m2d8ca65a.png'></p> <p> <br> </p> <p> <img src='/static/i_0067f68bc106c46b_html_1730a234.png'><br> </p> <p> <font>где y</font><sub><font>n</font></sub><font> - реакция соответствующей</font><font>n</font><font>-ой точке плана.</font> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <font>Плану эксперимента поставим в соответствие матрицу планирования:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_2c3679b0.png'><br> </p> <p> <font>где f</font><sub><font><i>il</i></font></sub><font>, f</font><sub><font><i>ijl</i></font></sub><font> -координатные функции при соответствующих коэффициентах модели в</font><font><i>l</i></font><font>-ом эксперименте. Построению плана эксперимента предшествует проведение ряда неформализованных действий (принятия решения) направленных на выбор локальной области факторного пространства G.</font> </p> <p> <font>Необходимо учитывать, что как только модель сформирована включение дополнительных факторов для уточнения модели невозможно. Вначале следует выбрать границы x</font><sub><font>imin</font></sub><font> и x</font><sub><font>imax</font></sub><font> области определения факторов исходя из свойств объекта. Например, температура при термобарических экспериментах не может быть ниже абсолютного нуля и выше температуры плавления материала из которого изготовлена термобарокамера. </font> </p> <p> <font>После определения области G необходимо найти нулевые (основные) уровни факторов и интервалы варьирования Δ x</font><sub><font>i</font></sub><font>, i=1…k.</font> </p> <p> <font>Эксперимент, в котором реализуются все возможные сочетания уровней факторов,</font><font><b>называется полным факторным экспериментом (ПЭФ)</b></font><font>. Если выбранная модель включает только линейные члены полинома и их произведения, то для оценки коэффициентов модели используется ПЭ с варьированием всех k факторов на двух уровнях, т. е. q=2. Такие планы называются планы типа 2</font><sup><font>k</font></sup><font>, где n=2</font><sup><font>k</font></sup><font>- число всех возможных испытаний.</font> </p> <p> <font>Начальным этапом ПЭ для получения коэффициентов линейной модели основан на варьировании факторов на двух уровнях: нижнем x</font><sub><font>iн</font></sub><font> и верхнем x</font><sub><font>iв</font></sub><font>, симметрично расположенных относительно основного уровня x</font><sub><font>i0</font></sub><font>, i=1…k. Геометрическая интерпретация показана ниже на рисунке.</font><img src='/static/i_0067f68bc106c46b_html_m3668f705.png'></p> <p> <br> </p> <p> <font>Для упрощения записи условий каждого эксперимента факторы кодируют в виде безразмерных величин <img src='/static/i_0067f68bc106c46b_html_1c59e463.png'>. Средний уровень кодированного фактора является нулём 0, граничные значения соответственно +1 и -1.</font></p> <p> <br> </p> <p> <font>Применяя системный подход к проблеме планирования машинных экспериментов с моделями систем, можно выделить две составляющие планирования: </font><font><b>стратегическое и тактическое планирование.</b></font></p> <p> <font><b>Стратегическое планирование ставит своей целью</b></font><font> решение задачи получения необходимой информации о системе S с помощью модели Мм реализованной на ЭВМ, с учетом ограничений на ресурсы. По своей сути стратегическое планирование аналогично внешнему проектированию при создании системы S, только здесь в качестве объекта выступает процесс моделирования системы.</font></p> <p> <font>Применяя системный подход к проблеме стратегического планирования машинных экспериментов, </font><font><b>можно выделить следующие этапы:</b></font></p> <p> <font>1) построение структурной модели;</font></p> <p> <font>2) построение функциональной модели.</font></p> <p> <font><b>Структурная модель</b></font><font> плана эксперимента характеризуется числом факторов и числом уровней для каждого фактора. Число элементов эксперимента где k — число факторов эксперимента; q — число уровней i-го фактора, i=1, k. При этом под элементом понимается структурный блок эксперимента, определяемый как простейший эксперимент в случае одного фактора и одного уровня.</font></p> <p> <font><b>Функциональная модель</b></font><font> плана эксперимента определяет количество элементов структурной модели Nф, т. е. необходимое число различных информационных точек. При этом функциональная модель может быть полной и неполной. Функциональная модель называется полной, если в оценке реакции участвуют все элементы, т. е. Nф = Nс, и неполной, если число реакций меньше числа элементов, т. е. Nф<nс, Основная='' цель='' построения='' функциональной='' модели='' —='' нахождение='' компромисса='' между='' необходимыми='' действиями='' при='' машинном='' эксперименте='' (исходя='' из='' структурной='' модели)='' и='' ограниченными='' ресурсами='' на='' решение='' задачи='' методом='' моделирования.<='' font=''></nс,></font></p><font> <p> <font>Таким образом, использование при стратегическом планировании машинных экспериментов с Мм структурных и функциональных моделей плана позволяет решить вопрос о практической реализуемости модели на ЭВМ исходя из допустимых затрат ресурсов на моделирование системы S.</font></p> <p> <font><b>Тактическое планирование</b></font><font> представляет собой определение способа проведения каждой серии испытаний машинной модели Мм, предусмотренных планом эксперимента. Для тактического планирования также имеется аналогия с внутренним проектированием системы S, но опять в качестве объекта рассматривается процесс работы с моделью Мм.</font></p> <p> <font>Тактическое планирование машинного эксперимента связано прежде всего с решением следующих проблем.</font><font><b>Первая проблема</b></font><font> при проведении машинного эксперимента возникает вследствие искусственного характера процесса функционирования модели Мм, которая в отличие от реальной системы S работает эпизодически, т. е. только когда экспериментатор запускает машинную модель и проводит наблюдения. </font> </p> <p> <font><b>Решение второй проблемы</b></font><font> тактического планирования машинного эксперимента связано с оценкой точности и достоверности результатов моделирования (при конкретном методе реализации модели, например, методе статистического моделирования на ЭВМ) при заданном числе реализаций (объеме выборки) или с необходимостью оценки необходимого числа реализаций при заданных точности и достоверности результатов моделирования системы S.</font></p> <p> <font>В настоящее время существуют методы, позволяющие при заданном числе реализаций увеличить </font><font><b>точность оценок, полученных на машинной</b></font><font> модели Мм, и, наоборот, при заданной точности оценок сократить необходимое число реализаций при статистическом моделировании. Эти методы используют априорную информацию о структуре и поведении моделируемой системы S и называются методами уменьшения дисперсии. при подходе к уменьшению дисперсии задача состоит в специальном построении моделирующего алгоритма системы S, позволяющего получить положительную корреляцию, например, за счет управления генерацией случайных величин. Вопрос об эффективности использования метода уменьшения дисперсии может быть решен только с учетом необходимости дополнительных затрат машинных ресурсов (времени и памяти) на реализацию подхода, т. е. теоретическое уменьшение затрат машинного времени на моделирование вариантов системы (при той же точности результатов) должно быть проверено на сложность машинной реализации модели.</font></p> <p> <font><b>Последней из проблем</b></font><font>, возникающих при тактическом планировании имитационных экспериментов является выбор правил автоматической остановки имитационного эксперимента. Простейший способ решения проблемы — задание требуемого количества реализаций N (или длины интервала моделирования Т). Однако такой детерминированный подход неэффективен, так как в его основе лежат достаточно грубые предположения о распределении выходных переменных, которые на этапе тактического планирования являются неизвестными.</font> </p> <p> <font>Таким образом, чем сложнее машинная модель Мм, тем важнее этап тактического планирования машинного эксперимента, выполняемый непосредственно перед моделированием на ЭВМ системы S. Процесс планирования машинных экспериментов с моделью Мм итерационен, т. е. при уточнении некоторых свойств моделируемой системы S этапы стратегического и тактического планирования экспериментов могут чередоваться.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1><font>Дисциплина: Технология программирования</font></h1> </li></ol> </font>" ],
 ["Основные принципы объектно-ориентированного программирования: инкапсуляция, наследование и полиморфизм.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Хотя структурное программирование в свое время принесло выдающиеся результаты, чтобы написать еще более сложную программу, необходима иная более совершенная технология, которая и была сформулирована в начале 80-х Бьярном Страуструпом и была подхвачена многими разработчиками и получила название</font><font><b>объектно-ориентированное программирование</b></font><font>.</font></p> <p> <font><i><b>Объектно-ориентированное программирование</b></i></font><font><i><b> </b></i></font><font><i>-</i></font><font>это методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.</font></p> <p> <font><b>Принципы Объектно-ориентированного подхода:</b></font></p> <p> <font>1. Инкапсуляция с сокрытием данных - способность отличать внутреннее состояние объекта и поведение от его внешнего состояния и поведения</font></p> <p> <font>2. Принцип наследования. Классы могут быть организованы в иерархическую структуру с наследованием свойств. Дочерний класс наследует атрибуты родительского класса.</font></p> <p> <font>3. Принцип полиморфизма. Объекты реагируют на одно и тоже сообщение строго специфичным для них образом.</font></p> <p> <font><b>Инкапсуляция</b></font><font><b> </b></font><font>– это механизм, который объединяет данные и код, манипулирующий с этими данными, а также защищает и то, и другое от внешнего вмешательства или неправильного использования. Это техника отделяющая внутреннюю реализацию от внешнего поведения. В ООП код и данные могут быть объединены вместе (в так называемый «черный ящик») при создании объекта. Внутри объекта коды и данные могут быть закрытыми или открытыми. Закрытые коды или данные доступны только для других частей того же самого объекта и, соответственно, недоступны для тех частей программы, которые существуют вне объекта. Открытые коды и данные, напротив, доступны для всех частей программы, в том числе и для других частей того же самого объекта. Инкапсуляция автоматически подразумевает защиту данных. Для этого в структуре class используется спецификатор раздела </font><font><b>private</b></font><font>, содержащий данные и методы, доступные только для самого класса. Если данные и методы содержатся в разделе</font><font><b>public</b></font><font>, они доступны извне класса. Раздел </font><font><b>protected</b></font><font> содержит данные и методы, доступные из класса и любого его</font><font><i>производного класса</i></font><font>. Наличие последних позволяет говорить об иерархии классов, где есть классы - родители-шаблоны для создания классов - потомков. Объекты, полученные из описания класса, называют </font><font><i>экземплярами </i></font><font>этого класса.</font></p> <p> <font><b>Наследование.</b></font><font><b> </b></font><font>Новый, или производный класс может быть определен на основе уже имеющегося, или базового класса. При этом новый класс сохраняет все свойства старого: данные объекта базового класса включаются в данные объекта производного, а методы базового класса могут быть вызваны для объекта производного класса, причем они будут выполняться над данными включенного в него объекта базового класса. Иначе говоря, новый класс наследует как данные старого класса, так и методы их обработки. Если объект наследует свои свойства от одного родителя, то говорят об одиночном наследовании. Если же объект наследует данные и методы от нескольких базовых классов, то говорят о множественном наследовании. Простой пример наследования – определение структуры, отдельный член которой является ранее определенной структурой.</font></p> <p> <font><b>Полиморфизм</b></font><font><b> </b></font><font>– это свойство, которое позволяет один и тот же идентификатор (одно и то же имя) использовать для решения двух и более схожих, но технически разных задач. Целью полиморфизма, применительно к ООП, является использование одного имени для задания действий, общих для ряда классов объектов. Такой полиморфизм основывается на возможности включения в данные объекта также и информации о методах их обработки (в виде указателей на функции). Принципиально важно, что такой объект становится «самодостаточным». Будучи доступным в некоторой точке программы, даже при отсутствии полной информации о его типе, он всегда может корректно вызвать свойственные ему методы. Таким образом, полиморфная функция – это семейство функций с одним и тем же именем, но выполняющие различные действия в зависимости от условий вызова.</font></p> <p> <font>Полиморфный метод в Си++ называется</font><font><i>виртуальной функцией</i></font><font>, позволяющей получать ответы на сообщения, адресованные объектам, точный вид которых неизвестен. Такая возможность является результатом</font><font><i>позднего связывания</i></font><font>. При позднем связывании адреса определяются динамически во время выполнения программы, а не статически во время компиляции, как в традиционных компилируемых языках, в которых применяется</font><font><i>раннее связывание</i></font><font>. Сам процесс связывания заключается в замене виртуальных функций на адреса памяти. Виртуальные функции определяются в родительском классе, а в производных классах происходит их доопределение и для них создаются новые реализации. При работе с виртуальными функциями сообщения передаются как указатели, которые указывают на объект вместо прямой передачи объекту. Виртуальные функции используют таблицу для адресной информации, которая инициализируется при выполнения при помощи конструктора.</font></p> " ],
 ["Перегрузка бинарных и унарных операций.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Для перегрузки</b></font><font> встроенных операторов С++ можно использовать ключевое слово</font><font><b>operator. </b></font><font>Ему может быть присвоен ряд значений, зависящих от параметров. Таким образом, оператору типа + можно присвоить дополнительные значения. Это облегчает написание программ и делает их более читабельными.</font></p> <p> <font><b>vect</b></font><font><b> </b></font><font><b>oprator</b></font><font><b> *(</b></font><font><b>const</b></font><font><b> </b></font><font><b>vect</b></font><font><b> &amp;,</b></font><font><b>const</b></font><font><b> </b></font><font><b>matix</b></font><font><b> &amp;)</b></font></p> <p> <font>где * является двухместным оператором умножения.</font></p> <p> <font><b>matix t; vect s,r; s=t*r; // s=mpy(r,t);</b></font></p> <p> <font>Перегруженный оператор можно вызвать и использованием функциональной формы записи:</font></p> <p> <font><b>s</b></font><font><b>=</b></font><font><b>operator</b></font><font><b>*(</b></font><font><b>t</b></font><font><b>,</b></font><font><b>r</b></font><font><b>);</b></font></p> <p> <font>Хотя операторам и могут добавляться новые значения, но их приоритет остается прежним. Например, операция умножения имеет более высокий приоритет, чем сложение. Перегружены могут все операторы. Нельзя использовать аргументы по умолчанию. Доступны все арифметические, логические операторы, операторы сравнения, равенство, присвоение, операторы поразрядных операций, префиксные и постфиксные формы операторов приращения и декремента. могут быть перегружены операторы индексации“[]” и обращения к функции “()”. Также могут быть перегружены оператор указателя класса “-&gt;“ и оператор указателя на член “-&gt;*”. Возможна перегрузка</font><font><b>new, delete.</b></font></p> <p> <font><i><b>Перегрузка унарного оператора</b></i></font></p> <p> <font><font>Любая унарная операция</font></font><font><font><b>@</b></font></font><font><font> может быть определена двумя способами: либо как компонентная функция без параметров, либо как глобальная (возможно дружественная) функция с одним параметром. В первом случае выражение</font></font><font><font><b>@ Z</b></font></font><font><font> означает вызов</font></font><font><font><b>Z.operator @()</b></font></font><font><font>, во втором - вызов operator</font></font><font><font><b>@(Z)</b></font></font><font><font>.</font></font></p> <p> <font><font>Унарные операции, перегружаемые в рамках определенного класса, могут перегружаться только через нестатическую компонентную функцию без параметров. Вызываемый объект класса автоматически воспринимается как операнд.</font></font></p> <p> <font>Одноместные операторы типа “!”, “++”, “~” “[]”.</font></p> <p> <font><b>classclock</b></font></p> <p> <font><b>{ unsigned long sec;</b></font></p> <p> <font><b>public:</b></font></p> <p> <font><b>clock(unsigned long s):sec(s) { }</b></font></p> <p> <font><b>void tick() { sec++; }</b></font></p> <p> <font><b>clock operator++() { tick(); return *this; } };</b></font></p> <p> <font><b>void main() { clock t(100); ++t; }</b></font></p> <p> <font>Этот класс перегружает префиксный оператор приращения ++. Перегруженный оператор представляет собой функцию-член. Перегруженный </font><font><b>operator ++()</b></font><font>также обновляет неявную переменную</font><font><b>clock </b></font><font>и возвращает обновленное значение. Префиксную операцию ++ можно перегрузить, используя </font><font><b>friend</b></font><font>-функцию: </font><font><b>friend</b></font><font><b> </b></font><font><b>clock</b></font><font><b> </b></font><font><b>operator</b></font><font><b> ++(</b></font><font><b>clock</b></font><font><b>&amp;</b></font><font><b>s</b></font><font><b>1) {</b></font><font><b>s</b></font><font><b>1.</b></font><font><b>tick</b></font><font><b>(); </b></font><font><b>returns</b></font><font><b>1; }</b></font></p> <p> <font>Так как переменная </font><font><b>clock</b></font><font>должна увеличиваться, если мы передаем ее по ссылке. Решение о выборе между представлением friend и функцией-членом обычно зависит от того, насколько необходимы и доступны операторы неявного преобразования. Явная передача аргумента, как в friend-функции, позволяет автоматическое его приведение. Операции инкремента и декремента могут быть перегружены как для префиксной, так и для постфиксной формы записи.</font></p> <p> <font>Префиксная форма объявляется как операция-член класса, которая не имеет аргументов, либо как дружественная операция, которая имеет один аргумент, представляющий собой ссылку на объект данного класса.</font></p> <p> <font>Постфиксная форма объявляется как операция-член класса, которая имеет один аргумент типа int, либо как дружественная операция, которая имеет два аргумента: ссылку на объект данного класса и аргумент типа int. Аргумент типа int на самом деле не используется. Фактически он имеет нулевое значение.</font></p> <p> <font><b>class X { public:</b></font></p> <p> <font><b>X &amp; operator ++(); //</b></font><font><b>Префиксная</b></font><font><b> </b></font><font><b>форма</b></font></p> <p> <font><b>X &amp; operator ++(int); //</b></font><font><b>Постфиксная</b></font><font><b> </b></font><font><b>форма</b></font><font><b> };</b></font></p> <p> <font><b>class Y { public:</b></font></p> <p> <font><b>friend Y &amp; operator ++(Y &amp;); //</b></font><font><b>Префиксная</b></font><font><b> </b></font><font><b>форма</b></font></p> <p> <font><b>friend Y &amp; operator ++(Y &amp;,int); //</b></font><font><b>Постфиксная</b></font><font><b> </b></font><font><b>форма</b></font><font><b> };</b></font></p> <p> <font>@x интерпретируется как x.opertor@(), если operator @ - функция-член и operator@(x),</font></p> <p> <font>если operator @ - дружественная функция.</font></p> <p> <font><i><b>Перегрузка бинарного оператора</b></i></font></p> <p> <font>Если бинарный оператор перегружается с помощью функции-члена, то в качестве своего первого аргумента он получает неявно переданную переменную класса, а второго - единственный из списка аргументов. При объявлении</font><font><b>friend</b></font><font>-функции или обычной функции в списке параметров определяют оба аргумента.</font></p> <p> <font><b>class clock { friend clock operator+(const clock &amp;c1,const clock &amp;c2); };</b></font></p> <p> <font><b>clock operator+(const clock &amp;c1,const clock &amp;c2) {</b></font></p> <p> <font><b>clock temp(c1.sec+c2.sec); return temp; }</b></font></p> <p> <font>Оба параметра явно определяются и являются кандидатами для преобразования назначением. Используя это определение имеем:</font></p> <p> <font><b>int i=5; clock c(100);</b></font></p> <p> <font><b>c+i; // допустимо: i - преобразуется в clock</b></font></p> <p> <font><b>i+c; // допустимо: i - преобразуется в clock</b></font></p> <p> <font><b>В противоположность этому, перегрузим двухместный - функцией-членом.</b></font></p> <p> <font><b>class clock { clock operator -(const clock &amp;c) { clock temp(sec-c.sec); return temp; } };</b></font></p> <p> <font>Существует первый неявный аргумент. В него попадает некоторый используемый параметр. Это может вызвать асимметричное поведение двухместных операторов.</font></p> <p> <font><b>int</b></font><font><b> </b></font><font><b>i</b></font><font><b>=5; </b></font><font><b>clock</b></font><font><b> </b></font><font><b>c</b></font><font><b>(100);</b></font></p> <p> <font><b>c</b></font><font><b>-</b></font><font><b>i</b></font><font><b>; // допустимо</b></font><font><b>i</b></font><font><b> преобразуется в</b></font><font><b>clock</b></font><font><b>; </b></font><font><b>c</b></font><font><b>.</b></font><font><b>operator</b></font><font><b>-(</b></font><font><b>i</b></font><font><b>)</b></font></p> <p> <font><b>i-c; // недопустимо i не относится к типу clock; i.operator-(c)</b></font></p> <p> <font><b>Определим операцию умножения: long и clock</b></font></p> <p> <font><b>clock operator *(long m, const clock &amp;c) {</b></font></p> <p> <font><b>clock temp(m*c.sec); return temp;</b></font></p> <p> <font>Такая реализация вынуждает операцию умножения иметь фиксированный порядок выполнения, зависящий от типа. Для избежания этого обычно пишется второй перегруженный функциональный оператор.</font></p> <p> <font><b>clockoperator</b></font><font><b> *(</b></font><font><b>constclock</b></font><font><b>&amp;</b></font><font><b>c</b></font><font><b>,</b></font><font><b>longm</b></font><font><b>) {</b></font></p> <p> <font><b>clock temp(m*c.sec); return temp; }</b></font></p> <p> <font>y@x интерпретируется как y.opertor@(x), если operator @ - функция-член и operator@(y,x),</font></p> <p> <font>если operator @ - дружественная функция.</font></p> <p> <br> </p> " ],
 ["Конструктор без параметров (по умолчанию). Деструкторы и очистка.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Конструктор без параметров (по умолчанию).</b></font><font><b> </b></font> </p> <p> <font><font>Один из способов сократить число родственных функций – использовать</font></font><font><font></font></font><font><font><i>параметры по умолчанию</i></font></font><font><font>.</font></font><font><font></font></font></p> <p> <font><font>Когда используется значение параметра, указывающее 'брать по умолчанию', выбранное значение должно лежать вне множества возможных значений параметра.</font></font><font><font></font></font></p> <p> <font><font>Объект класса без конструкторов можно инициализировать путем присваивания ему другого объекта этого класса. Это можно делать и тогда, когда конструкторы описаны. Например:</font></font></p> <p> <font><font>date d = today; // инициализация посредством присваивания</font></font><font><font><br></font></font><font>Размножение конструкторов в примере с date типично. При разработке класса всегда есть соблазн обеспечить 'все', поскольку кажется проще обеспечить какое-нибудь средство просто на случай, что оно кому-то понадобится или потому, что оно изящно выглядит, чем решить, что же нужно на самом деле. Последнее требует больших размышлений, но обычно приводит к программам, которые меньше по размеру и более понятны. Один из способов сократить число родственных функций - использовать</font><font><i>параметры по умолчанию</i></font><font>. В случае date для каждого параметра можно задать значение по умолчанию, интерпретируемое как 'по умолчанию принимать: today' (сегодня).</font></p> <p> <font><b>class date { int month, day, year;</b></font></p> <p> <font><b>public:</b></font></p> <p> <font><b>// ...</b></font></p> <p> <font><b>date(int d =0, int m =0, int y =0);</b></font></p> <p> <font><b>date(char*); // дата в строковом представлении</b></font></p> <p> <font><b>};</b></font></p> <p> <font><b>date::date(int d, int m, int y) {</b></font></p> <p> <font><b>day = d ? d : today.day;</b></font></p> <p> <font><b>month = m ? m : today.month;</b></font></p> <p> <font><b>year = y ? y : today.year;</b></font></p> <p> <font><b>// проверка, что дата допустимая</b></font></p> <p> <font><b>// ...</b></font><font>}</font></p> <p> <font>Когда используется значение параметра, указывающее 'брать по умолчанию', выбранное значение должно лежать вне множества возможных значений параметра. Для дня day и месяца month ясно, что это так, но для года year выбор нуля неочевиден. К счастью, в европейском календаре нет нулевого года . Сразу после 1 г. до н.э. (year=-1)идет 1 г. н.э. (year=1).</font></p> <p> <font>Объект класса без конструкторов можно инициализировать путем присваивания ему другого объекта этого класса. Это можно делать и тогда, когда конструкторы описаны. Например:</font></p> <p> <font><b>date d = today; // инициализация посредством присваивания</b></font></p> <p> <font>По существу, имеется конструктор по умолчанию, определенный как побитовая копия объекта того же класса. Если для класса X такой конструктор по умолчанию нежелателен, его можно переопределить конструктором с именем X(X&amp;).</font></p> <p> <font><b>Деструкторы и очистка.</b></font><font><b> </b></font><font>Определяемый пользователем тип чаще имеет, чем не имеет, конструктор, который обеспечивает надлежащую инициализацию. Для многих типов также требуется обратное действие, деструктор, чтобы обеспечить соответствующую очистку объектов этого типа. Имя деструктора для класса X есть ~X()('дополнение конструктора'). В частности, многие типы используют некоторый объем памяти из свободной памяти, который выделяется конструктором и освобождается деструктором. Заметим, что в Си++ для этого используются операторы new и delete.</font></p> <p> <font>Пример конструктора и деструктора объекта date:</font></p> <p> <font><b>class date { int *day, *month, *year</b></font></p> <p> <font><b>public:</b></font></p> <p> <font><b>date(int d, int m, int y) {</b></font></p> <p> <font><b>day=new int;</b></font></p> <p> <font><b>month=new int;</b></font></p> <p> <font><b>year=new int;</b></font></p> <p> <font><b>*day= d ?d : 1;</b></font></p> <p> <font><b>*month = m ?m : 1;</b></font></p> <p> <font><b>*year = y ?y : 1; }</b></font></p> <p> <font><b>...</b></font></p> <p> <font><b>~date()</b></font></p> <p> <font><b>{ delete day;</b></font></p> <p> <font><b>delete month;</b></font></p> <p> <font><b>delete year;</b></font><font><b> } };</b></font></p> <p> <br> </p> " ],
 ["Наследование классов и производные классы. Конструкторы, деструкторы и наследование.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Наследование классов и производные классы.</b></font><font><b> </b></font> </p> <p> <font><b>Наследование</b></font><font> — это механизм создания нового класса на основе уже существующего. При этом к существующему классу могут быть добавлены новые элементы (данные и функции), либо существующие функции могут быть изменены.</font><font><b>Основное назначение механизма наследования</b></font><font> - повторное использование кодов, так как большинство полезных типов данных являются вариантами друг друга, и писать для каждого свой класс нецелесообразно. Объекты разных классов и сами классы могут находиться в отношении наследования, при котором формируется иерархия объектов, соответствующая заранее предусмотренной иерархии классов.</font></p> <p> <font><b>Иерархия классов</b></font><font> позволяет определять новые классы на основе уже имеющихся. Имеющиеся классы обычно называют</font><font><i><b>базовыми </b></i></font><font><b>(иногда </b></font><font><i><b>порождающими</b></i></font><font>), а новые классы, формируемые на основе базовых, –</font><font><i><b>производными </b></i></font><font><b>(</b></font><font><i><b>порожденными</b></i></font><font><b>, </b></font><font><i><b>классами-потомками </b></i></font><font><b>или </b></font><font><i><b>наследниками</b></i></font><font>). Производные классы «получают наследство» – данные и методы своих базовых классов, и, кроме того, могут пополняться собственными компонентами (данными и собственными методами). Наследуемые компоненты не перемещаются в производный класс, а остаются в базовых классах. Сообщение, обработку которого не могут выполнить методы производного класса, автоматически передается в базовый класс. Если для обработки сообщения нужны данные, отсутствующие в производном классе, то их пытаются отыскать автоматически и незаметно для программиста в базовом классе.</font></p> <p> <font>При наследовании некоторые имена методов (функций-членов) и (или) данных - членов базового класса могут быть по-новому определены в производном классе. В этом случае соответствующие компоненты базового класса становятся недоступными из производного класса. Для доступа из производного класса к компонентам базового класса, имена которых повторно определены в производном, используется операция разрешения контекста ‘::’.</font></p> <p> <font><font>Допускается множественное наследование – возможность для некоторого класса наследовать компоненты нескольких никак не связанных между собой базовых классов. В иерархии классов соглашение относительно доступности компонентов класса следующие:</font></font></p> <p> <font><font><b>private</b></font></font><font><font></font></font><font><font>– Член класса может использоваться только функциями-членами данного класса и функциями-'друзьями' своего класса. В производном классе он недоступен.</font></font></p> <p> <font><font><b>protected</b></font></font><font><font></font></font><font><font>– То же, что и</font></font><font><font></font></font><font><font><b>private</b></font></font><font><font>, но дополнительно член класса с данным атрибутом доступа может использоваться функциями-членами и функциями-'друзьями' классов, производных от данного.</font></font></p> <p> <font><font><b>public</b></font></font><font><font></font></font><font><font>– Член класса может использоваться любой функцией, которая является членом данного или производного класса, а также к</font></font><font><font></font></font><font><font><b>public</b></font></font><font><font></font></font><font><font>-членам возможен доступ извне через имя объекта.</font></font></p> <p> <font><font>Синтаксис определение производного класса:</font></font></p> <p><font><font><font><font><font><b>class имя_класса : список_базовых_классов</b></font></font></font></font></font></p> <p><font><font><font><font><font><b>{список_компонентов_класса};</b></font></font></font></font></font></p> <p><font><font><font><font><font>В производном классе унаследованные компоненты получают статус доступа</font></font></font><font><font><font></font></font></font><font><font><font><b>private</b></font></font></font><font><font><font>, если новый класс определен с помощью ключевого слова</font></font></font><font><font><font></font></font></font><font><font><font><b>class</b></font></font></font><font><font><font>, и статус</font></font></font><font><font><font></font></font></font><font><font><font><b>public</b></font></font></font><font><font><font>, если с помощью</font></font></font><font><font><font></font></font></font><font><font><font><b>struct</b></font></font></font><font><font><font>.</font></font></font></font></font></p> <p> <font><b>Конструкторы и деструкторы.</b></font><font><b> </b></font><font>Базовый класс, производный класс или оба могут иметь конструкторы и/или деструкторы. Если и у базового и у производного классов есть конструкторы и деструкторы, то конструкторы выполняются в порядке наследования, а деструкторы – в обратном порядке. То есть если А – базовый класс, В – производный из А, а С – производный из В (А-В-С), то при создании объекта класса С вызов конструкторов будет иметь следующий порядок: конструктор класса А – конструктор класса В – конструктор класса С. Вызов деструкторов при разрушении этого объекта произойдет в обратном порядке: деструктор класса С – деструктор класса В – деструктор класса А.</font></p> <p> <a href='http://www.wildberries.ru/catalog/603780/detail.aspx'><font><font><b>Конструктор</b></font></font></a><font><font><b></b></font></font><font><font><b>базового класса</b></font></font><font><font> вызывается автоматически и выполняется до конструктора производного класса. Конструктор производного класса вызывается по окончании работы конструкторов базовых классов. Параметры конструктора базового класса указываются в определении конструктора производного класса. Таким образом происходит передача аргументов от конструктора производного класса конструктору базового класса.</font></font></p> <p> <font>Понять закономерность такого порядка не сложно, поскольку базовый класс 'не знает' о существовании производного класса, любая инициализация выполняется в нем независимо от производного класса, и, возможно, становится основой для инициализации, выполняемой в производном классе. С другой стороны, поскольку базовый класс лежит в основе производного, вызов деструктора базового класса раньше деструктора производного класса привел бы к преждевременному разрушению производного класса.</font></p> <p> <font><b>Конструкторы могут иметь параметры</b></font><font>. При реализации наследования допускается передача параметров для конструкторов производного и базового класса. Если параметрами обладает только конструктор производного класса, то аргументы передаются обычным способом. Однако при необходимости передать аргумент конструктору родительского класса, требуется несколько большее усилие. Прежде всего, нужно позаботится о том, чтобы передать из конструктора производного класса конструктору базового класса. Для этого используется расширенная запись конструктора производного класса.</font></p> <p> <font><b>конструктор_производного_класса (список_формальных_параметров)</b></font></p> <p> <font><b>: конструктор_базового_класса (список фактических параметров)</b></font></p> <p> <font><b>{ // тело конструктора производного класса }</b></font></p> <p> <font>Для базового и производного классов допустимо использование одних и тех же параметров. Не исключена возможность и того, что списки параметров конструкторов производного и базового классов будут различны. Кроме того, конструктору производного класса нет необходимости использовать все аргументы, полученные для передачи в базовый класс, т.е. конструктор производного класса может принять некоторые аргументы только для того, чтобы просто передать их конструктору базового класса, а сам может их никак не использовать.</font></p> <p> <font>В расширенной форме объявления конструктора производного класса описывается вызов (!!!) конструктора базового класса.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Абстрактные классы и чистые виртуальные функции.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Абстрактным классом</b></font><font> называется класс, в котором есть хотя бы одна чистая (пустая) виртуальная функция.</font></p> <p> <font><i><b>Чистая виртуальная функция</b></i></font><font><i> — это функция-член класса, тело которой не определено.</i></font></p> <p> <font><b>virtual тип имя_функции (список_формальных_параметров) = 0;</b></font></p> <p> <font>В этой записи конструкция «= 0» называется «чистый спецификатор». Пример описания чистой виртуальной функции:</font></p> <p> <font><b>virtual void fpure (void) = 0;</b></font></p> <p> <font><b>Чистая виртуальная функция «ничего не делает</b></font><font>» и недоступна для вызовов. Ее назначение - служить основой для подменяющих ее функций в производных классах. Исходя из этого становится понятной невозможность создания самостоятельных объектов абстрактного класса. Абстрактный класс может использоваться только в качестве базового для производных классов. При создании объектов такого производного класса в качестве подобъектов создаются объекты базового абстрактного класса. Пример</font><font> </font><font>абстрактного</font><font> </font><font>класса</font><font>:</font></p> <p> <font><b>class B { protected:</b></font></p> <p> <font><b>virtual void f (int) = 0;</b></font></p> <p> <font><b>void</b></font><font><b> </b></font><font><b>s</b></font><font><b>(</b></font><font><b>int</b></font><font><b>); };</b></font></p> <p> <font>На основе класса в можно по-разному построить производные классы:</font></p> <p> <font><b>class D: public B {</b></font></p> <p> <font><b>. . .</b></font></p> <p><font><b>void f (int); };</b></font></p> <p> <font><b>class E: public B { void s (int); };</b></font></p> <p> <font>Здесь B - абстрактный, D - нет, поскольку f - переопределена, а s -наследуется, E - абстрактный, так как s - переопределена, а f - наследуется.</font></p> <p> <font>В классе</font><font><b>D</b></font><font> чистая виртуальная функция</font><font><b>func()</b></font><font> заменена конкретной виртуальной функцией того же типа. Функция</font><font><b> B::sos()</b></font><font> наследуется классом</font><font><b>D</b></font><font> и доступна в нем и в его методах. Класс</font><font><b> D</b></font><font> не абстрактный</font></p> <p> <font>В классе</font><font><b>E</b></font><font> переопределена функция</font><font><b>B::sos() </b></font><font>, а виртуальная функция</font><font><b> B::func()</b></font><font> унаследована. Тем самым класс</font><font><b>E</b></font><font> становится абстрактным и может использоваться только как базовый</font></p> <p> <font>Чистая виртуальные функции используются для того, чтобы отложить решение задачи о реализации функции на более поздний срок. В терминологии ООП это называется </font><font><i><b>отсроченным методом</b></i></font><font><b>.</b></font><font> </font> </p> <p> <font>Как всякий класс, абстрактный класс может иметь явно определенный конструктор. Из конструктора возможен вызов методов класса, но любые прямые или опосредованные обращения из конструктора к чистым виртуальным функциям приведут к ошибкам вовремя выполнения программы.</font></p> <p> <font><font>Чистые виртуальные функции наследуются и остаются чистыми виртуальными функциями, таким образом, производный класс, в котором чистая виртуальная функция не переопределена, остаётся абстрактным классом.</font></font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Обработка ошибок в стандартном С. Использование assert, кодов возврата, сигналов, setjmp и longjmp. Использование matherr() и set_new_handler().", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Еще в стандартном Си (ANSI C) имелись средства обнаружения и перехвата различных ошибок, возникающих в процессе выполнения программы, а также других исключительных ситуаций, не приводящих к завершению программы, но не позволяющих ей функционировать должным образом. К таким ситуациям относятся выходы значений переменных из допустимых диапазонов, ошибки в математических операциях и функциях, невозможность выделения требуемого объема динамической памяти. Ошибки, возникшие в процессе выполнения программы, связаны с неверной логикой ее функционирования и не могут быть выявлены на этапах компиляции и линковки, а их возникновение приводит к прекращению работы программы без указания конкретного места возникновения ошибки.</font></p> <p> <font><b>Использование assert.</b></font><font><b></b></font><font>Для выявления таких ошибок служит функция </font><font><b>assert</b></font><font>. Ее прототип находится в файле</font><font><b>assert.h </b></font><font>и имеет вид: </font><font><b>void assert (expression);</b></font></p> <p> <font>Функция печатает диагностическое сообщение и вызывает функцию</font><font><b>abort</b></font><font>, если выражение</font><font><b>expression </b></font><font>ложно (равно 0). Диагностическое сообщение имеет вид: </font><font><b>Assertion</b></font><font><b> </b></font><font><b>failed</b></font><font><b>: </b></font><font><b>expression</b></font><font><b>, </b></font><font><b>file</b></font><font><b> </b></font><font><b>filename</b></font><font><b>, </b></font><font><b>line</b></font><font><b> </b></font><font><b>linenumber</b></font><font>, где</font><font><b>filename</b></font><font>- имя файла-источника ошибки,</font><font><b>linenumber </b></font><font>- номер строки, в которой произошла ошибка. Если же если выражение</font><font><b>expression </b></font><font>истинно (равно 1), то никаких действий не предпринимается. Выражение должно быть записано так, чтобы быть истинным только когда программа работает нормально.</font></p> <p> <font>После того, как программа отлажена и вызов функции </font><font><b>assert</b></font><font>больше не нужен, можно использовать идентификатор </font><font><b>NDEBUG</b></font><font>для предотвращения вызовов</font><font><b>assert </b></font><font>из программы. Если</font><font><b>NDEBUG </b></font><font>определен (с любым значением) с помощью директивы #</font><font><b>define</b></font><font>, препроцессор удаляет все вызовы</font><font><b>assert </b></font><font>функции из исходного текста программы.</font></p> <p> <font><b>Сигналы.</b></font><font><b> </b></font><font>Используемая функцией</font><font>assert</font><font><b> </b></font><font>функция</font><font><b>abort </b></font><font>печатает сообщение в стандартный поток ошибок (stderr), затем вызывает функцию raise (SIGABRT). Действие, предпринимаемое в ответ на сигнал SIGABRT, зависит от того, какое действие было определено для этого сигнала при предыдущем вызове функции signal. По умолчанию SIGABRT завершает вызвавший его процесс с кодом завершения 3 и передает управление родительскому процессу (вызвавшему текущий) или операционной системе. Функция abort не очищает буферизованные потоки и не выполняет других функций, предусмотренных при выходе (типа закрытия файлов). Для использования этой функциинеобходимо включить в программу файлы process.h или stdlib.h. Прототип функции имеет вид:</font></p> <p> <font><b>void abort(void);</b></font></p> <p> <font>Функция</font><font><b>signal </b></font><font>позволяет процессу выбрать один из нескольких способов управления сигналом прерывания от операционной системы. Для ее использования необходим файл</font><font><b>signal.h</b></font><font>, а прототип имеет вид:</font></p> <p> <font><b>void (*signal(int sig, void(*func)(int sig [,subcode])))(int sig);</b></font></p> <p> <font><b>sig: SIGABRT SIGILL SIGSEGV SIGFPE SIGINT SIGTERM</b></font></p> <p> <font>Функция возвращает предыдущее значение func , если она завершилась успешно, или SIG_ERR- если нет. Аргумент должен быть одной из ранее перечисленных констант, определенных в файле signal.h. Здесь SIGABRT - аварийное завершение программы, SIGFPE - неверная операция с плавающей запятой, типа деления на 0,SIGILL - неправильная (illegal) операция, SIGINT - прерывание по Ctrl+C, SIGSEGV- неправильный доступ к сегменту данных, SIGTERM - запрос на завершение программы.</font></p> <p> <font>Действие, предпринимаемое при получении сигнала прерывания, зависит от значения func. Аргумент func должен быть либо адресом функции или одной из объявленных констант, описанных ниже и определенных в файле signal.h:</font></p> <table>  <colgroup><col>  <col>  </colgroup><tbody><tr>  <td>  <p><b>Значение</b></p>  </td>  <td>  <p><b>Описание</b></p>  </td>  </tr>  <tr>  <td>  <p><b>SIG_IGN</b></p>  </td>  <td>  <p>Игнорирует сигнал прерывания. Это значение не должно быть использовано для SIGFPE, поскольку состояние процесса с плавающей запятой слева неопределено.</p>  </td>  </tr>  <tr>  <td>  <p><b>SIG_DFL</b></p>  </td>  <td>  <p>Завершает программу</p>  </td>  </tr>  <tr>  <td>  <p><b>SIG_ERR</b></p>  </td>  <td>  <p>Указывает, что функция singal вернула ошибку</p>  </td>  </tr>  <tr>  <td>  <p><b>Адрес функции</b></p>  </td>  <td>  <p>Устанавливает указанную функцию в качестве управляющей для данного сигнала</p>  </td>  </tr> </tbody></table> <p> <font>Для сигнала SIGFPE функция с адресом func передает два аргумента: сам SIGFPE и целое число - код ошибки FPE_xxx, и затем происходит выполнение функции. Значение не сбрасывается, пока не будет получен сигнал.</font> </p> <p> <font><b>setjmp и longjmp.</b></font><font><b> </b></font><font>Функция setjmp описана в файле setjmp.h и имеет прототип:</font></p> <p> <font><b>int setjmp(jmp_buf env);</b></font></p> <p> <font>Функция возвращает 0 или значение аргумента функции longjmp, если возвращается после вызова этой функции, или 1, если значение аргумента функции longjmp было равно 0.</font></p> <p> <font>Функция setjmp сохраняет содержимое стека, которое затем может быть последовательно восстановлено с помощью функции longjmp. Использованные совместно, функции setjmp и longjmp обеспечивают способ выполнения нелокального goto. Они обычно используются для передачи управления выполнением программы в блок обработки ошибок или восстановления ранее вызванной программы без использования обычного вызова или соглашений о возврате параметров.</font></p> <p> <font>Вызов функции setjmp вызывает сохранение текущего содержимого стека в переменной окружения env. Последующий вызов функции longjmp восстанавливает сохраненное содержимое стека и вернет управление в точку, следующую сразу за вызовом соответствующей функции setjmp. Все переменные (исключая регистровые), доступные в функции, получившей управление, содержат значения, которые они имели в момент вызова longjmp. Значения регистровых переменных не определены.</font></p> <p> <font><b>Функция longjmp,</b></font><font> описание которой находится в файле setjmp.h, имеет прототип:</font></p> <p> <font><b>void longjmp(jmp_buf env, int value);</b></font></p> <p> <font>Функция longjmp восстанавливает содержимое стека и локальные переменные, ранее сохраненные в env с помощью setjmp. Функции setjmp и longjmp обеспечивают способ выполнения нелокального goto и обычно используются для передачи управления выполнением программы в блок обработки ошибок или восстановления ранее вызванной программы без использования обычного вызова или соглашений о возврате параметров.</font></p> <p> <font>Значение, возвращаемое функцией longjmp, должно быть ненулевым. Если значение передается как 0, то вместо него при возврате подставляется 1.</font></p> <p> <font>Значения регистровых переменных в функции, вызвавшей setjmp, могут быть не восстановлены после выполнения longjmp. Не используйте longjmp для передачи управления из одного оверлея в другой. Также не используйте longjmp для передачи управления из функции обработки прерывания.</font></p> <p> <font><b>Обработка математических ошибок.</b></font><font> Значительная часть ошибок в программе возникает при выполнении математических операций и вызове математических функций. Для управления такими ошибками служат функции matherr и _matherrl, определение которых содержится в файле math.h - модифицируемые пользователем функции управления математическими ошибками. Прототипы</font><font> </font><font>этих</font><font> </font><font>функций</font><font> </font><font>имею</font><font> </font><font>твид</font><font>:</font></p> <p> <font><b>int matherr(struct exception *e);</b></font></p> <p> <font><b>int _matherrl(struct _exceptionl *(e));</b></font></p> <p> <font>Заметим, что matherr вызывается, когда ошибка генерируется математической библиотекой, а _matherrl - когда ошибка генерируется математическими функциями, возвращающими значения типа long double.</font></p> <p> <font>Возвращаемое значение по умолчанию при ошибках underflow или tloss равно 1, в противном случае оно равно 0.</font></p> <p> <font>Когда функция matherr (или_matherrl) возвращает 0, (указывая, что она не в состоянии исправить ошибку), она устанавливает errno равным 0 и печатает сообщение о б ошибке. Когда функция (та или иная) возвращает не ноль (указывая, что она способна исправить ошибку), errno не устанавливается и сообщение об ошибке не печатается. Обе эти функции могут модифицировать e -&gt; retval, который возвращается в вызывающую программу.</font></p> <p> <font><b>Обработка ошибок с динамической памятью.</b></font><font><b> </b></font><font>При выделении динамической памяти часто возникают ситуации с ее нехваткой. Для разрешения подобных ситуаций служит функция set_new_handler, описанная в файле new.h и устанавливающая функцию, которая будет вызываться, когда запрос на выделение памяти с помощью операции new() не может быть успешно выполнен. Прототип</font><font> </font><font>функции</font><font> </font><font>имеет</font><font> </font><font>вид</font><font>: </font><font><b>void ( * set_new_handler(void (* my_handler)() ))();</b></font></p> <p> <font>По умолчанию операция new() возвращает 0, если она не может выделить память. Вы можете повлиять на ее поведение по умолчанию установкой нового обработчика прерываний и вызова set_new_handler. Если операция new() не может выделить требуемый объем памяти, она вызывает обработчик прерываний, который был установлен предыдущим вызовом set_new_handler. my_handler должен содержать действия, предпринимаемые при невозможности выполнить запрос операции new() на выделение памяти. Если произойдет возврат из my_handler, то new() вновь попытается выполнить запрос на выделение памяти. В идеале my_handler должен освободить память и вернуть управление, так что new() будет способна выполнить запрос на выделение памяти и программа сможет продолжиться. Если же my_handler не может обеспечить требуемый new() объем памяти, my_handler должен закончить работу программы. В противном случае будет создан бесконечный цикл.</font></p> <p> <font>Установка обработчика прерываний по умолчанию производится вызовом</font><font><b>set_new_handler(0).</b></font></p> <p> <font>Напомним, что set_new_handler возвращает старый обработчик прерываний, если он был определен. По умолчанию обработчик прерываний не установлен. Определенная пользователем функция - аргумент set_new_handler, именуемая здесь my_handler, не должна возвращать значение.</font></p> <p> <font>Функция new_handler перехватывает ошибки вызова операции new. Вид объявления:</font></p> <p> <font><b>typedef void (*pvf)();</b></font></p> <p> <font><b>pvf _new_handler(pvf p);</b></font></p> <p> <font>Функция _new_handler содержит указатель на функцию, не имеющую аргументов и возвращающую неопределенный тип void.</font></p> <p> <font>Если операция new() неспособна выделить требуемый объем памяти, она вызовет функцию *_new_handler; если эта функция что-либо вернет, то new() снова постарается выделить память.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1> <font>Дисциплина: Операционные системы</font></h1> </li></ol> " ],
 ["Назначение и основные функции ОС, обзор современных ОС и операционных оболочек.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Операционная система</b></font><font>, сокр. ОС (англ. operating system, OS) — комплекс управляющих и обрабатывающих программ, которые, с одной стороны, выступают как интерфейс между устройствами вычислительной системы и прикладными программами, а с другой стороны — предназначены для управления устройствами, управления вычислительными процессами, эффективного распределения вычислительных ресурсов между вычислительными процессами и организации надёжных вычислений. Это определение применимо к большинству современных ОС общего назначения.</font></p> <p> <font>В настоящее время существует большое количество различных типов операционных систем, отличающихся областями применения, аппаратными платформами, способами реализации и др.</font><font><b>Назначение операционных систем можно разделить на четыре основные составляющие:</b></font><font> </font> </p> <p> <font><b>1. Организация (обеспечение) удобного интерфейса</b></font><font> между приложениями и пользователями, с одной стороны, и аппаратурой компьютера – с другой. Вместо реальной аппаратуры компьютера ОС представляет пользователю расширенную виртуальную машину, с которой удобнее работать и которую легче программировать. Вот список основных сервисов, предоставляемых типичными операционными системами.</font></p> <p> <font>1.1.</font><font><b>Разработка программ:</b></font><font> ОС представляет программисту разнообразные инструменты разработки приложений: редакторы, отладчики и т.п. Здесь не обязательно знать, как функционируют различные электронные и электромеханические узлы и устройства компьютера. Часто пользователь может не узнать даже системы команд процессора, поскольку он может обойтись мощными высокоуровневыми функциями, которые представляет ОС.</font></p> <p> <font>1.2.</font><font><b>Исполнение программ</b></font><font>. Для запуска программы нужно выполнить ряд действий: загрузить в основную память программу и данные, инициализировать устройства ввода-вывода и файлы, подготовить другие ресурсы. ОС выполняет всю эту рутинную работу вместо пользователя.</font></p> <p> <font>1.3</font><font><b>. Доступ к устройствам ввода-вывода</b></font><font>. Для управления каждым устройством применяется свой набор команд. ОС предоставляет пользователю единообразный интерфейс, который скрывает все эти детали и обеспечивает программисту доступ к устройствам ввода-вывода с помощью простых команд чтения и записи. Если бы программист работал непосредственно с аппаратурой компьютера, то для организации, например, чтения блока данных с диска ему пришлось бы использовать более десятка команд с указанием множества параметров. После завершения обмена программист должен был бы предусмотреть еще более сложный анализ результата выполненной операции.</font></p> <p> <font>1.4</font><font><b>. Контролируемый доступ к файлам</b></font><font>. При работе с файлами управление со стороны ОС предполагает не только глубокий учет природы устройства ввода-вывода, но и знание структур данных, записанных в файлах. Многопользовательские ОС, кроме того, обеспечивают механизм защиты при обращении к файлам.</font></p> <p> <font>1.5.</font><font><b>Системный доступ</b></font><font>. ОС управляет доступом к совместно используемой или общедоступной вычислительной системе в целом, а также к отдельным системным ресурсам. Она обеспечивает защиту ресурсов и данных от несанкционированного использования и разрешает конфликтные ситуации.</font></p> <p> <font>1.6.</font><font><b>Обнаружение ошибок и их обработка</b></font><font>. При работе компьютерной системы могут происходить разнообразные сбои за счет внутренних и внешних ошибок в аппаратном обеспечении, различного рода программных ошибок (переполнение, попытка обращения к ячейке памяти, доступ к которой запрещен и др.). В каждом случае ОС выполняет действия, минимизирующие влияние ошибки на работу приложения (от простого сообщения об ошибке до аварийной остановки программы).</font></p> <p> <font>1.7.</font><font><b>Учет использования ресурсов</b></font><font>. Хорошая ОС имеет средства учета использования различных ресурсов и отображения параметров производительности вычислительной системы. Эта информация важна для настройки (оптимизации) вычислительной системы с целью повышения ее производительности.</font></p> <p> <font><b>2. Организация эффективного использования ресурсов компьютера</b></font><font>. ОС не только представляет пользователям и программистам удобный интерфейс к аппаратным средствам компьютера, но и является своеобразным диспетчером ресурсов компьютера. К числу основных ресурсов современных вычислительных систем относятся процессоры. Основная память, таймеры, наборы данных, диски, накопители на МЛ, принтеры, сетевые устройства и др. ресурсы распределяются операционной системой между выполняемыми программами. В отличие от программы, которая является статическим объектом, выполняемая программа – это динамический объект, такой объект называется процессом и является базовым понятием современных ОС.</font></p> <p> <font>Управление ресурсами включает решение ряда общих, не зависящих от типа ресурса задач.</font></p> <p> <font>2.1.</font><font><b>Планирование ресурса</b></font><font> – определение, какому процессу, когда и в каком качестве (если ресурс может выделяться частями) следует выделить данный ресурс.</font></p> <p> <font>2.2.</font><font><b>Удовлетворение запросов на ресурсы</b></font><font> – выделение ресурса процессам.</font></p> <p> <font>2.3.</font><font><b>Отслеживание состояния и учет использования ресурса</b></font><font> — поддержание оперативной информации о занятости ресурса и распределенной его доли.</font></p> <p> <font>2.4.</font><font><b>Разрешение конфликтов между процессами</b></font><font>, претендующими на один и тот же ресурс.</font></p> <p> <font>Для решения этих общих задач управления ресурсами разные ОС используют различные алгоритмы, особенности которых, в конечном счете, определяют облик ОС в целом, включая характеристики производительности, область применения и даже пользовательский интерфейс. Таким образом, управление ресурсами составляет важное назначение ОС. В отличие от функций расширенной виртуальной машины большинство функций управления ресурсами выполняются операционной системой автоматически и прикладному программисту недоступны.</font></p> <p> <font><b>3. Облегчение процессов эксплуатации аппаратных и программных средств вычислительной системы.</b></font><font>Ряд операционных систем имеют в своем составе наборы служебных программ, обеспечивающие резервное копирование, архивацию данных, проверку, очистку и дефрагментацию дисковых устройств и др.</font></p> <p> <font>Кроме того, современные ОС имеют достаточно большой набор средств и способов диагностики и восстановление работоспособности системы. Сюда относятся:</font></p> <ul>  <li>  <p> <font>диагностические программы для выявления ошибок в конфигурации ОС;</font></p>  </li><li>  <p> <font>средства восстановления последней работоспособной конфигурации;</font></p>  </li><li>  <p> <font>средства восстановления поврежденных и пропавших системных файлов и др.</font></p>  </li><li>  <p> <font>Следует отметить еще одно назначение ОС.</font></p> </li></ul> <p> <font><b>4. Возможность развития</b></font><font>. Современные ОС организуются таким образом, что допускают эффективную разработку, тестирования и внедрения новых системных функций, не прерывая процесса нормального функционирования вычислительной системы. Большинство операционных систем постоянно развиваются (нагляден пример</font><font>Windows</font><font>). Происходит это в силу следующих причин.</font></p> <p> <font>4.1</font><font><b>. Обновление и возникновение новых видов аппаратного обеспечения</b></font><font>. Например, ранние версии ОС</font><font>UNIX</font><font> и</font><font>OS</font><font>/2 не использовали механизмы страничной организации памяти (что это такое, мы рассмотрим позже), потому что они работали на машинах, не обеспеченных соответствующими аппаратными средствами.</font></p> <p> <font>4.2</font><font><b>. Новые сервисы</b></font><font>. Для удовлетворения пользователей или нужд системных администраторов ОС должны постоянно предоставлять новые возможности. Например, может потребоваться добавить новые инструменты для контроля или оценки производительности, новые средства ввода-вывода данных, например, речевой ввод. Другой пример – поддержка новых приложений, использующих окна на экране дисплея.</font></p> <p> <font>4.3.</font><font><b>Исправления.</b></font><font> В каждой ОС есть ошибки. Время от времени их обнаруживают и исправляют. Отсюда постоянные появления новых версий и редакций ОС. Необходимость регулярных изменений накладывает определенные требования на организацию операционных систем. Очевидно, что эти системы (как, впрочем, и другие сложные программы системы) должны иметь модульную структуру с четко определенными межмодульными связями (интерфейсами). Важную роль играет хорошая и полная документированность системы.</font></p> <p> <font><b>Функции:</b></font></p> <p> <font><b>Управление процессами.</b></font><font> Подсистема управления процессами непосредственно влияет на функционирование вычислительной системы. Для каждой выполняемой программы ОС организует один или более процессов.</font> </p> <p> <font><b>Управление памятью</b></font><font>. Подсистема управления памятью производит распределение физической памяти между всеми существующими в системе процессами, загрузку и удаление программных кодов и данных процессов в отведенные им области памяти, настройку адресно-зависимых частей кодов процесса на физические адреса выделенной области, а также защиту областей памяти каждого процесса. </font> </p> <p> <font><b>Управление файлами.</b></font><font> Функции управления файлами сосредоточены в файловой системе ОС. Операционная система виртуализирует отдельный набор данных, хранящихся на внешнем накопителе, в виде файла – простой неструктурированной последовательности байтов, имеющих символьное имя. Для удобства работы с данными файлы группируются в каталоги, которые, в свою очередь, образуют группы – каталоги более высокого уровня. Файловая система преобразует символьные имена файлов, с которыми работает пользователь или программист, в физические адреса данных на дисках, организует совместный доступ к файлам, защищает их от несанкционированного доступа.</font></p> <p> <font><b>Управление внешними устройствами.</b></font><font> Функции управления внешними устройствами возлагаются на подсистему управления внешними устройствами, называемую также подсистемой ввода-вывода. Она является интерфейсом между ядром компьютера и всеми подключенными к нему устройствами. </font> </p> <p> <font><b>Защита данных и администрирование.</b></font><font> Безопасность данных вычислительной системы обеспечивается средствами отказоустойчивости ОС, направленными на защиту от сбоев и отказов аппаратуры и ошибок программного обеспечения, а также средствами защиты от несанкционированного доступа.</font> </p> <p> <font>Интерфейс прикладного программирования. Прикладные программисты используют в своих приложениях обращения к операционной системе, когда для выполнения тех или иных действий им требуется особый статус, которым обладает только ОС. Возможности операционной системы доступны программисту в виде набора функций, который называется интерфейсом прикладного программирования (</font><font>ApplicationProgrammingInterface</font><font>, </font><font>API</font><font>). </font> </p> <p> <font><b>Пользовательский интерфейс.</b></font><font> ОС обеспечивает удобный интерфейс не только для прикладных программ, но и для пользователя (программиста, администратора). В ранних ОС интерфейс сводился к языку управления заданиями и не требовал терминала. Команды языка управления заданиями набивались на перфокарты, а результаты выполнения задания выводились на печатающее устройство.</font></p> <p> <font><b>Современные ОС</b></font><font> поддерживают развитые функции пользовательского интерфейса для интерактивной работы за терминалами двух типов: алфавитно-цифровыми и графическими. При работе за алфавитно-цифровым терминалом пользователь имеет в своем распоряжении систему команд, развитость которой отражает функциональные возможности данной ОС. Обычно командный язык ОС позволяет запускать и останавливать приложения, выполнять различные операции с каталогами и файлами, получать информацию о состоянии ОС, администрировать систем команды могут вводиться не только в интерактивном режиме с терминала, но и считываться из так называемого командного файла, содержащего некоторую последовательность команд.</font></p> <p> <font>Обзор современных ОС и операционных оболочек семейства Windows, Unix, MacOS.</font></p> <p> <font><b>Windows.</b></font><font>Cемейство операционных систем корпорации Microsoft, базирующихся на основе графического интерфейса пользователя. Появление их явилось решающим шагом в широком продвижении и развитии перспективных способов взаимодействия систем человек-машина и машина-машина, создания дружественной среды для взаимодействия как пользователя с компьютерными приложениями, так и аппаратных средств внутри вычислительного комплекса.</font></p> <p> <font>В настоящее время под управлением операционных систем семейства Windows работает около 90% персональных компьютеров. Первая версия Windows 1.0 вышла 20 ноября 1985 года. Последняя версия Windows 8 была выпущена в 2012 году.</font></p> <p> <font>Пакет Microsoft Windows включает в себя стандартные приложения, такие как браузер (Internet Explorer), почтовый клиент (Outlook Express или Windows Mail), музыкальный и видео проигрыватель (Windows Media Player). С помощью технологий COM и OLE их компоненты могут быть использованы в приложениях сторонних производителей. Эти продукты бесплатны, и могут быть свободно скачаны с официального сайта Microsoft, однако для установки некоторых из них необходимо иметь лицензионную версию Microsoft Windows. Запуск этих программ под другими операционными системами возможен только с помощью эмуляторов среды Windows (Wine), хотя такое их использование нарушает пользовательское соглашение.</font></p> <p> <br> </p> <p> <font><b>Unix.</b></font><font>Группа переносимых, многозадачных и многопользовательских операционных систем.</font></p> <p> <font>Первая система UNIX была разработана в 1969 г. в подразделении Bell Labs компании AT&amp;T. С тех пор было создано большое количество различных UNIX-систем. Юридически лишь некоторые из них имеют полное право называться «UNIX»; остальные же, хотя и используют сходные концепции и технологии, объединяются термином «UNIX-подобные» (англ. Unix-like). Для краткости в данной статье под UNIX-системами подразумеваются как истинные UNIX, так и UNIX-подобные ОС.</font></p> <p> <font><b>Некоторые отличительные признаки UNIX-систем включают в себя:</b></font></p> <ul>  <li>  <p> <font>использование простых текстовых файлов для настройки и управления системой;</font></p>  </li><li>  <p> <font>широкое применение утилит, запускаемых в командной строке;</font></p>  </li><li>  <p> <font>взаимодействие с пользователем посредством виртуального устройства — терминала;</font></p>  </li><li>  <p> <font>представление физических и виртуальных устройств и некоторых средств межпроцессового взаимодействия как файлов;</font></p>  </li><li>  <p> <font>использование конвейеров из нескольких программ, каждая из которых выполняет одну задачу.</font></p> </li></ul> <p> <font>В настоящее время UNIX используются в основном на серверах, а также как встроенные системы для различного оборудования. На рынке ОС для рабочих станций и домашнего применения UNIX уступили другим операционным системам, таким как Microsoft Windows и Mac OS, так как существующие программные решения для Unix-систем не позволяют реализовать полноценные рабочие станции ни для офисного, ни для домашнего использования.</font></p> <p> <font><b>MacOS.</b></font><font>Cемейство операционных систем с графическим интерфейсом. Вместе с Mac OS X вторая по популярности в мире операционная система. Разработана корпорацией Apple (ранее — Apple Computer) для своей линейки компьютеров Macintosh. Популяризация графического интерфейса пользователя в современных операционных системах часто считается заслугой Mac OS. Она была впервые представлена в 1984 году вместе с оригинальным Macintosh 128K.</font></p> <p> <font>Ранние версии Mac OS были совместимы только с Макинтошами, основанными на процессорах Motorola 68k, следующие версии были совместимы с архитектурой PowerPC (PPC). С недавних пор Mac OS X стала совместима с архитектурой Intel x86. Но политика фирмы Apple такова, что она разрешает устанавливать систему Mac OS только на компьютеры Apple.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Классификация ОС по особенностям алгоритмов управления ресурсами, особенностям аппаратных платформ, особенностям областей использования и методам построения.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>По особенностям алгоритмов управления ресурсами.</b></font><font> Главным ресурсом системы является процессор, поэтому дадим классификацию по алгоритмам управления процессором, хотя можно, конечно, классифицировать ОС по алгоритмам управления памятью, устройствами ввода/вывода и.т.д.</font></p> <ol>  <li>  <p> <font><b>Поддержка многозадачности</b></font><font> (многопрограммности). По числу одновременно выполняемых задач ОС делятся на 2 класса: однопрограммные (однозадачные), например, </font><font>MS</font><font>-</font><font>DOS</font><font>, </font><font>MSX</font><font>, и многопрограммные (многозадачные), например, ОС ЕС ЭВМ,</font><font>OS</font><font>/360, </font><font>OS</font><font>/2, </font><font>UNIX</font><font>, </font><font>Windows</font><font> разных версий. Однопрограммные ОС предоставляет пользователю виртуальную машину, делая более простым и удобным процесс взаимодействия пользователя с компьютером. Они также имеют средства управления файлами, периферийными устройствами и средства общения с пользователем. Многозадачные ОС, кроме того, управляют разделением совместно используемых ресурсов (процессор, память, файлы и т.д.), это позволяет значительно повысить эффективной вычислительной системы.</font></p>  </li><li>  <p> <font><b>Поддержка многопользовательского режима</b></font><font>. По числу одновременно работающих пользователей ОС делятся на однопользовательские (</font><font>MS</font><font>-</font><font>DOS</font><font>, </font><font>Windows</font><font> 3х, ранние версии</font><font>OS</font><font>/2) и многопользовательские (</font><font>UNIX</font><font>, </font><font>WindowsNT</font><font>/2000/2003/</font><font>XP</font><font>/</font><font>Vista</font><font>). Главное отличие многопользовательских систем от однопользовательских – наличие средств защиты информации каждого пользователя от несанкционированного доступа других пользователей. Следует заметить, что может быть однопользовательская мультипрограммная система.</font></p>  </li><li>  <p> <font><b>Виды многопрограммной работы.</b></font><font> Специфику ОС во многом определяет способ распределения времени между несколькими одновременно существующими в системе процессами (или потоками). По этому признаку можно выделить 2 группы алгоритмов: не вытесняющая многопрограммность (</font><font>Windows</font><font>3.</font><font>x</font><font>, </font><font>NetWare</font><font>) и вытесняющая многопрограммность (</font><font>Windows</font><font> 2000/2003/</font><font>XP</font><font>, </font><font>OS</font><font>/2, </font><font>Unix</font><font>). В первом случае активный процесс выполняется до тех пор, пока он сам не отдает управление операционной системе. Во втором случае решение о переключении процессов применяет операционная система. Возможен и такой режим многопрограммности, когда ОС разделяет процессорное время между отдельными ветвями (потоками, волокнами) одного процесса.</font></p>  </li><li>  <p> <font><b>Многопроцессорная обработка</b></font><font>. Важное свойство ОС – отсутствие или наличие средств поддержки многопроцессорной обработки. По этому признаку можно выделить ОС без поддержки мультипроцессирования (</font><font>Windows</font><font> 3.</font><font>x</font><font>, </font><font>Windows</font><font> 95) и с поддержкой мультипроцессирования (</font><font>Solaris</font><font>, </font><font>OS</font><font>/2, </font><font>UNIX</font><font>, </font><font>WindowsNT</font><font>/2000/2003/</font><font>XP</font><font>). Многопроцессорные ОС классифицируются по способу организации вычислительного процесса на асимметричные ОС (выполняются на одном процессоре, распределяя прикладные задачи по остальным процессорам) и симметричные ОС (децентрализованная система).</font></p> </li></ol> <p> <font><b>По аппаратной платформе</b></font><font> (типу вычислительной техники), для которой предназначаются операционные системы, их делят на следующие группы: </font> </p> <ul>  <li>  <p> <font><b>операционные системы для смарт-карт.</b></font><font> Некоторые из них могут управлять только одной операцией, например, электронным платежом. Некоторые смарт-карты являются JAVA-ориентированными и содержат интерпретатор виртуальной машины JAVA. Апплеты JAVA загружаются на карту и выполняются JVM-интерпретатором. Некоторые из таких карт могут одновременно управлять несколькими апплетами JAVA, что приводит к многозадачности и необходимости планирования;</font></p>  </li><li>  <p> <font><b>встроенные операционные системы.</b></font><font> Управляют карманными компьютерами (Palm OS, Windows CE – Consumer Electronics – бытовая техника), мобильными телефонами, телевизорами, микроволновыми печами и т.п.;</font></p>  </li><li>  <p> <font><b>операционные системы для персональных компьютеров</b></font><font>, например, Windows9.x, Windows ХР, Linux, Mac OSX и др.;</font></p>  </li><li>  <p> <font><b>операционные системы мини-ЭВМ</b></font><font>, например, RT-11 для PDP11 – OC реального времени, RSX-11 M для PDP-11 – ОС разделение времени, UNIX для PDP-7;</font></p>  </li><li>  <p> <font><b>операционные системы мэйнфреймов</b></font><font> (больших машин), например, Z/OS, OS/390, произошедшие от OS/360 (IBM). Обычно ОС мэйнфреймов предполагает одновременно три вида обслуживания: пакетную обработку, обработку транзакций (например, работа с БД, бронирование авиабилетов, процесс работы в банках) и разделение времени;</font></p>  </li><li>  <p> <font><b>серверные операционные системы</b></font><font>, например, UNIX, Windows 2000, Linux. Область применения – региональные сети, Intranet, Internet;</font></p>  </li><li>  <p> <font><b>кластерные операционные системы</b></font><font>. Кластер – слабо связанная совокупность нескольких вычислительных систем, работающих совместно для выполнения общих приложений и представляющихся пользователю единой системной, например, Windows 2000 Cluster Server, Windows 2008 Server, Sun Cluster (базовая ОС – Solaris).</font></p> </li></ul> <p> <font><b>По области использования и форме эксплуатации</b></font><font>. Обычно здесь выделяют три типа в соответствии с использованными при их разработке критериями эффективности:</font></p> <ul>  <li>  <p> <font>системы пакетной обработки (OS/360, OC EC);</font></p>  </li><li>  <p> <font>системы разделения времени (UNIX, VMS);</font></p>  </li><li>  <p> <font>системы реального времени (QNX, RT/11).</font></p> </li></ul> <p> <font><b>Первые предназначались</b></font><font> для решения задач в основном вычислительного характера, не требующих быстрого получения результатов. Критерий создания таких ОС – максимальная пропуская способность при хорошей загрузке всех ресурсов компьютера. В таких системах пользователь отстранен от компьютера.</font></p> <p> <font><b>Системы разделения времени</b></font><font> обеспечивают удобство и эффективность работы пользователя, который имеет терминал и может вести диалог со своей программой.</font></p> <p> <font><b>Системы реального времени</b></font><font> предназначены для управления техническими объектами (станок, спутник, технологический процесс, например доменный, и т. п.), где существует предельное время на выполнение программ, управляющих объектом.</font></p> <p> <font><b>По методам построения</b></font><font><b>. </b></font><font>При описании операционной системы часто указываются особенности ее структурной организации и основные концепции, положенные в ее основу.</font> </p> <p> <font>К таким базовым концепциям относятся:</font> </p> <ul>  <li>  <p> <font><b>Способы построения ядра системы</b></font><font> - монолитное ядро или микроядерный подход. Большинство ОС использует монолитное ядро, которое компонуется как одна программа, работающая в привилегированном режиме и использующая быстрые переходы с одной процедуры на другую, не требующие переключения из привилегированного режима в пользовательский и наоборот. Альтернативой является построение ОС на базе микроядра, работающего также в привилегированном режиме и выполняющего только минимум функций по управлению аппаратурой, в то время как функции ОС более высокого уровня выполняют специализированные компоненты ОС - серверы, работающие в пользовательском режиме.</font> </p>  </li><li>  <p> <font><b>Построение ОС на базе объектно-ориентированного подхода</b></font><font> дает возможность использовать все его достоинства, хорошо зарекомендовавшие себя на уровне приложений, внутри операционной системы, а именно: аккумуляцию удачных решений в форме стандартных объектов, возможность создания новых объектов на базе имеющихся с помощью механизма наследования, хорошую защиту данных за счет их инкапсуляции во внутренние структуры объекта, что делает данные недоступными для несанкционированного использования извне, структуризованность системы, состоящей из набора хорошо определенных объектов.</font> </p>  </li><li>  <p> <font><b>Наличие нескольких прикладных сред</b></font><font> дает возможность в рамках одной ОС одновременно выполнять приложения, разработанные для нескольких ОС. Многие современные операционные системы поддерживают одновременно прикладные среды MS-DOS, Windows, UNIX (POSIX), OS/2 или хотя бы некоторого подмножества из этого популярного набора. Концепция множественных прикладных сред наиболее просто реализуется в ОС на базе микроядра, над которым работают различные серверы, часть которых реализуют прикладную среду той или иной операционной системы. </font> </p>  </li><li>  <p> <font><b>Распределенная организация операционной системы</b></font><font> позволяет упростить работу пользователей и программистов в сетевых средах. В распределенной ОС реализованы механизмы, которые дают возможность пользователю представлять и воспринимать сеть в виде традиционного однопроцессорного компьютера. Характерными признаками распределенной организации ОС являются: наличие единой справочной службы разделяемых ресурсов, единой службы времени, использование механизма вызова удаленных процедур (RPC) для прозрачного распределения программных процедур по машинам, многонитевой обработки, позволяющей распараллеливать вычисления в рамках одной задачи и выполнять эту задачу сразу на нескольких компьютерах сети, а также наличие других распределенных служб.</font></p> </li></ul> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Синхронизация параллельных процессов. Проблема критических участков. Алгоритм Деккера.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Рабочая смесь, созданная механизмами высшего и внутреннего планирования , представляет собой совокупность параллельных процессов.</font> </p> <p> <font><b>Процессы называются параллельными</b></font><font>, если они существуют в системе одновременно.</font> </p> <p> <font>Параллельные процессы называются независимыми, если они работают без целенаправленной передачи сигналов информации друг другу.</font> </p> <p> <font>Параллельные процессы называются связанными, если осуществляется направленный обмен сигналами (информацией) между ними. </font> </p> <p> <font><b>Связанные параллельные процессы бывают синхронными</b></font><font>, когда обеспечиваются согласование скоростей их развития в системе, и асинхронными, если скорости протекания процессов не регулируются в системе. </font> </p> <p> <font><b>В механизмах синхронизации нуждаются все виды параллельных процессов</b></font><font>, функционирующих в мультипрограммной вычислительной системе.</font> </p> <p> <font>Не связанные между собой процессы также нуждаются в синхронизации своей работы. Это объясняется тем, что они используют во время функционирования одни и те же физические и логические внешние устройства, которые в каждый конкретный момент времени могут обслуживать только один процесс ( критические ресурсы).</font> </p> <p> <font><b>Ресурс системы называется критическим</b></font><font>, если он допускает в каждый момент времени обслуживание только одного процесса.</font></p> <p> <font>Общим принципом, положенным в основу всех механизмов синхронизации процессов, является принцип взаимоисключения.</font> </p> <p> <font><b>Принцип взаимоисключения</b></font><font>: каждый процесс, обращающий к разделяемым (критическим) ресурсам, должен исключить возможность для всех других процессов одновременного с ним использования этого ресурса. </font> </p> <p> <font>Использование принципа взаимоисключения требует встраивания в программы процессов механизмов синхронизации, обеспечивающих выполнение следующих условий:</font> </p> <p> • <font>при обращении нескольких процессов к одному разделяемому ресурсу только одному из них разрешено воспользоваться этим ресурсом;</font> </p> <p> • <font>в каждый момент времени только один процесс должен владеть критическим ресурсом.</font> </p> <p> <font>Все механизмы синхронизации, реализующие принцип взаимоисключения, основаны на применении концепции </font><font><b>критического участка программы.</b></font></p> <p> <font><b>Критическим участком, критической областью</b></font><font> программы процесса называется тот отрезок программного кода процесса, на котором этот процесс образуется к критическому ресурсу.</font> </p> <p> <font>Количество критических участков в процессе зависит только от того, к ресурсам какого вида он обращается при своем функционировании.</font> </p> <p> <font>Когда некоторый процесс находится на своем критическом участке, другие процессы могут продолжать выполнение, но без входа в их критические участки (занятым критическим ресурсам), когда процесс выходит из критического участка, то должно быть разрешено использование освобожденного критического ресурса. Обеспечение взаимоисключения является основной проблемой параллельного программирования.</font></p> <p> <font>Общим подходом к построению механизмов синхронизации с использованием концепции критических участков является применение примитивов взаимоисключения.</font> </p> <p> <font>Примитивами взаимоисключения называется программная конструкция, обеспечивающая реализацию взаимоисключений для параллельных процессов. В обобщенном виде можно указать </font><font><b>два примитива взаимоисключений:</b></font><font> </font> </p> <p> <font>1) </font><font><b>примитив вход _ взаимоисключения</b></font><font> – с его помощью фиксируется захват критического ресурса данным процессом и устанавливается запрет на использование его другими процессами; </font> </p> <p> <font>2</font><font><b>) примитив выход _ взаимоисключения</b></font><font> – с его помощью процесс сообщает об освобождении им критического ресурса.</font> </p> <p> <font>Простейший алгоритм синхронизации с применением примитивов взаимоисключения состоит в следующем (см. рисунок). Главный процесс запускает в работу два параллельных процесса П1 и П2, после чего он может закончить свою работу. Каждый из параллельных процессов в своем теле имеет области работы с критическим ресурсом . Эти области обязательно обрамляются примитивами вход _взаимоисключения и выход_взаимоисключения.</font><img src='/static/i_0067f68bc106c46b_html_m29766df2.png'> </p> <p> <font>В рассматриваемом случае двух процессов эти примитивы работают следующим образом. Когда процесс П1 выполняет примитив вход_взаимоисключения и если при этом процесс П2 находится вне своего критического участка, то П1 входит в свой критический участок, выполняет работу с критическим ресурсом, а затем выполняет примитив выход _взаимоисключения, показывая тем самым, что он вышел из своего критического участка. Если П 1 выполняет вход _ взаимоисключения, в то время как П 2 находится на своем критическом участке, то процесс П 1 переводится в состояние ожидания, пока процесс П 2 не выполнит выход _ взаимоисключения.Только после этого процесс П 1 может выйти из состояния ожидания и войти в свой критический участок.</font> </p> <p> <font>Если процессы П 1 и П 2 выполняют вход _взаимоисключения одновременно, то одному из них операционная система разрешает продолжить работу, а другой переводит в состояние ожидания.</font></p> <p> <font>Впервые изящную программную реализацию механизма взаимоисключения предложил голландский математик </font><font><b>Деккер.</b></font><font> Он позволяет двум потокам выполнения совместно использовать неразделяемый ресурс без возникновения конфликтов, используя только общую память для коммуникации. Впоследствии алгоритм Деккера был существенно усовершенствован Е. Дейкстрой. Программа реализации алгоритма Деккера -Дейкстры приведена ниже.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_6b407052.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_6b407052.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_6b407052.png'></p> <p> <font>Если два процесса пытаются перейти в критическую секцию одновременно, алгоритм позволит это только одному из них, основываясь на том, чья в этот момент очередь. Если один процесс уже вошёл в критическую секцию, другой будет ждать, пока первый покинет её.</font> </p> <p> <font>Процессы объявляют о намерении войти в критическую секцию; это проверяется внешним циклом «while». Если другой процесс не заявил о таком намерении, в критическую секцию можно безопасно войти (вне зависимости от того, чья сейчас очередь). Процесс, чья очередь не наступила, оставляет намерение войти в критическую секцию до тех пор, пока не придёт его очередь (внутренний цикл «while»). Процесс, чья очередь пришла, выйдет из цикла «while» и войдёт в критическую секцию.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Понятие виртуальной памяти. Страничное, сегментное и странично-сегментное распределение памяти.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Термин виртуальная память</b></font><font> обычно ассоциируется с возможностью адресовать пространство памяти, гораздо большее, чем емкость первичной (реальной, физической) памяти конкретной вычислительной машины. Концепция виртуальной памяти впервые была реализована в машине, созданной в 1960 г. в Манчестерском университете (Англия). Однако широкое распространение системы виртуальной памяти получили лишь в ЭВМ четвертого и последующих поколений.</font> </p> <p> <font><font><b>Виртуальная память</b></font></font><font><font> - это совокупность программно-аппаратных средств, позволяющих пользователям писать программы, размер которых превосходит имеющуюся оперативную память;</font></font><font><font><b>для этого виртуальная память решает следующие задачи:</b></font></font></p> <ul>  <li>  <p> <font><font>размещает данные в запоминающих устройствах разного типа, например, часть программы в оперативной памяти, а часть на диске;</font></font></p>  </li><li>  <p> <font><font>перемещает по мере необходимости данные между запоминающими устройствами разного типа, например, подгружает нужную часть программы с диска в оперативную память;</font></font></p>  </li><li>  <p> <font><font>преобразует виртуальные адреса в физические.</font></font></p> </li></ul> <p> <font>Существует два наиболее известных способа реализации виртуальной памяти – </font><font><b>страничный и сегментный.</b></font><font> Применяется также их комбинация – </font><font><b>странично - сегментная организация виртуальной памяти.</b></font> </p> <p> <font>Все системы виртуальной памяти характеризуются тем, что адреса, формируемые выполняемыми программами, необязательно совпадают с адресами первичной памяти. Виртуальные адреса, как правило, представляют гораздо большее множество адресов, чем имеется в первичной памяти.</font> </p> <p> <font>Суть концепции виртуальной памяти заключается в том, что адреса, к которым обращается выполняющийся процесс, отделяются от адресов, реально существующих в первичной памяти. Адреса, на которые делает ссылки выполняющийся процесс, называются виртуальными адресами. Адреса, которые реально существуют в первичной памяти, называются реальными (физическими) адресами.</font> </p> <p> <font>Диапазон виртуальных адресов, к которым может обращаться выполняющийся процесс, называется </font><font><b>пространством виртуальных адресов V этого процесса</b></font><font>. Диапазон реальных адресов, существующих в конкретной вычислительной машине, </font><font><b>называется пространством реальных адресов R</b></font><font> этой ЭВМ.</font> </p> <p> <font>Несмотря на то, что процессы обращаются только к виртуальным адресам, в действительности они должны работать с реальной памятью. Для установления соответствия между виртуальными и реальными адресами разработаны механизмы </font><font><b>динамического преобразования адресов ДПА</b></font><font> (или DAT – от англ . Dynamics Adress Transformation), обеспечивающие преобразование виртуальных адресов в реальные во время выполнения процесса. </font> </p> <p> <font>Виртуальная память строится, как правило, по двухуровневой схеме.</font> </p> <p> <font><b>Первый уровень</b></font><font> – это реальная память, в которой находятся выполняемые процессы и в которой должны размещаться данные, к которым обращаются эти процессы.</font> </p> <p> <font><b>Второй уровень</b></font><font> – это внешняя память большой емкости, например накопители на магнитных дисках, способные хранить программы и данные, которые не могут все сразу уместиться в реальной памяти из-за ограниченности ее объема. Память второго уровня называют вторичной или внешней. </font> </p> <p> <font>Механизм динамического преобразования адресов ведет учет того, какие ячейки виртуальной памяти в данный момент находятся в реальной памяти и где именно они размещаются. Это осуществляется с помощью таблиц отображения, ведущихся механизмом ДПА.</font> </p> <p> <font>Информация, перемещаемая из виртуальной памяти в реальную, механизмом ДПА группируется в блоки, и система следит за тем, в каких местах реальной памяти размещаются различные блоки виртуальной памяти. Размер блока влияет на то, какую долю реальной памяти ДПА будет использовать непроизводительно, для своих целей.</font> </p> <p> <font><b>Виртуальный адрес при чисто страничной организации памяти</b></font><font><b>.</b></font><font> </font><font><font>Виртуальный адрес при страничном распределении может быть представлен в виде пары (p, s), где p - номер виртуальной страницы процесса (нумерация страниц начинается с 0), а s - смещение в пределах виртуальной страницы. Учитывая, что размер страницы равен 2 в степени к, смещение s может быть получено простым отделением k младших разрядов в двоичной записи виртуального адреса. Оставшиеся старшие разряды представляют собой двоичную запись номера страницы p.</font></font></p> <p> <font><font>При каждом обращении к оперативной памяти аппаратными средствами выполняются следующие действия:</font></font></p> <ol>  <li>  <p> <font><font>на основании начального адреса таблицы страниц (содержимое регистра адреса таблицы страниц), номера виртуальной страницы (старшие разряды виртуального адреса) и длины записи в таблице страниц (системная константа) определяется адрес нужной записи в таблице,</font></font></p>  </li><li>  <p> <font><font>из этой записи извлекается номер физической страницы,</font></font></p>  </li><li>  <p> <font><font>к номеру физической страницы присоединяется смещение (младшие разряды виртуального адреса).</font></font></p> </li></ol> <p> <font>Процесс может выполняться, если его текущая страница находится в первичной памяти. Страницы переписываются из внешней памяти в первичную и размещаются в ней в блоках, называемых страничными кадрами и имеющих точно такой же размер, как у поступающих страниц. Страничные кадры начинаются в реальной памяти с адресов, кратных фиксированному размеру страниц. Поступающая страница может быть помещена в любой свободный страничный кадр. </font> </p> <p> <font>Для обеспечения работы механизма отображения страниц формируется таблица отображения страниц, каждая строка которой содержит информацию об отображаемой странице виртуальной памяти; r – признак наличия страницы в первичной памяти ( r = 0 – страницы в первичной памяти нет; 1 – страница находится в первичной памяти); S – адрес страницы во внешней памяти ( при r = 0); p′ – номер страничного кадра в первичной памяти, где размещена виртуальная страница с номером p.</font> </p> <p> <font><b>Виртуальный адрес при сегментной организации виртуальной памяти</b></font><font> – это упорядоченная пара ν = (s, d), где s – номер сегмента виртуальной памяти, а d – смещение в рамках этого сегмента. Процесс может выполняться только в том случае, если его текущий сегмент находится в первичной памяти. </font> </p> <p> <font><font>Виртуальное адресное пространство процесса делится на сегменты, размер которых определяется программистом с учетом смыслового значения содержащейся в них информации. Отдельный сегмент может представлять собой подпрограмму, массив данных и т.п. Иногда сегментация программы выполняется по умолчанию компилятором.</font></font></p> <p> <font><font>При загрузке процесса часть сегментов помещается в оперативную память (при этом для каждого из этих сегментов</font></font><font><font></font></font><a href='http://media.wikimart.ru/software/operating_systems/model/23552973?recommendedOfferId=44651016'><font><font>операционная система</font></font></a><font><font></font></font><font><font>подыскивает подходящий участок свободной памяти), а часть сегментов размещается в дисковой памяти. Сегменты одной программы могут занимать в оперативной памяти несмежные участки. Во время загрузки система создает таблицу сегментов процесса (аналогичную таблице страниц), в которой для каждого сегмента указывается начальный физический адрес сегмента в оперативной памяти, размер сегмента, правила доступа, признак модификации, признак обращения к данному сегменту за последний интервал времени и некоторая другая информация. Если виртуальные адресные пространства нескольких процессов включают один и</font></font><font><font></font></font><a href='http://www.wildberries.ru/catalog/848365/detail.aspx'><font><font>тот</font></font></a><font></font><font>же сегмент, то в таблицах сегментов этих процессов делаются ссылки на один и</font><font></font><a href='http://www.wildberries.ru/catalog/848365/detail.aspx'><font><font>тот</font></font></a><font><font></font></font><font><font>же участок оперативной памяти, в который данный сегмент загружается в единственном экземпляре.</font></font></p> <p> <font><font>Физический адрес получается путем сложения начального физического адреса сегмента, найденного в таблице сегментов по номеру g, и смещения s.</font></font></p> <p> <font><font>Недостатком данного метода распределения памяти является фрагментация на уровне сегментов и более медленное по сравнению со страничной организацией преобразование адреса.</font></font></p> <p> <font><b>Системы со странично-сегментной организацией</b></font><font> обладают достоинствами обоих способов реализации виртуальной памяти. Сегменты обычно содержат целое число страниц, причем не обязательно, чтобы все страницы сегмента находились в первичной памяти одновременно, а смежные страницы виртуальной памяти не обязательно должны оказаться смежными в первичной памяти. В системе со странично-сегментной организацией применяется трехкомпонентная (трехмерная) адресация. Виртуальный адрес ν здесь определяется как упорядоченная тройка ν = (s, p, d), где s – номер сегмента , p – номер страницы, а d – смещение в рамках страницы, где находится нужный элемент.</font></p> <p> <font>Операционная система для каждого процесса формирует, во - первых, одну таблицу сегментов процесса, и, во - вторых, таблицы страниц сегментов по одной на каждый сегмент процесса). Таблица сегментов процесса содержит в своих строках информацию о количестве страниц в сегменте и о начальных адресах s′ размещения таблиц страниц сегментов в первичной памяти ЭВМ.</font> </p> <p> <font>Каждая страница таблиц сегмента содержит в своих строках информацию о начальном адресе p′ размещения в первичной памяти страничного кадра для данной страницы виртуальной памяти. Динамическое преобразование виртуальных адресов в системах со странично-сегментной организацией отличается от преобразования по схеме наличием еще одного уровня вычисления адреса и появлением таблиц страниц для каждого сегмента процесса.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Управление вводом-выводом. Физическая организация устройств ввода-вывода, организация программного обеспечения ввода-вывода.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>В состав любой операционной системы входят программные модули, обеспечивающие управление устройствами ввода-вывода ЭВМ. Эти программные модули называют драйверами устройств, а совокупность драйверов ввода-вывода образует систему ввода- вывода, входящую в состав операционной системы .</font> </p> <p> <font><b>Драйвер устройства </b></font><font> (Device driver) – программа, обеспечивающая взаимодействие операционной системы с физическим устройством.</font> </p> <p> <font><b>Система ввода-вывода (Input-Output System)</b></font><font> – часть операционной системы, обеспечивающая управление внешними устройствами, подключенными к ЭВМ.</font> </p> <p> <font><b>Основной задачей системы ввода-вывода</b></font><font> является обеспечение непрерывной организации (планирования, управления) и двусторонней передачи данных между основной памятью и внешними устройствами с целью достижения максимального перекрытия во времени работы этой аппаратуры и процессора. </font> </p> <p> <font><b>Состав систем ввода-вывода</b></font><font> и, следовательно, перечень драйверов устройств в различных операционных системах не совпадают, что объясняется имеющимися отличиями в аппаратуре ввода-вывода, а также множеством методов, используемых для управления этой аппаратурой. Вместе с тем в большинстве операционных систем существует некоторое ядро системы ввода-вывода, получившее название базовой системы ввода- вывода.</font> </p> <p> <font><b>Базовая система ввода-вывода (BIOS – Basic Input Output System)</b></font><font> – часть программного обеспечения ЭВМ, поддерживающая управление адаптерами внешних устройств и представляющая стандартный интерфейс для обеспечения переносимости операционных систем между ЭВМ с одинаковым процессором. Базовая система ввода-вывода, как правило, разрабатывается изготовителем ЭВМ, хранится в постоянном запоминающем устройстве и рассматривается как часть ЭВМ.</font> </p> <p> <font><b>При построении систем ввода-вывода</b></font><font> аппаратура ввода-вывода рассматривается как совокупность аппаратурных процессоров, которые способны работать параллельно и независимо друг от друга, а также относительно центрального процессора. На таких процессорах развиваются так называемые внешние процессы.</font> </p> <p> <font>Внешние процессы, используя аппаратуру ввода- вывода, могут взаимодействовать как между собой, так и с внутренними процессами, которые развиваются на центральном процессоре. Важным фактом является то, что скорости развития внешних и внутренних процессов существенно различаются, причем эти различия могут достигать нескольких порядков. </font> </p> <p> <font><b>Система управления вводом-выводом</b></font><font><b> </b></font><font>представляет собой один или несколько системных процессов (т. е. процессов, принадлежащих операционной системе), обеспечивающих информационное и управляющее взаимодействие внутренних и внешних процессов. Через эту систему происходит инициализация, управление развитием и уничтожение внешних процессов.</font> </p> <p> <font>С точки зрения внутренних (программных) процессов-пользователей система управления вводом-выводом представляет собой программный интерфейс с необходимыми для этих процессов внешними устройствами. В составе этого интерфейса пользователь имеет возможность выражать запросы на выполнение действий в отношении внешних устройств. </font><font><b>При этом различают три типа действий</b></font><font>: операции чтения и записи данных, операции управления устройством, операции по проверке состояния устройств. При построении систем управления вводом-выводом руководствуются стремлением сделать большинство ее компонентов 'невидимыми' для пользователей, что достигается созданием развитых драйверов внешних устройств с понятным интерфейсом и доступными из любой системы программирования.</font> </p> <p> <font><font>В зависимости от степени автономности от центрального процессора можно выделить два типа управления периферийным устройством (рис. 2).</font></font></p> <p> <font><font><b>Прямой</b></font></font><font><font><b></b></font></font><font><font>метод основан на непосредственной связи центрального процессора и периферийного устройства и предполагает наличие в составе команд процессора специальных команд по инициированию работы, проверке готовности, останову, записи информации и т.д.</font></font></p> <p> <table dir='LTR'>  <colgroup><col>  <col>  <col>  <col>  </colgroup><tbody><tr>  <td>  <p><br> </p>  </td>  <td>  <p><br> </p>  </td>  <td>  <p><br> </p>  </td>  <td>  <p><br> </p>  </td>  </tr>  <tr>  <td>  <p><br> </p>  </td>  <td>  <p><img src='/static/i_0067f68bc106c46b_html_415020e0.gif'></p>  </td>  <td>  <p><br> </p>  </td>  <td>  <p><img src='/static/i_0067f68bc106c46b_html_m74e145ca.gif'></p>  </td>  </tr> </tbody></table> <font></font> </p> <p><font><font><br></font></font><br> </p> <p> <font> </font><font></font><font><font>а) </font></font><font><font></font></font><font><font>б)</font></font></p> <p> <font><font>Рис 2.</font></font><font><font></font></font><font><font>Методы управления периферийными устройствами: а)прямой; б)косвенный</font></font></p> <p> <font><font>Состояние устройства определяется с помощью так называемого</font></font><font><font></font></font><font><font><i>флажка занятости</i></font></font><font><font>, программно доступного ЦП. Если устройство занято (флажок установлен), то адресуемая этому устройству команда блокируется до его освобождения. ЦП в это время может выполнять счетную работу.</font></font></p> <p> <font><font>Этот метод управления нельзя использовать в мультипрограммном режиме. Задача совмещения работы ЦП и ПУ ложится на программиста.</font></font></p> <p> <font><font><b>Косвенный</b></font></font><font><font></font></font><font><font>метод состоит в том, что между ЦП и ПУ помещается канал – специальный</font></font><font><font></font></font><a href='http://computers.wikimart.ru/components/cpu/model/49671303?recommendedOfferId=96991973'><font><font>процессор</font></font></a><font><font>, который фактически управляет вводом-выводом. С ЦП снимаются несвойственные ему функции по управлению ПУ, остаются лишь функции управления каналом. ЦП только инициирует ввод-вывод, а затем может выполнять свои программы (до момента окончания процесса ввода-вывода). При этом ЦП, канал и ПУ по мере развития внешнего процесса работают параллельно.</font></font></p> <p> <font>Для сглаживания эффекта несоответствия скоростей между внутренними и внешними процессами в системах управления вводом-выводом применяют три основных метода: синхронизация по прерываниям ввода- вывода, буферизация ввода-вывода, блокирование данных.</font></p> <p> <font>Для синхронизации параллельной работы могут применяться различные методы, среди которых наиболее совершенными являются средства, основанные на использовании системы прерывания. Канал ввода-вывода через систему прерываний прерывает работу центрального процессора всякий раз при завершении операции ввода-вывода или при возникновении ошибки. Такие сигналы прерывания являются по своему смыслу синхронизирующими, так как они используются для оповещения определенного внутреннего процесса о событии, которое произошло при работе канала ввода- вывода или внешнего устройства.</font> </p> <p> <font><b>Одной из главных функций ОС</b></font><font> является управление всеми устройствами ввода-вывода компьютера. ОС должна передавать устройствам команды, перехватывать прерывания и обрабатывать ошибки; она также должна обеспечивать интерфейс между устройствами и остальной частью системы. В целях развития интерфейс должен быть одинаковым для всех типов устройств (независимость от устройств).</font> </p> <p> <font><b>Устройства ввода-вывода делятся на два типа</b></font><font>: блок - ориентированные и байт - ориентированные устройства. </font><font><b>Блок-ориентированные устройства</b></font><font> хранят информацию в блоках фиксированного размера, каждый из которых имеет свой собственный адрес. Самое распространенное блок-ориентированное устройство – диск</font><font><b>. Байт - ориентированные устройства</b></font><font> не адресуемы и не позволяют производить операцию поиска, они генерируют или потребляют последовательность байтов. Примерами являются терминалы, строчные принтеры, сетевые адаптеры. Однако некоторые внешние устройства не относятся ни к одному классу, например часы, которые, с одной стороны, не адресуемы , а с другой – не порождают потока байтов . Это устройство только выдает сигнал прерывания в некоторые моменты времени.</font> </p> <p> <font>Внешнее устройство обычно состоит из механического и электронного компонента. Электронный компонент называется контроллером устройства или адаптером. Механический компонент представляет собственно устройство. Некоторые контроллеры могут управлять несколькими устройствами. Если интерфейс между контроллером и устройством стандартизован, то независимые производители могут выпускать совместимые как контроллеры , так и устройства.</font> </p> <p> <font><b>Операционная система</b></font><font> обычно имеет дело не с устройством, а с контроллером. Контроллер, как правило, выполняет простые функции, например, преобразует поток бит в блоки, состоящие из байт, и осуществляет контроль и исправление ошибок. Каждый контроллер имеет несколько регистров, которые используются для взаимодействия с центральным процессором. В некоторых компьютерах эти регистры являются частью физического адресного пространства . В таких компьютерах нет специальных операций ввода- вывода. В других компьютерах адреса регистров ввода-вывода, называемых часто портами, образуют собственное адресное пространство за счет введения специальных операций ввода- вывода ( например команд IN и OUT в процессорах i86).</font> </p> <p> <font><b>ОС выполняет ввод - вывод</b></font><font>, записывая команды в регистры контроллера. Например, контроллер гибкого диска IBM PC принимает 15 команд, таких как READ, WRITE, SEEK, FORMAT и т.д. Когда команда принята, процессор оставляет контроллер и занимается другой работой. При завершении команды контроллер организует прерывание для того, чтобы передать управление процессором операционной системе, которая должна проверить результаты операции. Процессор получает результаты и статус устройства, читая информацию из регистров контроллера.</font></p> <p> <font><b>Основная идея организации программного обеспечения ввода-вывода</b></font><font> состоит в разбиении его на несколько уровней, причем нижние уровни обеспечивают экранирование особенностей аппаратуры от верхних, а те, в свою очередь, обеспечивают удобный интерфейс для пользователей.</font> </p> <p> <font>Ключевым принципом является независимость от устройств. Вид программы не должен зависеть от того, читает ли она данные с гибкого или жесткого диска. Очень близкой к идее независимости от устройств является идея единообразного именования, т. е. для именования устройств должны быть приняты единые правила.</font> </p> <p> <font><b>Другим важным вопросом для программного обеспечения ввода-вывода</b></font><font> является обработка ошибок. Вообще говоря, ошибки следует обрабатывать как можно ближе к аппаратуре. Если контроллер обнаруживает ошибку чтения , то он должен попытаться ее скорректировать. Если же это ему не удается, то исправлением ошибок должен заняться драйвер устройства. Многие ошибки могут исчезать при повторных попытках выполнения операций ввода-вывода, например ошибки, вызванные наличием пылинок на головках чтения или на диске. И только если нижний уровень не может справиться с ошибкой, он сообщает об ошибке верхнему уровню.</font> </p> <p> <font><b>Еще один ключевой вопрос</b></font><font> – это использование блокирующих (синхронных) и неблокирующих (асинхронных) передач. Большинство операций физического ввода-вывода выполняется асинхронно – процессор начинает передачу и переходит на другую работу, пока не наступает прерывание. Пользовательские программы намного легче писать, если операции ввода-вывода блокирующие – после команды READ программа автоматически приостанавливается до тех пор, пока данные не попадут в буфер программы. ОС выполняет операции ввода-вывода асинхронно, но представляет их для пользовательских программ в синхронной форме .</font> </p> <p> <font><b>Последняя проблема состоит в</b></font><font> том, что одни устройства являются разделяемыми, а другие – выделенными. Диски – это разделяемые устройства, так как одновременный доступ нескольких пользователей к диску не представляет собой проблему.</font> </p> <p> <font><b>Принтеры</b></font><font> – это выделенные устройства, потому что нельзя смешивать строчки, печатаемые различными пользователями. Наличие выделенных устройств создает для операционной системы некоторые проблемы.</font> </p> <p> <font>Для решения поставленных проблем целесообразно разделить программное обеспечение ввода-вывода на четыре слоя: обработка прерываний; драйверы устройств; независимый от устройств слой операционной системы; пользовательский слой программного обеспечения.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Способы построения ОС. Требования, предъявляемые к ОС: расширяемость, переносимость, совместимость, безопасность.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>При описании операционной системы часто указываются особенности ее структурной организации и основные концепции, положенные в ее основу.</font> </p> <p> <font><b>К таким базовым концепциям относятся:</b></font><font><b> </b></font> </p> <ul>  <li>  <p> <font><b>Способы построения ядра системы</b></font><font> - монолитное ядро или микроядерный подход. Большинство ОС использует </font><font><b>монолитное ядро</b></font><font>, которое компонуется как одна программа, работающая в привилегированном режиме и использующая быстрые переходы с одной процедуры на другую, не требующие переключения из привилегированного режима в пользовательский и наоборот. Альтернативой является построение ОС на базе</font><font><b>микроядра</b></font><font>, работающего также в привилегированном режиме и выполняющего только минимум функций по управлению аппаратурой, в то время как функции ОС более высокого уровня выполняют специализированные компоненты ОС - серверы, работающие в пользовательском режиме. При таком построении ОС работает более медленно, так как часто выполняются переходы между привилегированным режимом и пользовательским, зато система получается более гибкой - ее функции можно наращивать, модифицировать или сужать, добавляя, модифицируя или исключая серверы пользовательского режима. Кроме того, серверы хорошо защищены друг от друга, как и любые пользовательские процессы. </font> </p>  </li><li>  <p> <font><b>Построение ОС на базе объектно-ориентированного подхода</b></font><font> дает возможность использовать все его достоинства, хорошо зарекомендовавшие себя на уровне приложений, внутри операционной системы, а именно: аккумуляцию удачных решений в форме стандартных объектов, возможность создания новых объектов на базе имеющихся с помощью механизма наследования, хорошую защиту данных за счет их инкапсуляции во внутренние структуры объекта, что делает данные недоступными для несанкционированного использования извне, структуризованность системы, состоящей из набора хорошо определенных объектов.</font> </p>  </li><li>  <p> <font><b>Наличие нескольких прикладных сред</b></font><font> дает возможность в рамках одной ОС одновременно выполнять приложения, разработанные для нескольких ОС. Многие современные операционные системы поддерживают одновременно прикладные среды MS-DOS, Windows, UNIX (POSIX), OS/2 или хотя бы некоторого подмножества из этого популярного набора. Концепция множественных прикладных сред наиболее просто реализуется в ОС на базе микроядра, над которым работают различные серверы, часть которых реализуют прикладную среду той или иной операционной системы. </font> </p>  </li><li>  <p> <font><b>Распределенная организация операционной системы</b></font><font> позволяет упростить работу пользователей и программистов в сетевых средах. В распределенной ОС реализованы механизмы, которые дают возможность пользователю представлять и воспринимать сеть в виде традиционного однопроцессорного компьютера. Характерными признаками распределенной организации ОС являются: наличие единой справочной службы разделяемых ресурсов, единой службы времени, использование механизма вызова удаленных процедур (RPC) для прозрачного распределения программных процедур по машинам, многонитевой обработки, позволяющей распараллеливать вычисления в рамках одной задачи и выполнять эту задачу сразу на нескольких компьютерах сети, а также наличие других распределенных служб.</font></p> </li></ul> <p> <font><b>К операционным системам современных компьютеров предъявляется ряд требований</b></font><font>. </font><font><b>Главным требованием</b></font><font> является выполнение основных функций эффективного управления ресурсами и обеспечения удобного интерфейса для пользователя и прикладных программ. Современная ОС должна поддерживать мультипрограммную обработку, виртуальную память, свопинг, развитый интерфейс пользователя (многооконный графический, аудио-, меню-ориентированный и т.д.), высокую степень защиты, удобство работы, а также выполнять многие другие необходимые функции и услуги. Кроме этих требований функциональной полноты, к ОС предъявляется ряд важных эксплуатационных требований.</font></p> <p> <font><b>Расширяемость</b></font><font><b>.</b></font><font> В отличие от аппаратных средств компьютера полезная жизнь операционных систем измеряется десятками лет. Примером может служить ОС UNIX, да и MS-DOS. Операционные системы изменяются со временем эволюционно, как правило, за счет приобретения новых свойств, например, поддержки новых типов внешних устройств или новых сетевых технологий. Если программный код модулей ОС написан таким образом, что дополнения и изменения могут вноситься без нарушения целостности системы, то такую ОС называют расширяемой. </font> </p> <p> <font><font>Сохранение целостности кода, какие бы изменения не вносились в операционную систему, является главной целью разработки.</font></font></p> <p> <font><font>Расширяемость может достигаться за счет модульной структуры ОС, при которой программы строятся из</font></font><font><font></font></font><a href='http://kids.wikimart.ru/toy_creation_development/wooden_toys/wooden/model/33589500?recommendedOfferId=70683692'><font><font>набора</font></font></a><font></font><font>отдельных модулей, взаимодействующих только через функциональный интерфейс. Новые компоненты могут быть добавлены в операционную систему модульным путем, они выполняют свою работу, используя интерфейсы, поддерживаемые существующими компонентами.</font></p> <p> <font><b>Переносимость.</b></font><font> В идеале код ОС должен легко переноситься с процессора одного типа на процессор другого типа и с аппаратной платформы (которые различаются не только типом процессора, но и способом организации всей аппаратуры компьютера) одного типа на аппаратную платформу другого типа. Переносимые ОС имеют несколько вариантов реализации для разных платформ, такое свойство ОС называется также многоплатформенностью.</font> </p> <p> <font>Для легкого переноса ОС при ее разработке должны быть соблюдены следующие требования:</font></p> <p> <font><i>1. Переносимый язык высокого уровня</i></font><font>. Большинство переносимых ОС написано на языке С (</font><a href='http://home.wikimart.ru/furniture/office_furniture/computer_tables/model/42153601?recommendedOfferId=85423793'><font><font>стандарт</font></font></a><font><font></font></font><font><font>ANSI X3.159-1989). Разработчики выбирают С, потом что он стандартизован и потому что С - компиляторы широко доступны. Ассемблер используется только для тех частей системы, которые должны непосредственно взаимодействовать с аппаратурой (например, обработчик прерываний), или для частей, которые требуют максимальной скорости (например, целочисленная арифметика повышенной точности). Однако непереносимый код должен быть тщательно изолирован внутри тех компонентов, где он используется.</font></font></p> <p> <font><font><i>2. Изоляция процессора</i></font></font><font><font>. Некоторые низкоуровневые части ОС должны иметь доступ к процессорно-зависимым структурам данных и регистрам. Однако код, который делает это, должен содержаться в небольших модулях, которые могут быть заменены аналогичными модулями для других процессоров.</font></font></p> <p> <font><font><i>3. Изоляция платформы</i></font></font><font><font>. Зависимость от платформы заключается в различиях между рабочими станциями разных производителей, построенными на одном и том же процессоре (например, MIPS R4000). Должен быть введен программный уровень, абстрагирующий аппаратуру (кэши, контроллеры прерываний ввода-вывода и т. п.) вместе со слоем низкоуровневых программ таким образом, чтобы высокоуровневый код не нуждался в изменении при переносе с одной платформы на другую.</font></font></p> <p> <font><b>Совместимость</b></font><font><b>.</b></font><font> </font><font><font>Одним из аспектов совместимости является способность ОС выполнять программы, написанные для других ОС или для более ранних версий данной операционной системы, а также для другой аппаратной платформы.</font></font></p> <p> <font>Существует несколько 'долгоживущих' популярных ОС (разновидности UNIX, MS-DOS, Windows3.x, Windows NT, OS/2), для которых наработана широкая номенклатура приложений. Для пользователя, переходящего с одной ОС на другую, очень привлекательна возможность выполнить свои приложения в новой операционной системе. Если ОС имеет средства для выполнения прикладных программ, написанных для других операционных систем, то она совместима с этими системами. Следует различать совместимость на уровне двоичных кодов и совместимость на уровне исходных текстов.</font> </p> <p> <font><font>Необходимо разделять вопросы двоичной совместимости и совместимости на уровне исходных текстов приложений. Двоичная совместимость достигается в том случае, когда можно взять исполняемую программу и запустить ее на выполнение на другой ОС. Для этого необходимы: совместимость на уровне команд процессора, совместимость на уровне системных вызовов и даже на уровне библиотечных вызовов, если они являются динамически связываемыми.</font></font></p> <p> <font><font>Совместимость на уровне исходных текстов требует наличия соответствующего компилятора в составе программного обеспечения, а также совместимости на уровне библиотек и системных вызовов. При этом необходима перекомпиляция имеющихся исходных текстов в новый выполняемый</font></font><font><font></font></font><a href='http://garden.wikimart.ru/hotbeds/model/32191633?recommendedOfferId=68354413'><font><font>модуль</font></font></a><font>.</font></p> <p> <font><font>Совместимость на уровне исходных текстов важна в основном для разработчиков приложений, в распоряжении которых эти исходные тексты всегда имеются. Но для конечных пользователей практическое значение имеет только двоичная совместимость, так как только в этом случае они могут использовать один и</font></font><font><font></font></font><font><font>тот же коммерческий продукт, поставляемый в виде двоичного исполняемого кода, в различных операционных средах и на различных машинах.</font></font></p> <p> <font><b>Безопасность (защищенность).</b></font><font> Ни один пользователь не хочет, чтобы другие пользователи ему мешали. ОС должна защищать пользователей и от воздействия чужих ошибок, и от попыток злонамеренного вмешательства (несанкционированного доступа). С этой целью в ОС как минимум должны быть средства аутентификации – определения легальности пользователей, авторизации – предоставления легальным пользователям установленных им прав доступа к ресурсам, и аудита – фиксации всех потенциально опасных для системы событий.</font></p> <p> <font>Свойство безопасности особенно важно для сетевых ОС. В таких ОС к задаче контроля доступа добавляется задача защиты данных, передаваемых по сети.</font></p> <p> <font><font>В большинстве популярных систем гарантируется степень безопасности данных, соответствующая уровню С2 в системе стандартов США. Основы стандартов в области безопасности были заложены '</font></font><font><font><i>Критериями оценки надежных компьютерных систем</i></font></font><font><font>'. Этот документ, изданный в США в 1983 году Национальным центром компьютерной безопасности</font></font><font><font></font></font><font><font><i>(NCSC</i></font></font><font><font></font></font><font><font>-</font></font><font><font></font></font><font><font><i>National Computer Security Center</i></font></font><font><font>), часто называют Оранжевой Книгой. На уровне С2 должны присутствовать</font></font><font><font></font></font><font><font><i>средства секретного входа,</i></font></font><font><font></font></font><font><font>обеспечивающие идентификацию пользователей путем ввода уникального имени и пароля перед тем, как им будет разрешен доступ к системе.</font></font><font><font></font></font></p> <p> <font><font>В соответствии с требованиями Оранжевой Книги, безопасной считается такая система, которая 'посредством специальных механизмов защиты контролирует доступ к информации таким образом, что только имеющие соответствующие полномочия лица или процессы, выполняющиеся от их имени, могут получить доступ на чтение, запись, создание или удаление информации'.</font></font></p> <p> <font>Следует заметить, что в зависимости от области применения конкретной операционной системы может изменяться и состав предъявляемых к ней требований.</font></p> <ol>  <li>  <h1> <font>Дисциплина: Архитектура ЭВМ и систем</font></h1> </li></ol> " ],
 ["Основные понятия и определения, структура ЭВМ.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>ЭВМ (компьютеры) в настоящее время являются основными средствами реализации информационных технологий</font><em><font><b>. </b></font></em><font>При помощи ЭВМ осуществляют сбор, обработку, хранение и передачу информации, представленной в дискретной форме. Очень часто информационные технологии, ориентированные на обработку данных в дискретной форме, называют компьютерными технологиями.</font></p> <p> <font><b>Электронная вычислительная машина</b></font><font> - комплекс технических и программных средств, предназначенный для автоматизации подготовки и решения задач пользователей.</font></p> <p> <font><b>Структура</b></font><font> - совокупность элементов и их связей. Различают структуры технических, программных и аппаратурно-программных средств.</font> </p> <p> <font><b>Архитектура ЭВМ</b></font><font> - это многоуровневая иерархия аппаратурно-программных средств, из которых строится ЭВМ. Каждый из уровней допускает многовариантное построение и применение. Конкретная реализация уровней определяет особенности структурного построения ЭВМ.</font> </p> <p> <font>Одной из важнейших характеристик ЭВМ является ее </font><font><b>быстродействие</b></font><font>, которое характеризуется числом команд, выполняемых ЭВМ за одну секунду. Поскольку в состав команд ЭВМ включаются операции, различные по длительности выполнения и по вероятности их использования, то имеет смысл характеризовать его или средним быстродействием ЭВМ, или предельным (для самых «коротких» операций типа «регистр-регистр»). Современные вычислительные машины имеют очень высокие характеристики по быстродействию, измеряемые сотнями миллионов операций в секунду. Например, новейший микропроцессор Merced, совместного производства фирм Intel и Hewlett-Packard, обладает пиковой производительностью более миллиарда операций в секунду.</font></p> <p> <font>Другой важнейшей характеристикой ЭВМ является</font><font><b>емкость запоминающих устройств</b></font><font>. Этот показатель позволяет определить, какой набор программ и данных может быть одновременно размещен в памяти. В настоящее время персональные ЭВМ теоретически могут иметь емкость оперативной памяти 768Мбайт (chipset BX). Этот показатель очень важен для определения, какие программные пакеты и их приложения могут одновременно обрабатываться в машине.</font></p> <p> <font><b>Надежность</b></font><font> - это способность ЭВМ при определенных условиях выполнять требуемые функции в течение заданного периода времени. Например, у современных HDD среднее время наработки на отказ достигает 500 тыс.ч. (около 60 лет).</font></p> <p> <font><b>Точность</b></font><font> - возможность различать почти равные значения. Точность получения результатов обработки в основном определяется разрядностью ЭВМ, а также используемыми структурными единицами представления информации (байтом, словом, двойным словом). С помощью средств программирования языков высокого уровня этот диапазон может быть увеличен в несколько раз, что позволяет достигать очень высокой точности.</font></p> <p> <font><b>Достоверность</b></font><font> - свойство информации быть правильно воспринятой. Достоверность характеризуется вероятностью получения безошибочных результатов. Заданный уровень достоверности обеспечивается аппаратурно-программными средствами контроля самой ЭВМ. Возможны методы контроля достоверности путем решения эталонных задач и повторных расчетов. В особо ответственных случаях проводятся контрольные решения на других ЭВМ и сравнение результатов.</font></p> <p> <font><b>Структура ЭВМ.</b></font><font><b> Структура компьютера</b></font><font> – это совокупность его функциональных элементов и связей между ними. Структура ЭВМ является одним из определяющих факторов его характеристик.</font><img src='/static/i_0067f68bc106c46b_html_m35e2e35c.png'> </p> <p> <font>Классическая упрощенная структурная схема ЭВМ изображена на рисунке.</font></p> <p> <font><b>Процессор (центральный процессор)</b></font><font> – основной вычислительный блок компьютера, содержит важнейшие функциональные устройства: устройство управления, арифметико-логическое устройство, процессорную память.</font></p> <p> <font><b>Оперативная память</b></font><font> – запоминающее устройство, используемой для оперативного хранения и обмена информацией с другими узлами машины.</font></p> <p> <font><b>Арифметико-логическое устройство (АЛУ)</b></font><font> – предназначено для выполнения арифметических и логических преобразований над данными определенной длины.</font></p> <p> <font>Устройство, обеспечивающее организацию выполнения программы обработки информации и согласованное взаимодействие всех узлов машины в ходе этого процесса – </font><font><b>устройство управления.</b></font></p> <p> <font>Блок устройства управления предназначен для формирования сигналов управления (микроопераций) для выполнения команд программы. Основными блоками устройства управления являются: регистр указателя адреса очередной команды (счетчик команд), регистр команд, блок дешифрации команды, блоки формирования микроопераций, регистр состояния (программы).</font></p> <p> <font>Команды поступают из оперативной памяти на регистр команд устройства управления по шинам передачи команд. Циклы выборки команд управляются не командами, а наборами микроопераций, реализованных аппаратно (прошитых в памяти микропрограмм).</font></p> <p> <font><b>Каналы связи (внутримашинный интерфейс)</b></font><font> - служат для сопряжения центральных узлов машины с ее внешними устройствами.</font></p> <p> <font><b>Внешние устройства</b></font><font> обеспечивают эффективное взаимодействие компьютера с окружающей средой: пользователями, объектами управления, другими машинами (внешняя память и устройства ввода-вывода).</font> </p> <p> <font><b>Внешняя память</b></font><font> – используется для долговременного хранения данных.</font></p> <p> <font>Разнообразные устройства, способные преобразовывать информацию в форму, доступную компьютеру –</font><font><b>устройства ввода.</b></font><font> Устройства, преобразующие результаты компьютерной обработки информации в доступную человеку форму –</font><font><b>устройства вывода.</b></font><font></font> </p> " ],
 ["Иерархия памяти в ВС. Внутренняя память. Организация оперативной памяти, стек, ассоциативная память.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Структуру памяти можно представить в виде:</b></font></p> <p> <font><b>Память</b></font><font> – совокупность отдельных устройств, которые запоминают, хранят, выдают информацию. Отдельные устройства памяти называют </font><font><b>запоминающими устройствами.</b></font><font> Производительность вычислительных систем в значительной мере определяется составом и характеристиками отдельных запоминающих устройств, которые различают по принципу действия, техническим характеристикам, назначениям. </font><font><b>Основные операции с памятью</b></font><font> – процедура записи, процедура чтения (выборки). Процедуры записи и чтения также называют</font><font><b>обращением к памяти</b></font><font>. За одно обращение к памяти «обрабатывается» для различных устройств различные единицы данных (байт, слово, двойное слово, блок). </font><img src='/static/i_0067f68bc106c46b_html_226022df.png'> </p> <p> <font><b>Основные технические характеристики памяти</b></font><font> – емкость (Е), быстродействие (время обращения к запоминающему устройству). </font> </p> <p> <font><b>Во внутренней памяти</b></font><font> записываются коды команд подлежащей выполнению программы. Они последовательно считываются в процессор для анализа (дешифрации) и выполнения. Обращение к внутренней памяти так же производится при выполнении различных команд микропроцессора при указании в команде прямо или косвенно адреса операндов в памяти.</font></p> <p> <font><b>Основная память</b></font><font> обеспечивает хранение информации, которое непосредственно используется процессором (АЛУ, УУ) в ходе выполнения программы. Основная память напрямую связана с процессором, следовательно, ее характеристики самым непосредственным образом влияют на производительность ЭВМ. Быстродействие памяти меньше быстродействия процессора (7 нс – время обращения к памяти, к процессору в 5 раз меньше – 2 нс ). В современных ЭВМ существует сверхоперативная память – буфер между процессором и основной памятью. Она предназначена для согласования скорости работы ЗУ и процессора. КЭШ имеет небольшую емкость.</font> </p> <p> <font><b>Сверхоперативная память</b></font><font> обеспечивает временной хранение активных участков программы, активных участков данных, некоторой служебной информации для управления вычислительным процессом.</font> </p> <p> <font>Обмен между сверхоперативной и основной памятью происходит поблочно. Приблизительно на том же уровне располагается регистр памяти компьютера. Емкость регистра памяти мала, но быстродействие самое высокое и вписано в цикл работы процессора.</font></p> <p> <font>Память большой емкости –</font><font><b>оперативная память</b></font><font>. В современных ЭВМ практически всегда отсутствует. Память большой емкости с процессором не связана. Доступ производится через основную память. Обмен между ней и основной памятью реализуется аппаратными средствами. Это приводит к тому, что увеличивается адресное пространство. В оперативной памяти хранятся не все средства, которые необходимы для решения данной задачи, следовательно, всегда есть внешняя память. Чаще всего это дисковая память. Внешняя память (ВП) обеспечивает хранение всей информации, которая необходима в процессе решения данной задачи. ВП принципиально процессору недоступна. Обмен между ВП и ОП реализуется системами управления памяти (аппаратно- программные средства), которые пользователю недоступны (хотя можно решить такую задачу). ВП имеет емкость на несколько порядков больше, чем у ОП (время обращения к ВП исчисляется в мкс).</font> </p> <p> <font><b>Архивная память</b></font><font>. Емкость – сколько вместится. Время доступа зависит от характеристик (например, говорят о характеристиках дисковода). В современных компьютерах существуют некоторые отдельные виды памяти: буферы различного рода устройств. Для терминала (дисплея) есть свой буфер, каналы обмена имеют свой буфер. Буфер не оказывает значительное влияние на характеристики производительности, но характеристики памяти адаптера оказывают влияние на анимацию.</font> </p> <p> <font><b>Иерархия памяти в конечном итоге позволяет:</b></font> </p> <p> <font>1) повысит производительность процессора в целом </font> </p> <p> <font>2) увеличить пропускную способность памяти ( среднюю скорость обмена)</font> </p> <p> <font>3) предоставить в распоряжение пользователя практически не ограниченную память (виртуальную память)</font> </p> <p> <font>Поскольку характеристики быстродействия различных уровней различны, то при построении памяти требуется согласование пропускных способностей каждого уровня. Достигается это за счет буферизации обмена между разными уровнями. Смысл буферизации заключается в том, что каждом уровне выделяется некоторая область (для «автономного» обмена с дисками без участия процессора). Информационные единицы обмена по мере удаления от процессора увеличиваются.</font></p> <p> <font><b>Оперативная память любого вычислителя всегда строится</b></font><font> из отдельных модулей памяти, которые конструктивно и функционально закончены. Каждый модуль имеет свое собственное электронное обрамление (устройства, которые обеспечивают запись, выборку, чтение). Емкость каждого модуля ОП фиксирована (в виде степени двойки).</font> </p> <p> <font>Структура модуля памяти определяется способом организации ОП (способ адресации).</font> </p> <p> <font><b>Существует 3 разновидности организации памяти:</b></font> </p> <p> <font>1) В адресной памяти, размещение и поиск информации в массиве запоминания, базируется на основе номера (адреса). Массив запоминания элементов содержит N n-разрядных слов, которые пронумерованы (0…N-1). Электронное обрамление включает в себя регистры для хранения адреса памяти, регистр информации (само слово), схемы адресной выборки (адресации), разрядные усилители для чтения и записи.</font></p> <p> <font>2)</font><font><b>Стековая память</b></font><font> является безадресной. Ячейки стековой памяти представляют собой одномерный массив n-разрядных ячеек, в котором соседи связаны друг с другом.</font></p> <p> <font>Для операций с памятью доступна только 0 ячейка. Операция с памятью инициируется сигналом обращения. Каждая операция записи, инициируемая сигналом обращения к памяти, приводит к тому, записанные данные помещаются в 0 ячейку памяти. При этом все ранние записи в памяти слова автоматически сдвигаются на 1 адрес ниже. Операция чтения, инициируемая сигналом обращения, приводит к тому, что на выходе памяти формируется значение слова, находящиеся в 0 ячейке памяти. При этом все имеющиеся слова сдвигаются на одно слово вверх. Счетчик стека нужен только для контроля заполнения и очищения стека. Техническая реализация стековой памяти оказывается сложнее адресной памяти. Стековая память используется достаточно широко (короткий стек из микропрограммирования). Чаще всего применяется не стековая память, а адресное поле, которое функционирует по принципу стека.</font> </p> <p> <font>3)</font><font><b>ассоциативная память</b></font><font><b>.</b></font><font> Исторически последняя. Является представителем многофункциональных запоминающих устройств (возможна обработка данных без процессора в памяти). Отличительная особенность: поиск любой информации в запоминающем модуле (ЗМ) производится не по адресу, а по ассоциативным признакам (признакам опроса). Поиск производится одновременно по всем ячейкам ЗМ.</font></p> <p> <font>У каждой ячейки памяти существует бит занятости (1 - есть или 0 - нет слова). Опрос производится на основе двух признаков: признака ассоциативного опроса (в регистре ассоциативной памяти) и маски, которая находится в регистре маски. Поиск производится по незамаскированным разрядам. Поиск начинается с сигнала опроса (производится опрос всего ЗМ). Результаты опроса фиксируются в регистре связи через комбинационную схему.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Способы организации обмена информацией между оперативной памятью и внешними устройствами.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>В ЭВМ используются два основных способа организации передачи данных</b></font><font> между памятью и периферийными устройствами: программно-управляемая передача и прямой доступ к памяти (ПДП).</font></p> <p> <font><b>Программно-управляемая передача</b></font><font> данных осуществляется при непосредственном участии и под управлением процессора. Например, при пересылке блока данных из периферийного устройства в оперативную память процессор должен выполнить следующую последовательность шагов:</font></p> <ul>  <li>  <p> <font>сформировать начальный адрес области обмена ОП;</font></p>  </li><li>  <p> <font>занести длину передаваемого массива данных в один из внутренних регистров, который будет играть роль счетчика;</font></p>  </li><li>  <p> <font>выдать команду чтения информации из УВВ; при этом на шину адреса из МП выдается адрес УВВ, на шину управления - сигнал чтения данных из УВВ, а считанные данные заносятся во внутренний регистр МП;</font></p>  </li><li>  <p> <font>выдать команду записи информации в ОП; при этом на шину адреса из МП выдается адрес ячейки оперативной памяти, на шину управления - сигнал записи данных в ОП, а на шину данных выставляются данные из регистра МП, в который они были помещены при чтении из УВВ;</font></p>  </li><li>  <p> <font>модифицировать регистр, содержащий адрес оперативной памяти;</font></p>  </li><li>  <p> <font>уменьшить счетчик длины массива на длину переданных данных;</font></p>  </li><li>  <p> <font>если переданы не все данные, то повторить шаги 3-6, в противном случае закончить обмен.</font></p> </li></ul> <p> <font>Как видно, программно-управляемый обмен ведет к нерациональному использованию мощности микропроцессора, который вынужден выполнять большое количество относительно простых операций, приостанавливая работу над основной программой. При этом действия, связанные с обращением к оперативной памяти и к периферийному устройству, обычно требуют удлиненного цикла работы микропроцессора из-за их более медленной по сравнению с микропроцессором работы, что приводит к еще более существенным потерям производительности ЭВМ.</font></p> <p> <font>Альтернативой программно-управляемому обмену служит </font><font><b>прямой доступ к памяти</b></font><font> - способ быстродействующего подключения внешнего устройства, при котором оно обращается к оперативной памяти, не прерывая работы процессора. Такой обмен происходит под управлением отдельного устройства - контроллера прямого доступа к памяти (КПДП).</font> </p> <p> <font>Перед началом работы контроллер ПДП необходимо инициализировать: занести начальный адрес области ОП, с которой производится обмен, и длину передаваемого массива данных. В дальнейшем по сигналу запроса прямого доступа контроллер фактически выполняет все те действия, которые обеспечивал микропроцессор при программно-управляемой передаче.</font></p> <p> <font>Последовательность действий КПДП при запросе на прямой доступ к памяти со стороны устройства ввода-вывода следующая:</font></p> <ol>  <li>  <p> <font>Принять запрос на ПДП (сигнал DRQ) от УВВ.</font></p>  </li><li>  <p> <font>Сформировать запрос к МП на захват шин (сигнал HRQ).</font></p>  </li><li>  <p> <font>Принять сигнал от МП (HLDA), подтверждающий факт перевода микропроцессором своих шин в третье состояние.</font></p>  </li><li>  <p> <font>Сформировать сигнал, сообщающий устройству ввода-вывода о начале выполнения циклов прямого доступа к памяти (DACK).</font></p>  </li><li>  <p> <font>Сформировать на шине адреса компьютера адрес ячейки памяти, предназначенной для обмена.</font></p>  </li><li>  <p> <font>Выработать сигналы, обеспечивающие управление обменом (IOR, MW для передачи данных из УВВ в оперативную память и IOW, MR для передачи данных из оперативной памяти в УВВ).</font></p>  </li><li>  <p> <font>Уменьшить значение в счетчике данных на длину переданных данных.</font></p>  </li><li>  <p> <font>Проверить условие окончания сеанса прямого доступа (обнуление счетчика данных или снятие сигнала запроса на ПДП). Если условие окончания не выполнено, то изменить адрес в регистре текущего адреса на длину переданных данных и повторить шаги 5-8.</font></p> </li></ol> <p> <font>Прямой доступ к памяти позволяет осуществлять параллельно во времени выполнение процессором программы и обмен данными между периферийным устройством и оперативной памятью.</font></p> <p> <font>Обычно программно-управляемый обмен используется в ЭВМ для операций ввода-вывода отдельных байт (слов), которые выполняются быстрее, чем при ПДП, так как исключаются потери времени на инициализацию контроллера ПДП, а в качестве основного способа осуществления операций ввода-вывода используют ПДП. Например, в стандартной конфигурации персональной ЭВМ обмен между накопителями на магнитных дисках и оперативной памятью происходит в режиме прямого доступа.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Классификация систем параллельной обработки.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>В настоящее время тенденция в развитии микропроцессоров и систем, построенных на их основе, направлена на все большее повышение их производительности. Вычислительные возможности любой системы достигают своей наивысшей производительности благодаря двум факторам: использованию высокоскоростных элементов и параллельному выполнению большого числа операций. Направления, связанные с повышением производительности отдельных микропроцессоров, мы рассматривали в предыдущих лекциях, а в этой лекции остановимся на вопросах распараллеливания обработки информации.</font></p> <p> <font><b>Многомашинные вычислительные системы</b></font><font><b></b></font><font>(ММС) появились раньше, чем многопроцессорные. Основные отличия ММС заключаются в организации связей и обмена информацией между ЭВМ комплекса.</font><font></font><font><b>Многомашинная ВС</b></font><font><b></b></font><font>содержит некоторое число компьютеров, информационно взаимодействующих между собой. Машины могут находиться рядом друг с другом, а могут быть удалены друг от друга на некоторое, иногда значительное расстояние (вычислительные сети). В</font><font></font><font><i>многомашинных ВС</i></font><font><i></i></font><font>каждый</font><font></font><a href='http://www.dostavka.ru/HP-Compaq-6200-Pro-id_6673469?partner_id=admitad&amp…ource=admitad&amp;utm_medium=cpa&amp;utm_campaign=&amp;utm_content=6673469'><font><font>компьютер</font></font></a><font></font><font>работает под управлением своей операционной системы (ОС).</font> </p> <p> <font><b>Многопроцессорные системы</b></font><font><b></b></font><font>(МПС) содержат несколько процессоров, информационно взаимодействующих между собой либо на уровне регистров процессорной памяти, либо на уровне ОП. Этот тип взаимодействия используется в большинстве случаев, ибо организуется значительно проще и сводится к созданию общего поля оперативной памяти для всех процессоров. Общий доступ к внешней памяти и устройствам ввода-вывода обеспечивается обычно через каналы ОП. Важным является и то, что многопроцессорная вычислительная система работает под управлением единой ОС, общей для всех процессоров. Это существенно улучшает динамические характеристики ВС, но требует наличия специальной, весьма сложной ОС.</font><font></font></p> <p> <font><b>Существует несколько вариантов классификации систем параллельной обработки данных</b></font><font>. По-видимому, самой ранней и наиболее известной является</font><font><b>классификация архитектур вычислительных систем,</b></font><font> предложенная в 1966 году М. Флинном. Классификация базируется на понятии потока, под которым понимается последовательность элементов, команд или данных, обрабатываемая процессором. На основе числа потоков команд и потоков данных выделяются четыре класса архитектур: SISD, MISD, SIMD, MIMD.</font></p> <p> <font><b>SISD (sINgle INsTRuction sTReam / sINgle data sTReam)</b></font><font> - одиночный поток команд и одиночный поток данных. К этому классу относятся прежде всего классические последовательные машины, или, иначе, машины фон-неймановского типа. В таких машинах есть только один поток команд, все команды обрабатываются последовательно друг за другом и каждая команда инициирует одну операцию с одним потоком данных. Не имеет значения тот факт, что для увеличения скорости обработки команд и скорости выполнения арифметических операций процессор может использовать конвейерную обработку. В таком понимании машины данного класса фактически не относятся к параллельным системам.</font></p> <p> <font><b>SIMD (sINgle INsTRuction sTReam / multIPle data sTReam)</b></font><font> - одиночный поток команд и множественный поток данных. Применительно к одному микропроцессору этот подход реализован в MMX- и SSE- расширениях современных микропроцессоров. Микропроцессорные системы типа SIMD состоят из большого числа идентичных процессорных элементов, имеющих собственную память. Все процессорные элементы в такой машине выполняют одну и ту же программу. Это позволяет выполнять одну арифметическую операцию сразу над многими данными – элементами вектора.</font> </p> <p> <font><b>MISD (multIPe INsTRuction sTReam / sINgle data sTReam )</b></font><font> - множественный поток команд и одиночный поток данных. Определение подразумевает наличие в архитектуре многих процессоров, обрабатывающих один и тот же поток данных. Ряд исследователей к данному классу относят конвейерные машины.</font></p> <p> <font><b>MIMD (multIPe INsTRuction sTReam / multIPle data sTReam )</b></font><font> - множественный поток команд и множественный поток данных. Базовой моделью вычислений в этом случае является совокупность независимых процессов, эпизодически обращающихся к разделяемым данным. В такой системе каждый процессорный элемент выполняет свою программу достаточно независимо от других процессорных элементов. Архитектура MIMD дает большую гибкость: при наличии адекватной поддержки со стороны аппаратных средств и программного обеспечения MIMD может работать как однопользовательская система, обеспечивая высокопроизводительную обработку данных для одной прикладной задачи, как многопрограммная машина, выполняющая множество задач параллельно, и как некоторая комбинация этих возможностей. К тому же архитектура MIMD может использовать все преимущества современной микропроцессорной технологии на основе строгого учета соотношения стоимость/производительность.</font> </p> <p> <font>В многомашинных вычислительных комплексах взаимодействие процессов обработки данных обеспечивается только за счет обмена сигналами прерывания и передачи данных через адаптеры канал – канал или общие внешние запоминающие устройства. Лучшие условия для взаимодействия процессов – когда все процессоры имеют доступ ко всему объему данных, хранимых в оперативных запоминающих устройствах (ОЗУ), и могут взаимодействовать со всеми периферийными устройствами комплекса. Вычислительный комплекс, содержащий несколько процессоров с общей оперативной памятью и периферийными устройствами, называется многопроцессорным.</font></p> <p> <font>Как и любая другая, приведенная выше классификация несовершенна: существуют машины, прямо в нее не попадающие, имеются также важные признаки, которые в этой классификации не учтены. Рассмотрим классификацию многопроцессорных и многомашинных систем на основе другого признака - </font><font><b>степени разделения вычислительных ресурсов системы.</b></font></p> <p> <font><b>В этом случае выделяют следующие 4 класса систем:</b></font></p> <ul>  <li>  <p> <font>системы с симметричной мультипроцессорной обработкой (symmeTRic multIProcessINg), или SMP-системы;</font></p>  </li><li>  <p> <font>системы, построенные по технологии неоднородного доступа к памяти (non-un IForm memory access), или NUMA-системы;</font></p>  </li><li>  <p> <font>кластеры;</font></p>  </li><li>  <p> <font>системы вычислений с массовым параллелизмом (massively parallel processor), или MPP-системы.</font></p> </li></ul> <p> <font>Самым высоким уровнем интеграции ресурсов обладает система с симметричной мультипроцессорной обработкой,</font><font><b>или SMP-система.</b></font></p> <p> <font>В этой архитектуре все процессоры имеют равноправный доступ ко всему пространству оперативной памяти и ввода/вывода. Поэтому SMP-архитектура называется симметричной. Ее интерфейсы доступа к пространству ввода/вывода и ОП, система управления кэш-памятью, системное ПО и т. п. построены таким образом, чтобы обеспечить согласованный доступ к разделяемым ресурсам. Соответствующие механизмы блокировки заложены и в шинном интерфейсе, и в компонентах операционной системы, и при построении кэша. Исчерпание производительности системной шины в SMP-системах при доступе большого числа процессоров к общему пространству оперативной памяти и принципиальные ограничения шинной технологии стали причиной сдерживания роста производительности SMP-систем. На данный момент эта проблема получила два решения. Первое - замена системной шины на высокопроизводительный коммутатор, обеспечивающий одновременный неблокирующий доступ к различным участкам памяти. Второе решение предлагает технология</font><font><b> NUMA.</b></font></p> <p> <font>Система, построенная по технологии</font><font><b>NUMA</b></font><font>, представляет собой набор узлов, каждый из которых, по сути, является функционально законченным однопроцессорным или SMP-компьютером. Каждый имеет свое локальное пространство оперативной памяти и ввода/вывода. Но с помощью специальной логики каждый имеет доступ к пространству оперативной памяти и ввода/вывода любого другого узла. Физически отдельные устройства памяти могут адресоваться как логически единое адресное пространство - это означает, что любой процессор может выполнять обращения к любым ячейкам памяти, в предположении, что он имеет соответствующие права доступа. Поэтому иногда такие системы называются системами с распределенной разделяемой памятью (DSM - disTRibuted shared memory).</font></p> <p> <font>Следующим уровнем в иерархии параллельных систем являются комплексы, также состоящие из отдельных машин, но лишь частично разделяющие некоторые ресурсы. Речь идет о</font><font><b>кластерах.</b></font></p> <p> <font><b>Кластер</b></font><font> представляет собой систему из нескольких компьютеров (в большинстве случаев серийно выпускаемых), имеющих общий разделяемый ресурс для хранения совместно обрабатываемых данных (обычно набор дисков или дисковых массивов) и объединенных высокоскоростной магистралью.</font><font><b>В кластерной системе</b></font><font> некоторое распределенное приложение параллельно на нескольких узлах обрабатывает общий набор данных, как правило, таким образом, чтобы у пользователя возникла иллюзия работы на одной машине.</font></p> <p> <font>Обычно в кластерных системах не обеспечивается единая операционная среда для работы общего набора приложений на всех узлах кластера. То есть каждый компьютер кластера - это автономная система с отдельным экземпляром ОС и своими, принадлежащими только ей системными ресурсами: набором заведенных пользователей, системными буферами, областью свопинга и т. п. Приложение, запущенное на нем, может видеть только общие диски или отдельные участки памяти. На узлах кластера работают специально написанные для такой конфигурации приложения, параллельно обрабатывающие общий набор данных. На каждой из машин они представлены рядом процессов, программ, взаимодействующих с помощью кластерного программного обеспечения. Таким образом, кластерное ПО - это лишь средство для взаимодействия узлов и синхронизации доступа к общим данным. Кластер как параллельная система формируется на прикладном уровне, а не на уровне операционной системы.</font></p> <p> <font>Если в кластере его узлы разделяют некоторые ресурсы, то параллельные системы другого класса - </font><font><b>системы вычислений с массовым параллелизмом (MPP)</b></font><font> - строятся из отдельных полностью независимых компьютеров, соединенных только высокоскоростной магистралью или коммуникационными каналами. Это могут быть либо просто несколько серийно выпускаемых UNIX-машин, соединенных с помощью высокопроизводительной сетевой среды, либо специально сконструированная система из отдельных функциональных блоков, объединенных коммутатором.</font></p> <p> <font>В такой системе адресное пространство состоит из отдельных адресных пространств, которые логически не связаны между собой и доступ к которым не может быть осуществлен аппаратно другим процессором.</font></p> <p> <font>При этом для обмена данными используется механизм передачи сообщений между процессорами. Поэтому эти машины часто называют машинами с передачей сообщений. Пользователь может определить логический номер процессора, к которому он подключен, и организовать обмен сообщениями с другими процессорами.</font></p> " ],
 ["Кластерная архитектура вычислительных систем, основные понятия", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><font><b>Кластер</b></font></font><font><sub><font></font></sub></font><font><font>–</font></font><font><sub><font></font></sub></font><font><font>это группа взаимно соединенных вычислительных систем (узлов), работающих совместно, составляя единый вычислительный ресурс и создавая иллюзию наличия единственной ВМ. В качестве узла кластера может выступать как однопроцессорная ВМ, так и ВС типа</font></font><font><font>S</font></font><font><font>M</font></font><font><font>P</font></font><font><font>или</font></font><font><font>M</font></font><font><font>PP</font></font><font><font>. Каждый узел в состоянии функционировать самостоятельно и отдельно от кластера. Архитектура кластерных вычислений сводится к объединению нескольких уз- лов высокоскоростной сетью. Наряду с термином «кластерные вычисления» часто применяются такие названия, как:</font></font><font><font><i>кластер рабочих станций</i></font></font><font><font> (workstation cluster),</font></font><font><font><i>гипервычисления</i></font></font><font><font>(</font></font><font><font>hypercomputing</font></font><font><font>),</font></font><font><font><i>параллельные вычисления на базе сети</i></font></font><font><font> (</font></font><font><font>network</font></font><font><font>-</font></font><font><font>based</font></font><font><font> </font></font><font><font>concurrent</font></font><font><font> </font></font><font><font>computing</font></font><font><font>).</font></font></p> <p> <font><font><b>Перед кластерами ставятся две задачи: </b></font></font><font><font>достичь большой вычислительной мощности; обеспечить повышенную надежность ВС.</font></font></p> <p> <font><font>Первый коммерческий кластер создан корпорацией DEC в начале 80-х годов прошлого века.</font></font></p> <p> <font><font>В качестве узлов кластеров могут использоваться как одинаковые ВС (гомогенные кластеры), так и разные (гетерогенные кластеры). По своей архитектуре кластерная ВС является слабо связанной системой.</font></font></p> <p> <font><font><b>Преимущества, достигаемые с помощью кластеризации:</b></font></font></p> <ul>  <li>  <p><font><font><b>Абсолютная масштабируемость</b></font></font><font><font>. Возможно создание больших кластеров, превосходящих по вычислительной мощности даже самые производительные одиночные ВМ. Кластер в состоянии содержать десятки узлов, каждый из которых представляет собой мультиплексор.</font></font></p>  </li><li>  <p><font><font><b>Наращиваемая масштабируемость</b></font></font><font><font>. Кластер строится так, что его мож- но наращивать, добавляя новые узлы небольшими порциями.</font></font></p>  </li><li>  <p><font><font><b>Высокий коэффициент готовности</b></font></font><font><font>. Поскольку каждый узел кластера</font></font><font><sub><font></font></sub></font><font><font>– самостоятельная ВМ или ВС, отказ одного из узлов не приводит к поте- ре работоспособности кластера. Во многих системах отказоустойчивость автоматически поддерживается программным обеспечением.</font></font></p>  </li><li>  <p><font><font><b>Превосходное соотношение цена/производительность</b></font></font><font><font>. Кластер любой производительности можно создать, соединяя стандартные ВМ, при этом его стоимость будет ниже, чем у одиночной ВМ с эквивалентной вычислительной мощностью.</font></font></p> </li></ul> <p> <font><font><b>Отказоустойчивые кластеры</b></font></font></p> <p> <font>Обозначаются аббревиатурой HA (</font><a href='http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA'><font><font>англ.</font></font></a><font></font><font><i>High Availability</i></font><font> — высокая доступность). Создаются для обеспечения</font><font></font><a href='http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D1%81%D0%BE%D0%BA%D0%B0%D1%8F_%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%BD%D0%BE%D1%81%D1%82%D1%8C'><font><font>высокой доступности</font></font></a><font></font><font>сервиса, предоставляемого кластером. Избыточное число узлов, входящих в кластер, гарантирует предоставление сервиса в случае отказа одного или нескольких серверов. Типичное число узлов — два, это минимальное количество, приводящее к повышению доступности. Создано множество программных решений для построения такого рода кластеров.</font></p> <p> <font><b>Отказоустойчивые кластеры и системы вообще строятся по трем основным принципам:</b></font></p> <ul>  <li>  <p> <font><b>с холодным резервом</b></font><font></font><font>или</font><font></font><font><b>активный/пассивный.</b></font><font></font><font>Активный узел выполняет запросы, а пассивный ждет его отказа и включается в работу, когда таковой произойдет. Пример — резервные сетевые соединения, в частности,</font><font></font><a href='http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%…7%D1%83%D1%8E%D1%89%D0%B5%D0%B3%D0%BE_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%B0'><font><font>Алгоритм связующего дерева</font></font></a><font>. Например связка</font><font></font><a href='http://ru.wikipedia.org/wiki/DRBD'><font><font>DRBD</font></font></a><font></font><font>и</font><font></font><a href='http://ru.wikipedia.org/w/index.php?title=HeartBeat&amp;action=edit&amp;redlink=1'><font><font>HeartBeat</font></font></a><font>.</font></p>  </li><li>  <p> <font><b>с горячим резервом</b></font><font></font><font>или</font><font></font><font><b>активный/активный.</b></font><font></font><font>Все узлы выполняют запросы, в случае отказа одного нагрузка перераспределяется между оставшимися. То есть</font><font></font><a href='http://ru.wikipedia.org/wiki/%D0%9A%D0%BB%D0%B0%D1%81%D1%82%D0%B5%D1%80_(%D…B.D0.B5.D0.BD.D0.B8.D1.8F_.D0.BD.D0.B0.D0.B3.D1.80.D1.83.D0.B7.D0.BA.D0.B8'><font><font>кластер распределения нагрузки</font></font></a><font></font><font>с поддержкой перераспределения запросов при отказе. Примеры — практически все кластерные технологии, например,</font><font></font><a href='http://en.wikipedia.org/wiki/en:Microsoft_Cluster_Server'><font><font>Microsoft Cluster Server</font></font></a><font>. OpenSource проект</font><font></font><a href='http://ru.wikipedia.org/wiki/OpenMosix'><font><font>OpenMosix</font></font></a><font>.</font></p>  </li><li>  <p> <font><b>с модульной избыточностью.</b></font><font></font><font>Применяется только в случае, когда простой системы совершенно недопустим. Все узлы одновременно выполняют один и тот же запрос (либо части его, но так, что результат достижим и при отказе любого узла), из результатов берется любой. Необходимо гарантировать, что результаты разных узлов всегда будут одинаковы (либо различия гарантированно не повлияют на дальнейшую работу). Примеры —</font><font></font><a href='http://ru.wikipedia.org/wiki/RAID'><font><font>RAID</font></font></a><font></font><font>и</font><font></font><a href='http://en.wikipedia.org/wiki/en:Triple_modular_redundancy'><font><font>Triple modular redundancy</font></font></a><font>.</font></p> </li></ul> <p> <font>Конкретная технология может сочетать данные принципы в любой комбинации. Например,</font><font></font><a href='http://ru.wikipedia.org/w/index.php?title=Linux-HA&amp;action=edit&amp;redlink=1'><font><font>Linux-HA</font></font></a><font></font><font>поддерживает режим</font><font></font><font><i>обоюдной поглощающей конфигурации</i></font><font></font><font>(</font><a href='http://ru.wikipedia.org/wiki/%D0%90%D0%BD%D0%B3%D0%BB%D0%B8%D0%B9%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA'><font><font>англ.</font></font></a><font></font><font><i>takeover</i></font><font>), в котором критические запросы выполняются всеми узлами вместе, прочие же равномерно распределяются между ними.</font> </p> <p> <font><b>Кластеры с балансировкой нагрузки</b></font></p> <p> <font>Кластеры с балансировкой нагрузки (load-balancing clusters) обеспечивают более эффективное использование ресурсов вычислительной системы. В случае высоких нагрузок на серверы, запросы перенаправляются на наименее загруженные серверы.</font></p> <p> <font><i>Load balancing clusters</i></font><font> распределяют запросы через один или несколько</font><font><u>входных узлов</u></font><font> </font><font><i>(</i></font><font><i>front</i></font><font><i>-</i></font><font><i>ends</i></font><font><i>)</i></font><font>, которые перенаправляют их на обработку в</font><font><u>вычислительные узлы</u></font><font></font><font><i>(</i></font><font><i>back</i></font><font><i>-end </i></font><font><i>servers</i></font><font><i>).</i></font></p> <p> <font>Первоначальная цель такого кластера — производительность, однако, в них часто используются также и методы, повышающие надёжность. Подобные конструкции называются серверными фермами</font><font><i>(</i></font><font><i>server</i></font><font><i> </i></font><font><i>farms</i></font><font><i>)</i></font><font>. </font> </p> <p> <font>Программное обеспечение может быть как коммерческим (OpenVMS Cluster, Platform LSF HPC, Sun Grid Engine, Moab Cluster Suite, Maui Cluster Scheduler), так и бесплатным (Linux Virtual Server, Mosix).</font></p> <p> <font><b>Особенности кластеров с балансировкой нагрузки: </b></font><font>Вертикальная и горизонтальная масштабируемость, Равномерное распределение нагрузки, Добавление серверов (масштабируемость) без остановки работы, Сохранение работоспособности при отказе более одного сервера за счет большего количества узлов в системе.</font></p> <p> <font><b>Системы и сети хранения кластерных систем.</b></font></p> <p> <font>Кластер с общей </font><font><b>системой хранения данных</b></font><font> на базе интерфейса Fibre Channel является отказоустойчивой системой с высокоскоростным доступом с хранилищам данных и возможностью дальнейшего масштабирования.</font></p> <p> <font>FC-кластер с прямым подключением устройств хранения включает два вычислительных узла, соединенные с дисковыми массивами двумя избыточными высокоскоростными каналами Fibre Channel, при этом построение сети хранения данных (storage area network) не требуется. Программное обеспечение каждого узла в кластере анализирует подключение к системе хранения данных и может перенаправить трафик по резервному каналу в случае отказа FC-адаптера, процессора обработки данных или кабельной инфраструктуры.</font></p> <p> <font><b>Данная система может работать в двух возможных конфигурациях:</b></font></p> <p> <font>-</font><font><b>Active-active.</b></font><font> В этой конфигурации на каждом узле кластера должен работать свой виртуальный сервер. Если какое-либо приложение запущено на одном из серверов, другой в это время может не ждать, пока откажет первый сервер, а выполнять свои собственные приложения. Каждый из узлов кластера в этом случае предоставляет функции отказоустойчивости – если произойдет отказ первого сервера, все приложения мигрируют с него на второй сервер. При этом вычислительные мощности серверов должны быть подобраны с запасом, чтобы иметь возможность миграции приложений с отказавшего узла.</font></p> <p> <font><b>- Active-passive.</b></font><font> Конфигурация active/passive представляет собой отказоустойчивый кластер, в котором один из узлов (активный) исполняет приложение, а другой (пассивный) – находится в резерве на случай отказа первого. Эта конфигурация является более дорогостоящей в соотношении цена/производительность, поскольку один из серверов постоянно находится в ожидании. Данное решение предпочтительно для критичных к отказу бизнес-задач и позволяет использовать все вычислительные ресурсы резервного сервера при отказе основного.</font></p> <p> <font>Кластерные системы могут быть интегрированы</font><font><b>в сети хранения данных</b></font><font> (storage area network, SAN). Такие сети объединяют различные вычислительные системы, системы резервного копирования и централизованные системы хранения данных и строятся на базе коммутаторов Fiber Channel либо фабрик Fiber Channel (directors).</font></p> <p> <font><b>Кластеры с подключенными через сеть SAN</b></font><font> хранилищами данных представляют собой развитие кластерных конфигураций с непосредственным подключением систем хранения по технологии Fiber Channel. Такие системы позволяют добиться большей легкости управления данными и масштабируемости решений. Они также дают возможность централизованно осуществлять резервное копирование данных, используемых различными кластерами и одиночными серверами, на общие ленточные библиотеки. При этом, учитывая объем и важность информации, «циркулирующей» в подобных централизованных сетях хранения, кластерные конфигурации с системами хранения данных, подключаемыми через сеть SAN, строятся на основе резервированных каналов и отказоустойчивых фабрик коммутаторов Fibre Channel.</font></p> <p> <font>При необходимости расширения емкости устройств хранения, в подобную кластерную конфигурацию может быть добавлено несколько систем хранения данных SAN.</font></p> <ol>  <li>  <h1> <font>Дисциплина: Представление знаний в информационных системах</font></h1> </li></ol> " ],
 ["Реляционные модели представления знаний и соответствующие способы рассуждений, фреймы, семантические сети.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Представление знаний</b></font><font> есть процесс, конечная цель которого - представление информации (семантического смысла, значения) в виде информативных сообщений (синтаксических форм): фраз устной речи, предложений письменной речи, страниц книги, понятий справочника, объектов географической карты, мазков и персонажей картины и т.п.</font></p> <p> <font>Модели представления знаний, состоящие из связанных друг с другом списочных структур получили название</font><font><b>реляционных</b></font><font> (от англ. relation — связь). В реляционных моделях удается представить более сложные области знаний. В них каждый из аспектов может рассматриваться как некоторый автономный блок, внутри которого допускается производить изменения, не затрагивая других областей и не внося при этом противоречий в общую картину знаний. Удобным средством является комбинация устойчивых и изменяемых знаний. Не вызывает принципиальных трудностей задача пополнения реляционной модели новыми знаниями путем расширения уже имеющихся списков и добавления новых списочных структур.</font></p> <p> <font><b>Семантическая сеть</b></font><font> - это ориентированная графовая структура, каждая вершина которой отображает некоторое понятие (объект, процесс, ситуацию), а ребра графа соответствуют отношениям типа 'это есть', 'принадлежать', 'быть причиной', 'входить в', 'состоять из', 'быть как' и аналогичным между парами понятий. На семантических сетях используются специальные процедуры вывода: пополнение сети, наследование свойств, поиск по образцу и др.</font></p> <p> <font><font>Вершинам семантической сети соответст­вуют понятия, события и свойства.</font></font></p> <p> <font><font><u><b>Понятия</b></u></font></font><font><font> представляют собой сведения об абстрактных или физических объектах предметной области (реального мира).</font></font></p> <p> <font><font><u><b>События</b></u></font></font><font><font><b> </b></font></font><font><font>представляют собой действия происходящие в реальном мире и определяются:</font></font></p> <p> <font><font>- указание типа действия;</font></font></p> <p> <font><font>- указание ролей, которые играют объекты в этом действии.</font></font></p> <p> <font><font><u><b>Свойства</b></u></font></font><font><font><b> </b></font></font><font><font>используются для уточнения понятий и событий. Примени­тельно к понятиям они описывают их особенности и характеристики (цвет, размер, качество), а применительно к событиям - продолжительность, время, место.</font></font></p> <p> <font><font><u>Дуги</u></font></font><font><font> графа семантической сети отображают многообразие семантиче­ских отношений, которые условно можно разделить на четыре класса:</font></font></p> <p> <font>1.</font><font><i><u><b>Лингвистические отношения</b></u></i></font><font><i> </i></font><font>отображают смысловую взаимосвязь меж­ду событиями, между событиями и понятиями или свойствами.</font><font><b>Лингвистиче­ские отношения бывают:</b></font><font> глагольные (время, вид, род, залог, наклонение); атрибутивные (цвет, размер, форма); падежными (связи понятий, событий и свойств с действием – агент, объект, источник, место, цель, время и т.д.).</font></p> <p> <font>2.</font><font><i><u><b>Логические отношения</b></u></i></font><font><i> </i></font><font>- это операции, используемые в исчислении вы­сказываний (алгебра логики): дизъюнкция, конъюнкция, инверсия, импликация.</font></p> <p> <font>3.</font><font><i><u><b>Теоретико-множественные</b></u></i></font><font><i> -</i></font><font>это отношение подмножества, отношение части целого, отношение множества и элемента. Примерами таких отношений являются</font><font>IS</font><font>-</font><font>A</font><font>, </font><font>PART</font><font>-</font><font>OF</font><font>.</font></p> <p> <font>4.</font><font><i><u><b>Квантифииироеанные отношения</b></u></i></font><font><i> -</i></font><font>это логические кванторы общности и существования. Они используются для представления таких знаний как «Лю­бой станок надо ремонтировать», «Существует работник А, обслуживающий склад Б».</font></p> <p> <font><b>Необходимо отметить ряд преимуществ семантической сети:</b></font></p> <p> <font>- описание понятий и событий производится на уровне, очень близком к естественному языку;</font></p> <p> <font>- обеспечивается возможность сцепления различных фрагментов сети;</font></p> <p> <font>- отношение между понятиями и событиями образуют достаточно не­большое и хорошо формализованное множество;</font></p> <p> <font>- для каждой операции над данными и знаниями можно выделить из полной сети, представляющей всю семантику (или все знания), неко­торый ее участок, который охватывает необходимые в данном запро­се смысловые характеристики.</font></p> <p> <font><b>Недостаток таких сетей</b></font><font> - сложность вывода, поиска подграфа, соответствующего запросу.</font></p> <p> <font><b>Характерная особенность семантических сетей</b></font><font> - наличие трех типов отношений:</font></p> <ul>  <li>  <p> <font>класс - элемент класса (часть - целое, класс - подкласс, элемент - множество и т.п.);</font> </p>  </li><li>  <p> <font>свойство - значение (иметь свойство, иметь значение и т.п.); </font> </p>  </li><li>  <p> <font>пример элемента класса (элемент за, элемент под, раньше, позже и др.).</font></p> </li></ul> <p> <font><b>Фреймовая модель</b></font><font> представления знаний задает остов описания класса объектов и удобна для описания структуры и характеристик однотипных объектов (процессов, событий) описываемых фреймами - специальными ячейками (шаблонами понятий) фреймовой сети (знания).</font></p> <p> <font><b>Фрейм</b></font><font>- концентратор знаний и может быть активизирован как отдельный автономный элемент и как элемент сети. Фрейм - это модель кванта знаний (абстрактного образа, ситуации), активизация фрейма аналогична активизации этого кванта знаний - для объяснения, предсказания и т.п. Отдельные характеристики (элементы описания) объекта называются слотами фрейма. Фреймы сети могут наследовать слоты других фреймов сети.</font><font><font>Фрейм можно рассматривать как фрагмент семантической сети, предна­значенный для описания понятий со всей совокупностью присущих им свойств.</font></font></p> <p> <font>Различают фреймы-образцы (прототипы), хранящиеся в базе знаний, и фреймы-экземпляры, создаваемые для отображения реальных ситуаций для конкретных данных.</font></p> <p> <font><font>Каждый узел во фреймовой системе выглядит следующим образом:</font></font></p> <p> <font><font>В каждом узле понятия определяются набором атрибутов и их значе­ниями, которые содержатся в слотах фрейма.</font></font><img src='/static/i_0067f68bc106c46b_html_m7751c47f.png'></p> <p> <font><font><i>Слот</i></font></font><font><font> - это атрибут, связанный с узлом в системе, основанной на фрей­мах.</font></font></p> <p> <font><font>Слот является составляющей фрейма. Имя слота соответствует типу ат­рибута, значением слота может быть экземпляр атрибута, другой фрейм или фасет.</font></font></p> <p> <font><font>С каждым слотом может быть связана одна или несколько процедур, ко­торые выполняются, когда изменяются значения слотов.</font></font></p> <p> <font><font>Неопределенность описания знаний реализуется в результате неполного заполнения всех слотов. Фреймовая модель способна делать предположения о значениях данных на основе механизма наследования свойств в иерархии обобщения.</font></font></p> <p> <font>Фреймовое представление данных достаточно универсальное. Оно позволяет отображать знания с помощью:</font></p> <ul>  <li>  <p> <font>фрейм-структур - для обозначения объектов и понятий;</font> </p>  </li><li>  <p> <font>фрейм-ролей - для обозначения ролевых обязанностей;</font> </p>  </li><li>  <p> <font>фрейм-сценариев - для обозначения поведения;</font> </p>  </li><li>  <p> <font>фрейм-ситуаций - для обозначения режимов деятельности, состояний.</font></p> </li></ul> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Базовые принципы и понятия технологии разработки ООИС на основе UML 2. Причины неудачных проектов. Понятие модели. Отсутствие моделей при разработке ПО. Понятие визуального проектирования. Основные понятия визуального моделирования.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font></font><font><font><i><b>Unified Modeling Language</b></i></font></font><font><font><b> —</b></font></font><font><font> унифицированный язык моделирования для описания, визуализации и документирования объектно-ориентированных систем в процессе их анализа и проектирования</font></font></p> <p> <font><font><b>Язык </b></font></font><font><font><b>UML</b></font></font><font><font><b> </b></font></font><font><font>предоставляет стандартный способ написания проектной документации на системы, включая концептуальные аспекты, такие как бизнес процессы и функции системы, а также конкретные аспекты, такие как выражения языков программирования, схемы баз данных и повторно используемые компоненты </font></font><font><font>программного обеспечения</font></font><font><font>. </font></font> </p> <p> <font><font><b>Причины неудачных проектов</b></font></font></p> <ul>  <li>  <p><font><font>Недостаточно адекватное управление требованиями</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Несогласованность требований, проектных решений и реализации</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Жесткая архитектура программного обеспечения</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Нарастающая сложность программного обеспечения</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Неточная и противоречивая коммуникация</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Недостаточное тестирование</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Субъективное отношение к приоритетам отдельных артефактов проекта</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Игнорирование рисков и отсутствие процедур управления рисками</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Бесконтрольное внесение изменений в артефакты проекта</font></font></p> </li></ul> <ul>  <li>  <p><font><font>Недостаточное использование</font></font><font><font>CASE</font></font><font><font>-средств и средств поддержки отдельных этапов проекта</font></font></p> </li></ul> <p> <font><b>Под моделью</b></font><font>в общем случае понимается формализованное описание системы на определенном уровне абстракции. Каждая модель определяет конкретный аспект системы, использует набор диаграмм и документов заданного формата, а также отражает точку зрения и является объектом деятельности различных людей с конкретными интересами, ролями или задачами.</font> </p> <p> <font><font><b>Отсутствие моделей</b></font></font></p> <ul>  <li>  <p><font>Не позволяет справиться с растущей сложностью разрабатываемых программных систем</font></p>  </li><li>  <p><font>Не позволяет эффективно управлять разработкой в условиях изменяющихся требований</font></p> </li></ul> <ul>  <li>  <p><font>Создает барьеры непонимания: аналитик не понимает руководителя проекта, разработчик – аналитика, тестировщик – разработчика и пр.</font></p> </li></ul> <ul>  <li>  <p><font>Не позволяет обеспечить контроль изменений в процессе выполнения работ</font></p> </li></ul> <ul>  <li>  <p><font>Не позволяет избежать субъективности в оценке качества разрабатываемых продуктов</font></p> </li></ul> <ul>  <li>  <p><font>Модель </font><font>(model) — абстракция физической системы, рассматриваемая с определенной точки зрения и представленная на некотором языке или в графической форме</font></p> </li></ul> <p> <font><b>Визуальное моделирование</b></font><font>есть моделирование с использованием некоторой графической нотации.</font></p> <p> <font><b>Объектно-ориентированное визуальное моделирование</b></font><font> призвано понизить сложность создания ПО, повысить удельный вес и качество анализа и проектирования.</font></p> <p> <font><b>Графические (визуальные) модели</b></font><font> представляют собой средства для визуализации, описания, проектирования и документирования архитектуры системы. </font> </p> <p> <font><b>Основные понятия визуального моделирования</b></font></p> <ul>  <li>  <p><font>Нотация</font><font> – система условных обозначений для графического представления визуальных моделей</font></p> </li></ul> <ul>  <li>  <p><font>Семантика</font><font> – система правил и соглашений, определяющая смысл и интерпретацию конструкций некоторого языка</font></p> </li></ul> <ul>  <li>  <p><font>Методология</font><font> – совокупность принципов моделирования и подходов к логической организации методов и средств разработки моделей</font></p> </li></ul> <ul>  <li>  <p><font>CASE (Computer Aided Software Engineering) – м</font><font>етодология разработка программного обеспечения, основанная на комплексном использовании компьютеров не только для написания исходного кода, но и для анализа и моделирования соответствующей предметной области</font></p> </li></ul> <ul>  <li>  <p> <font>CASE-средства</font><font> (CASE-</font><font>tools</font><font>) – программное обеспечение, которое предназначено для разработки визуальных моделей программных систем и генерации исходного кода или схемы базы данных на некотором языке</font></p> </li></ul> " ],
 ["Диаграмма вариантов использования языка", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Диаграмма вариантов использования</b></font><font> - диаграмма, на которой изображаются варианты использования проектируемой системы, заключенные в границу системы, и внешние актеры, а также определенные отношения между актерами и вариантами использования.</font></p> <p> <font><b>Диаграмма вариантов использования</b></font><font> - это исходное концептуальное представление или концептуальная модель системы в процессе ее проектирования и разработки. </font><font><b>Создание диаграммы вариантов использования имеет следующие цели:</b></font></p> <ul>  <li>  <p> <font>Определить общие границы и контекст моделируемой предметной области на начальных этапах проектирования системы</font></p>  </li><li>  <p> <font>Сформулировать общие требования к функциональному поведению проектируемой системы</font></p>  </li><li>  <p> <font>Разработать исходную концептуальную модель системы для ее последующей детализации в форме логических и физических моделей</font></p>  </li><li>  <p> <font>Подготовить исходную документацию для взаимодействия разработчиков системы с ее заказчиками и пользователями</font></p> </li></ul> <p> <font><b>Актер (actor)</b></font><font> - любая внешняя по отношению к проектируемой системе сущность, которая взаимодействует с системой и использует ее функциональные возможности для достижения определенных целей или решения частных задач.</font><font><i>Примеры актеров</i></font><font>: кассир, клиент банка, банковский служащий, президент, продавец магазина, менеджер отдела продаж, пассажир авиарейса, водитель автомобиля, администратор гостиницы, сотовый телефон.</font></p> <p> <br> </p> <p> <font><font>Графически Актер изображается либо '</font></font><font><font><i>человечком</i></font></font><font><font> ', подобным тем, которые мы рисовали в детстве, изображая членов своей семьи, либо</font></font><font><font><i>символом класса с соответствующим стереотипом</i></font></font><font><font>, как показано на рисунке. Обе формы представления имеют один и тот же смысл и могут использоваться в диаграммах. 'Стереотипированная' форма чаще применяется для представления системных Актеров или в случаях, когда Актер имеет свойства и их нужно отобразить.</font></font><img src='/static/i_0067f68bc106c46b_html_m23a2d027.png'></p> <p> <font><font><b>Прецедент (вариант использования - use case)</b></font></font><font><font> - описание множества последовательных событий (включая варианты), выполняемых системой, которые приводят к наблюдаемому Актером результату. Прецедент представляет поведение сущности, описывая взаимодействие между Актерами и системой. Прецедент не показывает, 'как' достигается некоторый результат, а только 'что' именно выполняется.</font></font></p> <p> <font><font>Прецеденты обозначаются очень простым образом - в виде эллипса, внутри которого указано его имя. Имя прецедента обычно намного длиннее имен других элементов модели. Почему это так, в принципе, понятно: имя прецедента описывает взаимодействие Актера с системой, говорит о том, какими сообщениями они обмениваются между собой.</font></font><font><font><font> </font></font></font><font><font><i>Прецеденты и Актеры соединяются с помощью линий</i></font></font><font><font>. Часто на одном из концов линии изображают</font></font><font><font><i>стрелку</i></font></font><font><font>, причем</font></font><font><font><i>направлена она к тому, у кого запрашивают сервис</i></font></font><font><font>, другими словами, чьими услугами пользуются.</font></font><img src='/static/i_0067f68bc106c46b_html_7df7e7e5.png'></p> <p> <font><font><b>Отношения на диаграмме вариантов использования</b></font></font></p> <p> <font><font><i><b>- Ассоциация</b></i></font></font><font><font><b>(association)</b></font></font><font><font> является одним из фундаментальных понятий в языке UML 2.х и может использоваться на различных канонических диаграммах при построении визуальных моделей. Применительно к диаграммам вариантов использования отношение ассоциации может служить только для обозначения взаимодействия актера с вариантом использования.</font></font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_12a74a1c.gif'></p> <p> <font><font><b>- Отношение</b></font></font><font><font><i><b>включения</b></i></font></font><font><font><b> </b></font></font><font><font><i><b>(include)</b></i></font></font><font><font> специфицирует тот факт, что некоторый вариант использования содержит поведение, определенное в другом варианте использования</font></font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m5da8380a.gif'></p> <ul>  <li>  <p> <font><font><b>Отношение </b></font></font><font><font><i><b>расширения (extend)</b></i></font></font><font><font> определяет взаимосвязь одного варианта использования с некоторым другим вариантом использования, функциональность или поведение которого задействуется первым не всегда, а только при выполнении некоторых дополнительных условий</font></font></p> </li></ul> <p> <img src='/static/i_0067f68bc106c46b_html_3389ba0f.gif'></p> <ul>  <li>  <p> <font><font><i><b>Отношение</b></i></font></font><font><font><b> </b></font></font><font><font><i><b>обобщения</b></i></font></font><font><font><b> </b></font></font><font><font><i><b>(generalization relationship)</b></i></font></font><font><font> предназначено для спецификации того факта, что один элемент модели является специальным или частным случаем другого элемента модели</font></font></p> </li></ul> <p> <img src='/static/i_0067f68bc106c46b_html_dd695f3.gif'></p> <p> <font><b>Формализация функциональных требований к системе с помощью диаграммы вариантов использования</b></font></p> <p> <font>Отдельные варианты использования могут применяться как для спецификации требований к проектируемой системе, так и для документирования процесса поведения имеющейся системы.</font></p> <p> <font><b>Требование (requirement</b></font><font>) - желательное свойство, характеристика или условие, которым должна удовлетворять система в процессе своей эксплуатации.</font></p> <p> <font>Применительно к программным системам предложена следующая классификация требований, которая получила название модели FURPS+, что соответствует первым буквам соответствующих категорий требований на английском языке:</font></p> <ul>  <li>  <p> <font><b>функциональные требования (Functionality)</b></font><font> - определяют действия, которые должна быть способна выполнить система, без рассмотрения физических особенностей их реализации. Тем самым функциональные требования определяют внешнее поведение системы. Эти функциональные требования представляют основные характеристики системы, которые известны из предметной области, или технически ориентированные требования такие, как аудирования, лицензирования, локализации, справки, печати, безопасности, управления системой.</font></p>  </li><li>  <p> <font><b>требования удобства использования (Usability)</b></font><font> - это метод, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Требования юзабилити (эргономичности, удобства использования) включают требования, основанные на человеческих факторах и вопросах пользовательского интерфейса, таких, как доступность, эстетичность интерфейса, согласованность в пределах пользовательского интерфейса.</font></p>  </li><li>  <p> <font><b>требования надежности (Reliability) -</b></font><font>состоит в проверке соответствия изделия заданным требованиям по надежности. Требования надежности включают такие аспекты, как готовность, пригодность, точность, предсказуемость, частота отказов или восстанавливаемость после сбоев или аварийных остановок.</font></p>  </li><li>  <p> <font><b>требования производительности (Performance).</b></font><font>Требования производительности направлены на такие аспекты, как пропускная способность системы, время отклика системы, ресурсоемкость.</font></p>  </li><li>  <p> <font><b>требования возможности сопровождения (Supportability). </b></font><font>Требования сопровождаемости включают такие требования, как совместимость, способность к тестированию, адаптации, управлению, конфигурированию, установки, масштабированию, локализации и т.д.</font></p> </li></ul> <p> <font>Центральное место среди указанных требований</font><font><b>занимают функциональные</b></font><font>, которые специфицируют особенности реализации отдельных бизнес-процессов моделируемой системы. В контексте моделей языка UML именно функциональные требования должны служить исходной информацией для построения диаграмм вариантов использования. Однако графических средств языка UML на практике оказывается недостаточно для спецификации функциональных требований.</font></p> <p> <font><font>Следует отметить, что одним из требований языка</font></font><font><font></font></font><font><font><i>UML</i></font></font><font><font></font></font><font><font>является </font></font><font><font><b>самодостаточность диаграмм</b></font></font><font><font>для представления информации о моделях проектируемых систем. Однако большинство разработчиков и экспертов согласны с тем, что изобразительных средств языка</font></font><font><font></font></font><font><font><i>UML</i></font></font><font><font></font></font><font><font>явно не хватает для того, чтобы учесть на диаграммах вариантов использования особенности функционального поведения сложной системы. С этой целью рекомендуется дополнять этот тип диаграмм текстовыми</font></font><font><font></font></font><font><font><i>сценариями</i></font></font><font><font>, которые уточняют или детализируют последовательность действий, совершаемых системой при выполнении ее вариантов использования.</font></font></p> <p> <font><font><i><b>Сценарий</b></i></font></font><font><font></font></font><font><font>(</font></font><font><font><i>scenario</i></font></font><font><font>) - определенная последовательность действий, которая описывает действия актеров и поведение моделируемой системы в форме обычного текста.</font></font></p> <p> <font><font>При написании</font></font><font><font></font></font><font><font><i>сценариев</i></font></font><font><font></font></font><font><font>вариантов использования важно понимать, что текст</font></font><font><font></font></font><font><font><i>сценария</i></font></font><font><font></font></font><font><font>должен дополнять или уточнять диаграмму вариантов использования, но не заменять ее полностью. В противном случае будут потеряны достоинства визуального представления моделей.</font></font></p> " ],
 ["Понятие диаграммы классов языка UML 2. Характеристики классификатора. Разновидности классов.", " <p> <font><b>Диаграмма классов</b></font><font> является центральным звеном методологии объектно-ориентированных анализа и проектирования. Диаграмма классов показывает классы и их отношения, тем самым, представляя логический аспект проекта. На стадии анализа диаграммы классов используются, чтобы выделить общие роли и обязанности сущностей, обеспечивающих требуемое поведение проектируемого бизнес-процесса. На стадии проектирования используются, чтобы передать структуру классов, формирующих архитектуру проектируемой области.</font></p> <p> <font><b>Диаграмма классов</b></font><font> представляет собой граф, вершинами или узлами которого являются элементы типа “классификатор”, которые связаны различными типами структурных отношений</font></p> <p> <font><b>Диаграмма классов предназначена</b></font><font> для представления статической структуры модели проектируемых бизнес-процессов. При этом диаграмма классов может содержать интерфейсы, пакеты, отношения и даже отдельные экземпляры классификаторов, такие как объекты и связи. Когда говорят о данной диаграмме, имеют в виду статическую структурную модель проектируемой области, т. е. графическое представление таких структурных взаимосвязей логической модели проектируемой области, которые не зависят от времени.</font></p> <p> <font><b>Класс (class)</b></font><font> — абстрактное описание множества однородных объектов, имеющих одинаковые атрибуты, операции и отношения с объектами других классов. Графически класс в нотации языка UML изображается в виде </font><font><b>прямоугольника</b></font><font>, который дополнительно может быть разделен горизонтальными линиями на разделы или секции. В этих секциях могут указываться имя класса, атрибуты и операции класса.</font></p> <p> <font><b>Атрибут (attribute) класса</b></font><font>– служит для представления отдельной структурной характеристики или свойства, которое является общим для всех объектов данного класса.</font></p> <p> <br> </p> <p> <img src='/static/i_0067f68bc106c46b_html_2f168e98.png'><br> </p> <p> <font><i><b>Квалифицированное имя</b></i></font><font> (qualified name) используется для того, чтобы явно указать, к какому пакету относится тот или иной класс. Для этого применяется специальный символ в качестве разделителя имени двойное двоеточие “::”</font></p> <p> <font>Имя класса без символа разделителя называется</font><font><i><b>простым именем</b></i></font><font><i> </i></font><font>класса</font></p> <p> <font>Имя класса должно быть уникальным в пределах пакета, который может содержать одну или несколько диаграмм классов. Имя указывается в самой верхней секции прямоугольника, поэтому она часто называется секцией имени класса. В дополнение к общему правилу именования элементов языка UML, имя класса записывается по центру секции имени полужирным шрифтом и должно начинаться с заглавной буквы. Рекомендуется в качестве имен классов использовать существительные, записанные по практическим соображениям без пробелов. Необходимо помнить, что имена классов образуют словарь предметной области при ООАП.</font></p> <p> <font><i><b>Классификатор (</b></i></font><font><i><b>c</b></i></font><font><i><b>lassifier</b></i></font><font><i>)</i></font><font> – специальное понятие, предназначенное для классификации экземпляров, которые имеют общие характеристики</font></p> <p> <font><b>Характеристики классификатора</b></font></p> <ul>  <li>  <p> <font><i>Структурная характеристика (structural feature)</i></font><font> является типизированной характеристикой классификатора, которая специфицирует структуру его экземпляров</font></p> </li></ul> <ul>  <li>  <p> <font><i>Характеристика поведения (behavioral feature)</i></font><font> является характеристикой классификатора, которая специфицирует некоторый аспект поведения его экземпляров</font></p> </li></ul> <ul>  <li>  <p> <font><i>Класс (class)</i></font><font> – элемент модели, который описывает множество объектов, имеющих одинаковые спецификации характеристик, ограничений и семантики</font></p> </li></ul> <p> <font><b>Самым важным видом классификатора в UML</b></font><font> является класс. Классом называется описание совокупности объектов с общими атрибутами, операциями, отношениями и семантикой. Однако помимо классов существуют и</font><font><b>другие классификаторы:</b></font></p> <ul>  <li>  <p> <font><b>интерфейс</b></font><font> - набор операций, используемых для того, чтобы специфицировать услуги, предоставляемые классом или компонентом; </font> </p>  </li><li>  <p> <font><b>тип данных</b></font><font> - тип, значения которого не индивидуализированы; сюда входят примитивные встроенные типы, такие как числа и строки, а также перечислимые типы, например Boolean;</font> </p>  </li><li>  <p> <font><b>сигнал</b></font><font>- спецификация асинхронного стимула, используемого для связи между экземплярами;</font> </p>  </li><li>  <p> <font>компонент - физическая замещаемая часть системы, соответствующая спецификации набора интерфейсов и обеспечивающая их реализацию;</font> </p>  </li><li>  <p> <font><b>узел</b></font><font>- физический элемент, который существует во время выполнения приложения и представляет собой вычислительный ресурс; обычно он обладает, как минимум, некоторой памятью, а иногда и способностью к обработке данных;</font> </p>  </li><li>  <p> <font><b>прецедент, или вариант использования,</b></font><font> - описание совокупности последовательностей действий (в том числе вариантных), выполняемых системой, которые вызывают наблюдаемое изменение, представляющее интерес для конкретного актера;</font> </p>  </li><li>  <p> <font><b>подсистема</b></font><font> - совокупность элементов, из которых отдельные составляют спецификацию поведения других элементов.</font> </p> </li></ul> <p> <font>Почти каждый из перечисленных видов классификаторов обладает как структурными, так и поведенческими свойствами (исключением являются интерфейсы - они могут не иметь атрибутов). Используя любой из них в модели, вы можете применять все описанные в этой главе свойства, обеспечивая такой уровень детализации, который необходим для адекватного описания сути вашей абстракции.</font></p> <p> <font><b>Разновидности классов.</b></font><font>Класс может иметь или не иметь экземпляров или объектов.</font><font><b>В зависимости от этого в языке UML различают:</b></font></p> <ul>  <li>  <p> <font><i><b>Абстрактный </b></i></font><font><b>(abstract</b></font><font>) класс не имеет экземпляров или объектов, для обозначения его имени используется наклонный шрифт (</font><font><i>курсив</i></font><font>)</font></p>  </li><li>  <p> <font><b>Конкретный класс (concrete class)</b></font><font> — класс, на основе которого могут быть непосредственно созданы экземпляры или объекты.</font></p> </li></ul> <ul>  <li>  <p> <font><i><b>Активный класс (</b></i></font><font><i><b>active</b></i></font><font><i><b> class</b></i></font><font><i>)</i></font><font> – класс, каждый экземпляр которого имеет свою собственную нить управления</font><font><i> </i></font> </p> </li></ul> <ul>  <li>  <p> <font><i><b>Пассивный класс</b></i></font><font><b> </b></font><font><i><b>(passive class</b></i></font><font><i>)</i></font><font> – класс, каждый экземпляр которого выполняется в контексте некоторого другого объекта</font></p> </li></ul> <p> <font>Некоторые сущности в UML не имеют экземпляров. К их числу относятся, например, пакеты и отношения обобщения. В общем смысле те элементы моделирования, которые могут иметь экземпляры, называются классификаторами. Еще важнее то, что классификаторы характеризуются структурными (в форме атрибутов) и поведенческими (в форме операций) свойствами. Все экземпляры одного классификатора обладают общим рядом свойств.</font></p> <p> <font><font><b>Отношения на диаграмме классов</b></font></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_57a99da1.jpg'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Введение в экспертные системы, роли эксперта, инженера знаний и пользователя, база данных.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Экспертная система</b></font><font> - это программное средство, использующее экспертные знания для обеспечения высокоэффективного решения неформализованных задач в узкой предметной области. Основу ЭС составляет база знаний (БЗ) о предметной области, которая накапливается в процессе построения и эксплуатации ЭС. Накопление и организация знаний - важнейшее свойство всех ЭС.</font></p> <p> <font><b>Важность экспертных систем состоит в следующем:</b></font></p> <ul>  <li>  <p> <font>технология экспертных систем существенно расширяет круг практически значимых задач, решаемых на компьютерах, решение которых приносит значительный экономический эффект;</font></p>  </li><li>  <p> <font>технология ЭС является важнейшим средством в решении глобальных проблем традиционного программирования: длительность и, следовательно, высокая стоимость разработки сложных приложений;</font></p>  </li><li>  <p> <font>высокая стоимость сопровождения сложных систем, которая часто в несколько раз превосходит стоимость их разработки; низкий уровень повторной используемости программ и т.п.;</font></p>  </li><li>  <p> <font>объединение технологии ЭС с технологией традиционного программирования добавляет новые качества к программным продуктам за счет: обеспечения динамичной модификации приложений пользователем, а не программистом; большей 'прозрачности' приложения (например, знания хранятся на ограниченном ЕЯ, что не требует комментариев к знаниям, упрощает обучение и сопровождение); лучшей графики; интерфейса и взаимодействия.</font></p> </li></ul> <p> <font>Решения экспертных систем обладают 'прозрачностью', т.е. могут быть объяснены пользователю на качественном уровне. Это качество экспертных систем обеспечивается их способностью рассуждать о своих знаниях и умозаключениях. Экспертные системы способны пополнять свои знания в ходе взаимодействия с экспертом.</font></p> <p> <font>К числу основных участников построения и эксплуатации экспертных систем следует отнести саму экспертную систему, экспертов, инженеров знаний, средства построения ЭС и пользователей. Их основные роли и взаимоотношение приведены на рисунке ниже.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_6f2e1f63.png'></p> <p> <font><b>Экспертная система</b></font><font> - это программное средство, использующее знания экспертов, для высокоэффективного решения задач в интересующей пользователя предметной области. Она называется системой, а не просто программой, так как содержит базу знаний, решатель проблемы и компоненту поддержки.</font> </p> <p> <font><b>Эксперт</b></font><font> - это человек, способный ясно выражать свои мысли и пользующийся репутацией специалиста, умеющего находить правильные решения проблем в конкретной предметной области. Эксперт использует свои приЈмы и ухищрения, чтобы сделать поиск решения более эффективным, и ЭС моделирует все его стратегии.</font> </p> <p> <font><b>Инженер знаний</b></font><font> - человек, как правило, имеющий познания в информатике и искусственном интеллекте и знающий, как надо строить ЭС. Инженер знаний опрашивает экспертов, организует знания, решает, каким образом они должны быть представлены в ЭС, и может помочь программисту в написании программ.</font></p> <p> <font><b>Пользовател</b></font><font>ь - это человек, который использует уже построенную ЭС. Так, пользователем может быть юрист, использующий ее для квалификации конкретного случая; студент, которому ЭС помогает изучать информатику и т. д. Термин пользователь несколько неоднозначен. Обычно он обозначает конечного пользователя. Однако из рисунка следует, что пользователем может быть:</font> </p> <ul>  <li>  <p> <font>создатель инструмента, отлаживающий средство построения ЭС;</font></p>  </li><li>  <p> <font>инженер знаний, уточняющий существующие в ЭС знания;</font> </p>  </li><li>  <p> <font>эксперт, добавляющий в систему новые знания;</font> </p>  </li><li>  <p> <font>клерк, заносящий в систему текущую информацию.</font></p> </li></ul> <p> <font><b>База данных (рабочая память)</b></font><font> предназначена для хранения исходных и промежуточных данных решаемой в текущий момент задачи.</font> </p> <p> <font><b>База знаний (БЗ)</b></font><font> в ЭС предназначена для хранения долгосрочных данных, описывающих рассматриваемую область (а не текущих данных), и правил, описывающих целесообразные преобразования данных этой области.</font></p> <p> <font><b>В разработке ЭС участвуют представители следующих специальностей:</b></font></p> <ul>  <li>  <p> <font><b>Эксперт определяет знания</b></font><font> (данные и правила), характеризующие проблемную область, обеспечивает полноту и правильность введенных в ЭС знаний.</font></p>  </li><li>  <p> <font><b>Инженер по знаниям</b></font><font> помогает эксперту выявить и структурировать знания, необходимые для работы ЭС; осуществляет выбор того ИС, которое наиболее подходит для данной проблемной области, и определяет способ представления знаний в этом ИС; выделяет и программирует (традиционными средствами) стандартные функции (типичные для данной проблемной области), которые будут использоваться в правилах, вводимых экспертом.</font></p>  </li><li>  <p> <font><b>Программист</b></font><font> разрабатывает ИС (если ИС разрабатывается заново), содержащее в пределе все основные компоненты ЭС, и осуществляет его сопряжение с той средой, в которой оно будет использовано.</font></p> </li></ul> " ],
 ["Диаграмма последовательности языка UML 2", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Диаграмма последовательности</b></font><font> (sequence diagram) - диаграмма, на которой показаны взаимодействия объектов, упорядоченные по времени их проявления.</font></p> <p> <font><b>Диаграмма последовательности (</b></font><font><b>sequence</b></font><font><b> </b></font><font><b>diagram</b></font><font>) – диаграмма, которая служит для представления взаимодействия элементов модели в форме последовательности сообщений и соответствующих событий на линиях жизни объектов</font> </p> <p> <font>Масштаб для оси времени на диаграмме последовательности не указывается, поскольку эта диаграмма предназначена для моделирования только лишь временного порядка следования сообщений типа 'раньше-позже”</font> </p> <p> <font><b>Основными элементами диаграммы последовательности</b></font><font> являются обозначения объектов (прямоугольники с названиями объектов), вертикальные 'линии жизни'(англ. lifeline), отображающие течение времени, прямоугольники, отражающие деятельность объекта или исполнение им определенной функции (прямоугольники на пунктирной 'линии жизни'), и стрелки, показывающие обмен сигналами или сообщениями между объектами.</font></p> <p> <font>На данной диаграмме объекты располагаются слева направо.</font></p> <p> <font><b>Графическая нотация представления взаимодействия</b></font><font> - прямоугольник с непрерывными сторонами, который также называется</font><font><i>фреймом</i></font><font> (</font><font>frame</font><font>) диаграммы. В верхнем левом углу прямоугольника фрейма изображается небольшой пятиугольник, в который помещается ключевое слово</font><font><b>sd</b></font><font>, за которым следует имя взаимодействия и его параметры</font></p> <p> <font>Порядок наступления событий вдоль линий жизни имеет значение для обозначения последовательности, в которой эти наступления события происходят. Однако абсолютные расстояния между наступлениями событий на линиях жизни не имеют семантики. Другими словами, время на диаграмме последовательности имеет шкалу порядка, а не шкалу отношений, о чем необходимо знать всем разработчикам.</font></p> <p> <font><b>Крайним слева</b></font><font> на диаграмме изображается объект - инициатор моделируемого процесса взаимодействия.</font><font><b>Правее</b></font><font> - другой объект, который непосредственно взаимодействует с первым. Таким образом, порядок расположения объектов на диаграмме последовательности определяется исключительно соображениями удобства визуализации их взаимодействия друг с другом.</font></p> <p> <font>Начальному моменту времени соответствует самая верхняя часть диаграммы. При этом процесс взаимодействия объектов реализуется посредством сообщений, которые посылаются одними объектами другим. Сообщения изображаются в виде горизонтальных стрелок с именем сообщения и образуют определенный порядок относительно времени своей инициализации. Другими словами, сообщения, расположенные на диаграмме последовательности выше, передаются раньше тех, которые расположены ниже.</font> </p> <p> <font><b>В языке UML могут встречаться несколько разновидностей сообщений:</b></font></p> <ul>  <li>  <p> <font><b>Первая разновидность сообщения</b></font><font> является наиболее распространенной и используется для вызова процедур, выполнения операций или обозначения отдельных вложенных потоков управления. Начало этой стрелки всегда соприкасается с фокусом управления или линией жизни того объекта-клиента, который инициирует это сообщение. Конец стрелки соприкасается с линией жизни того объекта, который принимает это сообщение и выполняет в ответ определенные действия.</font> </p>  </li><li>  <p> <font><b>Вторая разновидность сообщения</b></font><font> используется для обозначения простого (не вложенного) потока управления. Каждая такая стрелка указывает на прогресс одного шага потока. При этом соответствующие сообщения обычно являются асинхронными, т. е. могут возникать в произвольные моменты времени.</font> </p>  </li><li>  <p> <font><b>Третья разновидность</b></font><font> явно обозначает асинхронное сообщение между двумя объектами в некоторой процедурной последовательности. Примером такого сообщения может служить прерывание операции при возникновении исключительной ситуации.</font> </p>  </li><li>  <p> <font>Наконец,</font><font><b>последняя разновидность сообщения</b></font><font> используется для возврата из вызова процедуры. Примером может служить простое сообщение о завершении некоторых вычислений без предоставления результата расчетов объекту-клиенту.</font> </p> </li></ul> <p> <font><b>Линия жизни объекта (object lifeline</b></font><font>) - вертикальная линия на диаграмме последовательности, которая представляет существование объекта в течение определенного периода времени.</font></p> <p> <font><b>Линия жизни </b></font><font><i><b>(lifeline)</b></i></font><font><i> </i></font><font>представляет одного индивидуального участника взаимодействия или отдельную взаимодействующую сущность</font><font><i>.</i></font></p> <p> <font><b>Нотация линии жизни</b></font></p> <p> <font><b>Линия жизни объекта изображается</b></font><font> пунктирной вертикальной линией, ассоциированной с единственным объектом на диаграмме последовательности. Линия жизни служит для обозначения периода времени, в течение которого объект существует в системе и, следовательно, может потенциально участвовать во всех ее взаимодействиях. Если объект существует в системе постоянно, то и его линия жизни должна продолжаться по всей рабочей области диаграммы последовательности от самой верхней ее части до самой нижней.</font><img src='/static/i_0067f68bc106c46b_html_m688bf96a.png'></p> <p> <font>Отдельные объекты, закончив выполнение своих операций, могут быть уничтожены, чтобы освободить занимаемые ими ресурсы. Для таких объектов линия жизни обрывается в момент его уничтожения. Для обозначения момента уничтожения объекта в языке UML применяется специальный символ в форме латинской буквы 'X'.</font></p> <p> <br> </p> <p> <font><b>Пример диаграммы:</b></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m75854341.png'></p> <p> <font>Здесь мы видим три объекта: “Зритель”, “Пульт” и “Телевизор”. Каждому объекту соответствует вертикальная линия (линия времени). Объекты могут передавать друг другу сообщения, которые отображаются на диаграмме в виде стрелок. Период активной деятельности для объекта выделяется широкой полосой на его линии времени. Такая полоса показана для объекта “Телевизор”.</font></p> " ],
 ["Логическое программирование и экспертные системы.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Развитие систем баз данных первоначально было мотивировано потребностью в эффективных средствах хранения, манипуляции и извлечения большого количества разнообразных данных. По мере того, как в достижении этих целей наблюдался прогресс, возникла дополнительная заинтересованность в возможности задавать информационным системам правила, применяемые к хранимым фактам (данным), с тем, чтобы появилась возможность вывода фактов, т.е. получения новых знаний.</font></p> <p> <font>Включение знаний в системы баз данных было подсказано исследованиями в области искусственного интеллекта (ИИ), который занимается вопросами программирования разумного поведения. Разработки в области ИИ включали исследования представлений логических правил, применяемых к данным. </font><font><i><b>Экспертная система (ЭС)</b></i></font><font><i> </i></font><font>– это компьютерная программа, которая моделирует работу человека-эксперта для выработки рекомендации или решения проблемы в определенной предметной области. К таким областям относятся медицина, планирование налогов, проектирование компьютеров и т.д. Таким образом, экспертные системы (ЭС) можно определить как системы, моделирующие процесс принятия решений специалистами в разных предметных областях методами искусственного интеллекта.</font></p> <p> <font>В состав экспертной системы входят база знаний (БЗ), содержащая формализованные знания по той проблеме, для решения которой она создана; механизм логического вывода (МЛВ), который должен обеспечивать подобие рассуждений человека на базе знаний; подсистема объяснений; интерфейс пользователя.</font> </p> <p> <font>Основой экспертной системы является база знаний.</font><font><b>База знаний экспертной системы</b></font><font> – это формализованное описание знаний о проблемной области. В базе знаний можно выделить</font><font><b>базу фактов</b></font><font>, содержащую данные об объектах проблемной области, и собственно</font><font><b>базу знаний</b></font><font>, содержащую правила использования фактов для получения новых фактов в качестве ответов на запросы пользователя.</font> </p> <p> <font>Наиболее распространенными моделями представления знаний в системах искусственного интеллекта являются: логические модели; продукционные системы; фреймы; семантические сети.</font></p> <p> <font><b>Логические модели представления знаний</b></font><font> реализуются средствами логики предикатов. В общем случае модели, основанные на логике предикатов, описываются формальной системой, которая задается четверкой: М=(B,Р,А,R), где B - множество базовых элементов или алфавит формальной системы; Р - множество синтаксических правил, с помощью которых можно строить из B синтаксически правильные выражения; А - множество аксиом (априорно истинных выражений); R - правила вывода с помощью которых можно расширять множество А.</font> </p> <p> <font>Продукция, или продукционное правило, в самом простом виде представляется предложением типа «Если (условие), то (действие)». Смысл ее состоит в том, что при выполнении условия система должна выполнить действие, указанное в правой части продукции. Условие должно использовать информацию о текущем состоянии базы знаний, а действия могут изменять это состояние и/или сообщать результаты пользователю. </font> </p> <p> <font><b>Продукционные системы</b></font><font> делят на два типа — с прямыми и обратными выводами. При прямом выводе рассуждение ведется от данных к гипотезам, а при обратном производится поиск доказательства или опровержения некоторой гипотезы (от цели к данным). Часто используются комбинации прямой и обратной цепи рассуждений.</font></p> <p> <font><b>Семантические сети</b></font><font> описывают знания в виде сетевых структур. В основе такой модели лежит идея о том, что любые знания можно представить в виде совокупности объектов (понятий) и связей (отношений) между ними. Выписывание всех существенных для рассматриваемых объектов отношений (например, «является частью», «аналогичен» и т.п.) и представляет собой семантическую сеть. Объекты служат узлами сети, отношения – дугами.</font> </p> <p> <font>Выбор оптимального способа представления знаний во многом зависит от характера и сложности задач, которые должны будут решать системы, основанные на знаниях.</font> </p> <p> <font>Хотя исследования в области экспертных систем значительно повлияли на методы представления знаний, основанные на логических правилах, экспертные системы не являются базами знаний, поскольку они не обеспечивают полные возможности управления данными, присущие системам управления базами данных (СУБД). Язык Пролог, наиболее популярный язык экспертных систем, является естественным мостом между базами данных и базами знаний. Этот язык основан на исчислении предикатов, а его предикаты могут рассматриваться как реляционные таблицы. Кроме того, в нем имеется возможность выражения той логики, которой пользуется человек, преобразуя факты из базы данных в информацию, помогающую принимать решения.</font></p> <p> <font>Для решения задач моделирования рассуждений человека, организации прямого или обратного логического вывода и других задач искусственного интеллекта применяется логическое программирование. В широком смысле</font><font><b>логическое программирование</b></font><font> – это множество таких методов решения проблем, в которых используются приемы логического вывода для манипулирования знаниями, представленными в декларативной форме.</font></p> <p> <font><b>В логическом программировании можно выделить следующие направления</b></font><font>: решение задач, требующих логического вывода, эвристическое программирование и создание решателей задач; представление знаний и разработка экспертных систем; создание новых языков логического программирования; создание вычислительных систем новых поколений.</font></p> <p> <font>Логическое программирование связывают с системами программирования, основанными на использовании специальных классов логических формул и специальных методов логического вывода.</font> </p> <p> <font><b>У языка логического программирования можно выделить следующие отличия от классических алгоритмических языков</b></font><font>: 1) это символьное программирование; 2) отсутствие алгоритмов получения определенных результатов (описываются объекты, их свойства и отношения между объектами, говорится о фактах, правилах получения новых фактов, вопросах, выясняющих установленность или возможность установления фактов).</font></p> <p> <font>Одним из представителей языков логического программирования </font><font><b>является Пролог.</b></font><font></font><font><b>Пролог </b></font><font>- это язык программирования, предназначенный для обработки символьной нечисловой информации. Пролог базируется на предложениях Хорна, являющихся подмножеством формальной системы, называемой логикой предикатов.</font><font><b>Логика предикатов</b></font><font> — это простейший способ объяснить, как 'работает' мышление. Логика предикатов была разработана для наиболее простого преобразования принципов логического мышления в записываемую форму.</font> </p> <p> <font>Пролог использует упрощенную версию синтаксиса логики предикатов, он прост для понимания и очень близок к естественному языку.</font></p> <p> <font>Программа на Прологе отлична от программы в традиционном понимании, т.к. не содержит управляющих конструкций (условных операторов, операторов цикла и т.д.). Она представляет собой модель некоторого фрагмента предметной области, о котором идет речь в решаемой задаче. В программе на Прологе не надо задавать определенную последовательность действий приводящих к решению задачи, необходимо описать задачу и основные правила для ее решения. Пролог–система с помощью встроенного механизма логического вывода сама найдет необходимое решение. Вследствие декларативного характера Пролога, программист начинает работу с хорошо структурированного описания задачи, а не с выработки сложных последовательностей команд.</font></p> <p> <font>Одной из важнейших особенностей Пролога является то, что, в дополнение к логическому поиску ответов на поставленные вопросы, он может иметь дело с альтернативами и находить все возможные решения. Вместо обычной работы от начала программы до ее конца, Пролог может возвращаться назад и просматривать более одного варианта при решении всех составляющих задачу частей.</font></p> <p> <font>Пролог эффективно используется при решении задач, связанных с разработкой систем искусственного интеллекта (различные экспертные системы, программы-переводчики, интеллектуальные игры). В качестве компьютерной поддержки можно использовать инструментальную среду разработки программ Visual Prolog, которая позволяет программировать такие приложения как базы знаний, экспертные системы, естественно-языковые интерфейсы, интеллектуальные системы управления информацией.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Диаграмма деятельности языка UML 2. Понятие. Поток управления. Поток объектов. Семантика деятельности и действия.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Диаграмма деятельности (</b></font><font><b>activity</b></font><font><b> </b></font><font><b>diagram</b></font><font><b>)</b></font><font> – диаграмма, которая изображает поведение объекта или системы с использованием моделей потока данных и потока управления. Диаграмма деятельности показывает поток переходов от одной деятельности к другой.</font></p> <p> <font><i><b>Деятельность (activity)</b></i></font><font> является спецификацией параметризованного поведения в форме координируемой последовательности подчиненных единиц, индивидуальными элементами которых являются действия.</font></p> <p> <font>Элементами, из которых состоят деятельности, являются </font><font><b>действия</b></font><font>. </font><font><i><b>Действие (action)</b></i></font><font> представляет собой элементарную единицу спецификации поведения, которая не может быть далее декомпозирована в форме деятельности.</font></p> <p> <font><b>Узел деятельности </b></font><font><i><b>(</b></i></font><font><i><b>activity</b></i></font><font><i><b> </b></i></font><font><i><b>node</b></i></font><font><i><b>)</b></i></font><font><i> -</i></font><font>является абстрактным классом для отдельных точек в потоке деятельности, соединенных дугами</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_28be5514.gif'></p> <p> <font><b>Узлы управления:</b></font></p> <ul>  <li>  <p> <font><i>Начальный узел (</i></font><font><i>i</i></font><font><i>nitial node)</i></font><font> является узлом управления, в котором начинается поток при вызове деятельности</font></p> </li></ul> <ul>  <li>  <p> <font><i>Узел финала деятельности (</i></font><font><i>a</i></font><font><i>ctivity final</i></font><font><i>node</i></font><font><i>)</i></font><font> является узлом управления, который прекращает или останавливает все потоки в деятельности</font></p> </li></ul> <ul>  <li>  <p> <font><i>Узел финала потока (flow final node)</i></font><font> является финальным узлом, который завершает отдельный поток управления или поток объектов, не завершая содержащей его деятельности</font></p> </li></ul> <p> <img src='/static/i_0067f68bc106c46b_html_73a2fa99.gif'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Узел решения</b></font><font> </font><font><i>(</i></font><font><i>d</i></font><font><i>ecision node) -</i></font><font>является узлом управления, который выбирает между выходящими потоками.</font><font><i> </i></font><font>Если для узла решения при оценивании оказываются справедливыми более одного сторожевого условия, то семантика такого поведения в языке UML 2.х не определена, поскольку среди выходящих дуг возникает состязание за прием маркера</font><img src='/static/i_0067f68bc106c46b_html_a41d292.gif'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Узел слияния</b></font><font><i><b> (</b></i></font><font><i><b>m</b></i></font><font><i><b>erge node)</b></i></font><font><i> - </i></font><font>является узлом управления, который соединяет вместе несколько альтернативных потоков</font><img src='/static/i_0067f68bc106c46b_html_m1809bffb.gif'></p> <p> <br> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Узел разделения</b></font><font><i><b> (</b></i></font><font><i><b>f</b></i></font><font><i><b>ork node)</b></i></font><font><font> </font></font><font><i>-</i></font><font>является узлом управления, который расщепляет поток на несколько параллельных потоков. Дуги, выходящие из узла разделения, дополнительно могут иметь сторожевые условия, при невыполнении которых могут возникать паузы с передачей маркеров по этим дугам.</font><img src='/static/i_0067f68bc106c46b_html_6e9691e2.gif'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Узел соединения</b></font><font><i><b> (join node</b></i></font><font><i>) - </i></font><font>является узлом управления, который синхронизирует несколько потоков. Узлы соединения могут иметь дополнительную логическую спецификацию условий, при выполнении которых они должны генерировать маркер на выходе.</font><img src='/static/i_0067f68bc106c46b_html_m8c1563b.gif'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Узел объекта</b></font><font><i><b> (object node</b></i></font><font><i>) -</i></font><font>является узлом абстрактной деятельности, которая является частью определяющего потока объектов в деятельности.</font><img src='/static/i_0067f68bc106c46b_html_m5bcf5816.gif'></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m6ff7d3c9.gif'><br> </p> <p> <font><i><b>Дуга деятельности (activity edge</b></i></font><font><i>)</i></font><font> является абстрактным классом для направленных соединений между двумя узлами деятельности</font></p> <p> <font><b>Поток управления (control flow</b></font><font>) - представляется в форме дуги деятельности, которая связывает между собой два узла деятельности и по которой передаются только маркеры управления. При этом все маркеры управления, которые предлагаются узлом источником, предлагаются узлу цели, а вдоль дуги потока управления не могут следовать объекты и данные</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m4a89d9da.gif'></p> <p> <font><b>Поток объектов (object flow)</b></font><font> - представляется в форме дуги деятельности, по которой передаются только маркеры объектов или данных. При этом все маркеры, предлагаемые узлом источником, предлагаются для узла цели с учетом ограничений, которые могут быть дополнительно специфицированы с помощью веса дуги. Узлы объектов, соединенные потоком объектов с необязательными промежуточными узлами действий или управления, должны иметь совместимые типы.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_3f92fc93.gif'></p> <p> <font><b>Семантика деятельности</b></font><font><b> </b></font> </p> <p> <font>Семантика деятельности в языке UML 2.х основывается на потоке маркеров.</font></p> <p> <font><i><b>Маркер (token)</b></i></font><font> – элемент модели, предназначенный для представления некоторого объекта, данных или управления и существующий на диаграмме деятельности в отдельном узле. Каждый маркер отличается от любого другого, даже если он содержит то же значение, что и другой</font></p> <p> <font>Любой узел деятельности может начать свое выполнение, только если удовлетворены специфицированные условия для его входных маркеров, причем эти условия зависят от вида узла.</font></p> <p> <font>Когда узел начинает свое выполнение, маркеры принимаются из некоторых или всех его входных дуг, а специальный маркер размещается в этом узле.</font></p> <p> <font>Когда узел завершает выполнение, специальный маркер удаляется из этого узла, а другие маркеры предлагаются в некоторых или всех его выходных дугах.</font></p> <p> <font><b>Семантика действия</b></font></p> <p> <font>Выполнение действия становится возможным, когда удовлетворены предварительные условия для его потоков управления и объектов.</font></p> <p> <font>Выполнение действия поглощает входные маркеры управления и маркеры объектов и удаляет их из источников дуг управления и из входных контактов. Если на одной дуге являются доступными несколько маркеров управления, то они все поглощаются.</font></p> <p> <font>Действие продолжает выполнение до тех пор, пока оно не будет завершено</font></p> <p> <font>После завершения действия оно предлагает маркеры объектов во все его выходные контакты, а маркеры управления во все выходящие из него дуги управления, и на этом формально оно заканчивается. После окончания выполнения действия с помощью некоторой реализации должны быть восстановлены его ресурсы.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Понятие о нечетких множествах и их связь с теорией построения экспертных систем, реализация экспертных систем в", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Прежде чем нечеткий подход к моделированию сложных систем получил признание во всем мире, прошло не одно десятилетие с момента зарождения теории нечетких множеств. И на этом пути развития нечетких систем принято выделять три периода.</font></p> <p> <font><b>Первый период</b></font><font> (конец 60-х–начало 70 гг.) характеризуется развитием теоретического аппарата нечетких множеств (Л. Заде, Э. Мамдани, Беллман).</font><font><b>Во втором периоде</b></font><font> (70–80-е годы) появляются первые практические результаты в области нечеткого управления сложными техническими системами (парогенератор с нечетким управлением). Одновременно стало уделяться внимание вопросам построения экспертных систем, построенных на нечеткой логике, разработке нечетких контроллеров.</font><font><b>Нечеткие экспертные системы</b></font><font> для поддержки принятия решений находят широкое применение в медицине и экономике. </font><font><b>Наконец, в третьем периоде</b></font><font>, который длится с конца 80-х годов и продолжается в настоящее время, появляются пакеты программ для построения</font><font><b>нечетких экспертных систем,</b></font><font> а области применения нечеткой логики заметно расширяются. Она применяется в автомобильной, аэрокосмической и транспортной промышленности, в области изделий бытовой техники, в сфере финансов, анализа и принятия управленческих решений и многих других.</font></p> <p> <font><b>По идее нечеткое управление</b></font><font> - это своего рода экспертная система в управлении.</font></p> <p> <font>Традиционные экспертные системы не имели дело с нечеткостями, и идея Заде заключалась в том, чтобы раскрыть сущность экспертных систем путем описания алгоритмов словами, т. е. нечетко, что оказалось весьма плодотворным.</font> </p> <p> <font>Благодаря оперированию с неопределенностями слов и понятий нечеткая логика предоставляет методы, приближающие нас к сущности экспертных систем. Если в процессе мышления человека с помощью нестрогих рассуждений есть нечто, называемое логикой, то это не что иное, как нечеткая логика. Благодаря тому, что в ней сочетаются нечеткости и логика, она может претендовать на роль языка описания в модели мышления человека. Несомненно, экспертные системы, будучи спроектированными как нечеткие экспертные системы на базе нечеткой логики, станут более эффективными и полезными. Реальным подтверждением этого служат многочисленные уже работающие системы в области управления. Почти все экспертные системы управления обеспечивают нечеткое управление, т.е. являются нечеткими экспертными системами. Среди них немало примеров успешной автоматизации технологических процессов с помощью нечеткого управления. Известны примеры применения нечетких экспертных систем для диагностики неисправностей локомотивов, выбора меню в ресторанах и т. п.</font></p> <p> <font><b>Под нечётким множеством</b></font><font><i><b>А</b></i></font><font> понимается совокупность упорядоченных пар, составленных из элементов</font><font><i>х</i></font><font> универсального множества</font><font><i> </i></font><font><i>U</i></font><font> и соответствующих степеней принадлежности μ</font><sub><font>А</font></sub><font>(</font><font><i>х</i></font><font>):</font></p> <p> <font><i>A</i></font><font><i>={(</i></font><font><i>x</i></font><font><i>, μ</i></font><sub><font><i>А</i></font></sub><font><i>(х))|</i></font><font><i>x</i></font><font><i> </i></font><font><i>ϵ</i></font><font><i> </i></font><font><i>U</i></font><font><i>},</i></font></p> <p> <font>причем μ</font><sub><font>А</font></sub><font>(</font><font><i>х</i></font><font>) — функция принадлежности (характеристическая функция), указывающая в какой степени (мере) элемент</font><font><i>х</i></font><font> принадлежит нечёткому множеству .</font></p> <p> <font>Функция μ</font><sub><font>А</font></sub><font>(</font><font><i>х</i></font><font>) принимает значения в некотором линейно упорядоченном множестве</font><font><i>М.</i></font><font> Множество </font><font><i>М</i></font><font> называют</font><font><b>множеством принадлежностей</b></font><font>, часто в качестве</font><font><i>М</i></font><font> выбирается отрезок [0,1]. Если </font><font><i>М</i></font><font>={0,1} (т.е. состоит только из двух элементов), то нечёткое множество может рассматриваться как обычное, чёткое множество.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m420aa77.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m420aa77.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_4e505fb4.png'></p> <p> <font><b>Достоинства нечетких систем:</b></font></p> <ul>  <li>  <p> <font>функционирование в условиях неопределенности;</font></p>  </li><li>  <p> <font>оперирование качественными и количественными данными;</font></p>  </li><li>  <p> <font>использование экспертных знаний в управлении;</font></p>  </li><li>  <p> <font>построение моделей приближенных рассуждений человека;</font></p>  </li><li>  <p> <font>устойчивость при действии на систему всевозможных возмущений.</font></p> </li></ul> <p> <font><b>Недостатками нечетких систем являются:</b></font></p> <ul>  <li>  <p> <font>отсутствие стандартной методики конструирования нечетких систем;</font> </p>  </li><li>  <p> <font>невозможность математического анализа нечетких систем существующими методами;</font> </p>  </li><li>  <p> <font>применение нечеткого подхода по сравнению с вероятностным не приводит к повышению точности вычислений.</font></p> </li></ul> <p> <font><b>Пример реализации экспертных систем в</b></font><font><b>Windows</b></font><font><i><b>.</b></i></font></p> <p> <font>В качестве примера быстродействующей системы для отслеживания состояния корпоративной информационной сети (КИС) можно привести основанную на знаниях систему мониторинга OMEGAMON фирмы Candle (IBM с 2004 г.) . OMEGAMON - типичный представитель современных экспертных мультиагентных динамических систем, работающих в реальном времени. OMEGAMON позволяет за считанные минуты ввести и отладить правила мониторинга внештатных ситуаций для объектов КИС. Правило (situation) записывается как продукция. Логический вывод в такой ЭС реализован при помощи механизма policy, обеспечивающего построение цепочек логического вывода на основе situations.</font> </p> <p> <font><b>Архитектура данной ЭС включает:</b></font></p> <ul>  <li>  <p> <font>сервер сбора информации от агентов CandleManagementServer (CMS);</font></p>  </li><li>  <p> <font>сервер отображения результатов, оповещения пользователей и настройки мониторинга КИС CandleNetPortal Server (CNP) со своими клиентами;</font></p>  </li><li>  <p> <font>Candle Management Workstation (CMW) -</font><font>рабочаястанцияадминистратора</font><font> OMEGAMON;</font></p>  </li><li>  <p> <font>Managed Systems - компьютеры КИС, на которых работают агенты.</font></p> </li></ul> <p> <font>Агенты OMEGAMON работают на контролируемых системах (Managed Systems), как первоклассные шпионы: они незаметны с точки зрения использования CPU и оперативны при мониторинге с точки зрения времени поставки своих донесений в центр (CMS). Они фиксируют критическую ситуацию и обеспечивают реакцию (ACTION) менее чем за 1 секунду. Все определяется тем интервалом мониторинга, который задается экспертом на основе своих интуитивных знаний. В качестве ACTION при определении ситуаций можно использовать различные типы действий: посылку почтовых сообщений и sms специалистам сопровождения, посылку информации в другие системы, выполнение системных команд и т.д. Количество объектов мониторинга (компьютеров КИС) может достигать нескольких сотен, и на каждом объекте может быть несколько сотен контролируемых параметров. Количество платформ (типов операционных систем), на которых работают агенты, превышает 30, начиная от OS/390,OS/400, далее различные UNIX-платформы (HP_UX, AIX, Solaris) и заканчивая Windows. На одном сервере может работать несколько агентов, например, для мониторинга WebSphere MQ ( MQSeries ), WebSphere Application Server, DB-2 и HP_UNIX одновременно.</font></p> <p> <font>Серверы CMS и CNP-servers могут работать на одном выделенном сервере, как правило, на базе операционной системы Windows. Настройка ситуаций (situations) и механизмов логического вывода (policy) производится на рабочем компьютере администратора через CNP-client. Для только что созданной ситуации вы нажимаете кнопку Apply и моментально видите отображение ACTION через CNP-client, через почту и т.д.</font></p> <p> <font>Следует подчеркнуть, что основанная на знаниях система мониторинга OMEGAMON - это весьма эффективная система управления вычислительными ресурсами, надежный и незаменимый помощник в поисках решений по оперативному устранению критических и трудных для диагностирования ситуаций, при анализе информационных потоков, анализе производительности и настройке КИС.</font></p> <p> <font>Про CLIPS добавляю исключительно для себя. Смотрите сами, использовать это при ответе или нет!!!</font></p> <p> <font>CLIPS, (от англ. C Language Integrated Production System) — программная среда для разработки</font><font><b>экспертных систем.</b></font><font> Синтаксис и название предложены Чарльзом Форги (Charles Forgy) в OPS (Official Production System).</font> </p> <p> <font>CLIPS является продукционной системой.</font><font><b>Основная идея состоит в представлении знаний в виде такой формы:</b></font></p> <p> <font>Правило1:</font></p> <p> <font>ЕСЛИ</font> </p> <p> <font>(выполняются условия1)</font></p> <p> <font>ТОГДА</font></p> <p> <font>(выполнить действия1)</font></p> <p> <font>Правило2:</font></p> <p> <font>ЕСЛИ</font> </p> <p> <font>(выполняются условия2)</font></p> <p> <font>ТОГДА</font></p> <p> <font>(выполнить действия2)</font></p> <p> <font>...</font></p> <p> <font>Такое представление близко к человеческому мышлению и отличается от программ, написанных на традиционных алгоритмических языках, где действия упорядочены и выполняются строго придерживаясь алгоритма.</font></p> <p> <font>CLIPS является одной из наиболее широко используемых инструментальных сред для разработки экспертных систем благодаря своей скорости, эффективности и бесплатности. Являясь общественным достоянием, она до сих пор обновляется и поддерживается своим изначальным автором, Гэри Райли (Gary Riley).</font></p> <p> <font>CLIPS включает полноценный объектно-ориентированный язык COOL для написания экспертных систем. Хотя она написана на языке Си, её интерфейс намного ближе к языку программирования LISP. Расширения можно создавать на языке Си, кроме того, можно интегрировать CLIPS в программы на языке Си[1].</font></p> <p> <font>CLIPS разработан для применения в качестве языка прямого логического вывода.</font></p> <p> <font><b>Как и другие экспертные системы, CLIPS имеет дело с правилами и фактами.</b></font></p> <p> <font>Информация, на основании которой экспертная система делает логический вывод, называется фактами. В CLIPS есть 2 вида фактов: </font><font><b>упорядоченные и шаблонные</b></font><font>. </font><font><b>Шаблонные факты</b></font><font> имеют шаблон, задаваемый конструкцией deftemplate.</font><font><b>Упорядоченные</b></font><font> не имеют явной конструкции deftemplate, однако она подразумевается. Шаблонный факт напоминает структуру в языке C или запись в языке Pascal, поля называются слотами и объявляются конструкцией slot. Например, следующий шаблон объявляет шаблон с именем cars и полями: model, color и number.</font></p> <p> <font>( deftemplate cars</font></p> <p> <font>(slot model)</font></p> <p> <font>(slot color)</font></p> <p> <font>(slot number) )</font></p> <p> <font>Знания предметной области представляются в CLIPS в виде </font><font><b>правил</b></font><font>, которые имеют следующую структуру:</font></p> <p> <font><b>Левая часть правила</b></font><font> - это условие его срабатывания, а правая часть - это те действия, которые должны выполниться в случае выполнения условий. Знак =&gt; специальный символ, разделяющий LHS и RHS.</font><img src='/static/i_0067f68bc106c46b_html_m624c56ec.png'></p> <p> <font>Потомками CLIPS являются языки программирования Jess (часть CLIPS, работающая с правилами и переписанная на Java, позже развившаяся в другом направлении), ECLiPSe и другие.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Диаграмма компонентов языка UML 2.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Диаграмма компонентов</b></font><font> – диаграмма физического уровня, которая служит для представления программных компонентов и зависимостей между ними. </font> </p> <p> <font>Диаграмма компонентов позволяет определить архитектуру разрабатываемой системы, установив зависимости между программными компонентами, в роли которых может выступать исходный, бинарный и исполняемый код. Во многих средах разработки модуль или компонент соответствует файлу. Пунктирные стрелки, соединяющие модули, показывают отношения взаимозависимости, аналогичные тем, которые имеют место при компиляции исходных текстов программ. Основными графическими элементами диаграммы компонентов являются компоненты, интерфейсы и зависимости между ними.</font> </p> <p> <font><b>Диаграмма компонентов разрабатывается для следующих целей:</b></font> </p> <ul>  <li>  <p> <font>Визуализации общей структуры исходного кода программной системы.</font></p>  </li><li>  <p> <font>Спецификации исполнимого варианта программной системы.</font></p>  </li><li>  <p> <font>Обеспечения многократного использования отдельных фрагментов программного кода.</font></p>  </li><li>  <p> <font>Представления концептуальной и физической схем баз данных.</font></p> </li></ul> <p> <font>Для представления физических сущностей в языке UML применяется специальный термин -</font><font><b>компонент (component).</b></font><font><b> Компонент</b></font><font><i><b>(</b></i></font><font><i><b>component</b></i></font><font><i><b>) –</b></i></font><font> элемент модели, представляющий некоторую модульную часть системы с инкапсулированным содержимым, спецификация которого является взаимозаменяемой в его окружении.</font></p> <p> <font>Компонент реализует некоторый набор интерфейсов и служит для общего обозначения элементов физического представления модели. Для графического представления компонента используется специальный символ - прямоугольник со вставленными слева двумя более мелкими прямоугольниками. Внутри большого прямоугольника записывается имя компонента и, при необходимости, некоторая</font><font><b>дополнительная информация.</b></font> </p> <p> <font><b>Примеры изображения простого компонента и компонента с интерфейсами</b></font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m1b129957.gif'></p> <p> <font>Имя компонента подчиняется общим правилам именования элементов модели в языке UML и может состоять из любого числа букв, цифр и некоторых знаков препинания.</font></p> <p> <font><b>Интерфейсы</b></font><font><b>. </b></font><font>Следующим элементом диаграммы компонентов являются интерфейсы.</font></p> <p> <font><b>Предоставляемый интерфейс (provided</b></font><font><b>interface</b></font><font><b>)</b></font><font> – интерфейс, который компонент предлагает для своего окружения.</font><font><i> </i></font> </p> <p> <font><b>Требуемый интерфейс</b></font><font><b> </b></font><font><b>(required </b></font><font><b>interface</b></font><font><b>)</b></font><font> – интерфейс, который необходим компоненту от своего окружения для выполнения заявленной функциональности, контракта или поведения.</font> </p> <p> <font>В общем случае, интерфейс графически изображается окружностью, которая соединяется с компонентом отрезком линии без стрелок. Имя интерфейса должно начинаться с заглавной буквы и записываться рядом с окружностью. Семантически линия означает реализацию интерфейса, а наличие интерфейсов у компонента означает, что данный компонент реализует соответствующий набор интерфейсов.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_40e9a194.gif'><br> </p> <p> <font>Интерфейсы удобны для описания общего поведения компонента, но им не присуща «индивидуальность»: реализация компонента должна лишь гарантировать, что все операции во всех предоставляемых интерфейсах реализованы. Для более полного контроля над реализацией можно использовать порты. </font> </p> <p> <font>Пример отношений зависимости между компонентом</font><img src='/static/i_0067f68bc106c46b_html_36ea9015.gif'></p> <p> <font><b>Отношение зависимости на диаграмме компонентов</b></font><font> изображается пунктирной линией со стрелкой, направленной от клиента (зависимого элемента) к источнику (независимому элементу).</font> </p> <p> <font>Применительно к диаграмме компонентов зависимости могут связывать компоненты и импортируемые этим компонентом интерфейсы, а также различные виды компонентов между собой.</font></p> <p> <font><b>Порт (port)</b></font><font> – это своеобразное «окно» в инкапсулированный компонент. Все взаимодействие с таким компонентом на входе и на выходе происходит через порты. Порт определяет различимую точку взаимодействия между компонентом и окружающей его средой или между компонентом и его внутренними частями.</font></p> <p> <font>Выражаемое внешне поведение компонента представляет собой сумму его портов – ни более ни менее. Вдобавок к этому порт наделен уникальностью. Один компонент может взаимодействовать с другим через определенный порт.</font> </p> <p> <font>При этом их коммуникации полностью описываются интерфейсами, которые поддерживает порт, даже если компонент поддерживает другие интерфейсы. В реализации внутренние части компонента могут взаимодействовать друг с другом через специфический внешний порт, поэтому каждая часть может быть независима от требований других. Порты позволяют разделять интерфейсы компонента на дискретные пакеты и использовать обособленно. Инкапсуляция и независимость, обеспечиваемая портами, повышают степень заменяемости компонента.</font></p> <p> <font>Порт схематически представлен маленьким квадратом на боковой грани компонента – это отверстие в границе инкапсуляции компонента. Как предоставляемый, так и требуемый интерфейс может быть соединен с символом порта. Предоставляемый интерфейс изображает сервис, который может быть запрошен извне через данный порт, а требуемый интерфейс – сервис, который порт должен получить от какого-либо другого компонента. У каждого порта есть имя, а, следовательно, он может быть идентифицирован по компоненту и имени. Последнее могут использовать внутренние части компонента для идентификации порта, через который следует отправлять и получать сообщения. Наличие имени у порта не является обязательным. При отсутствии имени порта его тип ассоциируется с типом интерфейса, с которым связан порт. Имя компонента вместе с именем порта идентифицирует порт для использования его другими компонентами.</font></p> <p> <font>Порты – это часть компонента. Экземпляры портов создаются и уничтожаются вместе с экземпляром компонента, которому они принадлежат. Порты также могут иметь множественность; это означает возможность существования нескольких экземпляров порта внутри экземпляра компонента. Каждый порт компонента имеет соответствующий массив экземпляров. Хотя все экземпляры портов в массиве удовлетворяют одному и тому же интерфейсу и принимают запросы одних и тех же видов, они могут находиться в различных состояниях и иметь разные значения данных.</font><img src='/static/i_0067f68bc106c46b_html_m2fd5f49c.gif'></p> <p> <br> </p> " ],
 ["Цели разработки диаграммы развертывания. Узел, устройство, артефакт.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Диаграмма развертывания (deployment diagram)</b></font><font> - диаграмма, на которой представлены узлы выполнения программных компонентов реального времени, а также процессов и объектов.</font></p> <p> <font><b>Диаграмма развертывания предназначена для</b></font><font> представления общей конфигурации или топологии распределенной программной системы и содержит изображение размещения различных артефактов по отдельным узлам системы. Кроме того, диаграмма развертывания показывает наличие физических соединений - маршрутов передачи информации между аппаратными устройствами, задействованными в реализации системы.</font></p> <p> <font><b>При разработке диаграмм развертывания преследуются следующие цели:</b></font></p> <ul>  <li>  <p> <font>Специфицировать физические узлы, необходимые для размещения на них исполнимых компонентов программной системы.</font></p>  </li><li>  <p> <font>Показать физические связи между узлами реализации системы на этапе ее исполнения.</font></p>  </li><li>  <p> <font>Выявить узкие места системы и реконфигурировать ее топологию для достижения требуемой производительности. </font> </p> </li></ul> <p> <font><b>Диаграмма развертывания применяется для</b></font><font> представления общей конфигурации и топологии распределенной программной системы и содержит изображение размещения компонентов по отдельным узлам системы. Диаграмма развертывания содержит графические изображения процессоров, устройств, процессов и связей между ними.</font> </p> <p> <font><b>Узел</b></font><font><i><b>(node</b></i></font><font><i>)</i></font><font><font><font> </font></font></font><font>является элементом модели, который представляет некоторый вычислительный ресурс для развертывания на нем различных артефактов.</font></p> <p> <font><b>Узел (node)</b></font><font> представляет собой физически существующий элемент системы, который может обладать вычислительным ресурсом или являться техническим устройством. Графически узел на диаграмме развертывания изображается в форме трехмерного куба. Узел имеет имя, которое указывается внутри этого графического символа.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m6ff6866e.gif'></p> <p> <font>Изображения узлов могут расширяться, чтобы включить дополнительную информацию о спецификации узла. Если дополнительная информация относится к имени узла, то она записывается под этим именем в форме помеченного значения.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m57fdd96a.png'></p> <p> <font><b>Устройство (device</b></font><font><b>)</b></font><font> – это физическое оборудование: компьютер или устройство, связанное с системой. Устройство (device) – узел без процессора и памяти.</font> </p> <p> <font><b>Устройство</b></font><font><i><b>(device)</b></i></font><font><font><font> </font></font></font><font>представляет собой узел, который обладает некоторым общим вычислительным ресурсом со способностью обрабатывать развернутые на нем артефакты.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m383e57b.gif'></p> <p> <font>Узлы могут содержать </font><font><b>артефакты (artifacts</b></font><font>).</font><font><b>Артефакт </b></font><font><i><b>(artifact)</b></i></font><font><font><font> </font></font></font><font>представляет собой элемент модели, который специфицирует некоторую физически существующую часть информации, используемую или производимую в ходе разработки программного обеспечения или в процессе развертывания и функционирования системы.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_596b3879.gif'></p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <ol>  <li>  <h1> <font>Дисциплина: Компьютерная геометрия и графика</font></h1> </li></ol> " ],
 ["Цветовые модели RGB, CMIK, HSB. Системы соответствия цветов. Разрешение.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Для того, чтобы получать предсказуемые результаты на экране и печати нужно хорошо представлять работу двух противоположных систем описания цвета в компьютере: аддитивной и субтрактивной.</font></p> <p> <font><b>Аддитивные и субтрактивные цвета</b></font><font><b> </b></font> </p> <p> <font><b>Аддитивный цвет</b></font><font> (от англ. add — добавлять, складывать) получается при соединении лучей света разных цветов. В этой системе отсутствие всех цветов представляет собой черный цвет, а присутствие всех цветов — белый. Система аддитивных цветов работает с излучаемым светом, например, от монитора компьютера.</font> </p> <p> <font>В этой системе используются три основных цвета:</font><font><b>красный, зеленый и синий (RGB).</b></font><font> Если их смешать друг с другом в равной пропорции, они образуют белый цвет, а при смешивании в разных пропорциях — любой другой.</font></p> <p> <font><b>В системе субтрактивных цветов</b></font><font> (от англ. subtract — вычитать) происходит обратный процесс: вы получаете какой-либо цвет, вычитая другие цвета из общего луча отраженного света. В этой системе белый цвет появляется в результате отсутствия всех цветов, тогда как их присутствие дает черный цвет. Система субтрактивных цветов работает с отраженным светом, например, от листа бумаги. Белая бумага отражает все цвета, окрашенная — некоторые поглощает, а остальные отражает.</font></p> <p> <font>В системе субтрактивных цветов основными являются</font><font><b>голубой, пурпурный и желтый цвета (CMY)</b></font><font> — противоположные красному, зеленому и синему. Когда эти цвета смешиваются на белой бумаге в равной пропорции, получается черный цвет. Вернее, предполагается, что должен получиться черный цвет. В действительности типографские краски поглощают свет не полностью и поэтому комбинация трех основных цветов выглядит темно-коричневой. Чтобы исправить возникающую неточность, для представления тонов истинно черного принтеры добавляют немного черной краски. Систему цветов, основанную на таком процессе четырехцветной печати, принято обозначать аббревиатурой CMYK.</font></p> <p> <font><b>Цветовая модель RGB</b></font><font><b>. </b></font><font>Монитор компьютера создает цвет непосредственно излучением света и использует, таким образом, систему цветов RGB. Поверхность монитора состоит из мельчайших точек (пикселов) красного, зеленого и синего цветов, форма точек варьируется в зависимости от типа электронно-лучевой трубки (ЭЛТ). Пушка ЭЛТ подает сигнал различной мощности на экранные пикселы. Каждая точка имеет один из трех цветов, при попадании на нее луча из пушки, она окрашивается в определенный оттенок своего цвета, в зависимости от силы сигнала. Поскольку точки маленькие, уже с небольшого расстояния они визуально смешиваются друг с другом и перестают быть различимы. Комбинируя различные значения основных цветов, можно создать любой оттенок из более чем 16 миллионов доступных в RGB. Лампа сканера светит на поверхность захватываемого изображения (или сквозь слайд); отраженный или прошедший через слайд свет, с помощью системы зеркал, попадает на чувствительные датчики, которые передают данные в компьютер так же в системе RGB. Система RGB адекватна цветовому восприятию человеческого глаза, рецепторы которого тоже настроены на красный, зеленый и синий цвета.</font></p> <p> <font><b>Цветовая модель CMYK</b></font><font><b>. </b></font><font>Система цветов CMYK была широко известна задолго до того, как компьютеры стали использоваться для создания графических изображений. Триада основных печатных цветов: голубой, пурпурный и желтый (CMY, без черного) является, по сути, наследником трех основных цветов живописи (синего, красного и желтого). Изменение оттенка первых двух связано с отличным от художественных химическим составом печатных красок, но принцип смешения тот же самый. И художественные, и печатные краски, несмотря на провозглашаемую самодостаточность, не могут дать очень многих оттенков. Поэтому художники используют дополнительные краски на основе чистых пигментов, а печатники добавляют, как минимум, черную краску. Система CMYK создана и используется для печати. Все файлы, предназначенные для вывода в типографии, должны быть конвертированы в CMYK. Этот процесс называется цветоделением.</font></p> <p> <font><b>Цветовые модели HSB и HSL</b></font><font><b>. </b></font><font>Системы цветов RGB и CMYK базируются на ограничениях, накладываемых аппаратным обеспечением (мониторами и сканерами в случае с RGB и типографскими красками в случае с CMYK). Более интуитивным способом описания цвета является представление его в виде тона, насыщенности и яркости — система HSB. Она же известна как система HSL (тон, насыщенность, освещенность). Тон представляет собой конкретный оттенок цвета на цветовом круге, отличный от других: красный, зеленый, голубой и т. п. Насыщенность цвета характеризует его относительную интенсивность (или чистоту). Уменьшая насыщенность, например, красного, мы делаем его более пастельным, приближаем к серому. Яркость (или освещенность) цвета показывает величину затемнения или осветления исходного оттенка. Система HSB имеет перед другими системами важное преимущество: она больше соответствует природе цвета, хорошо согласуется с моделью восприятия цвета человеком. Многие оттенки можно быстро и удобно получить в HSB, конвертировав затем в RGB или CMYK, доработав в последнем случае, если цвет был искажен.</font></p> <p> <font>Ограниченность цветового охвата и аппаратная зависимость цветовых моделей различных устройств приводят к возникновению ошибок в цветопередаче на этапе перехода от одной цветовой модели к другой. Причем при печати изображений нельзя выбирать нужный нам цвет непосредственно на мониторе, так как на цвет на экране монитора влияют различные факторы, такие как условия освещенности, срок эксплуатации, точность настройки монитора.</font></p> <p> <font>С целью повышения точности воспроизведения цвета на этапе печати в современные графические программы включены системы сопоставления цветов и палитры, которые являются альтернативой цветовым моделям.</font></p> <p> <font><b>Под системой соответствия цветов</b></font><font> понимается библиотека цветовых образцов, определенным образом названных и каталогизированных. Если при использовании некоторой цветовой модели, нужный цвет задается с помощью его числовых параметров, то для просматриваемого цветового формата, выбор цветового образца производится из выбранной в библиотеке цветов.</font></p> <p> <font>Системы соответствия цветов (color managing system, CMS) были созданы ведущими фирмами, специализирующимися в области полиграфии и на производстве красителей. Суть этой технологии состоит в том, чтобы независимо от программного обеспечения цвет передавался от одного этапа обработки (например, сканирования) к другому (печати) без искажений. Таким образом, обеспечивается видимая однородность цветового пространства для всех периферийных устройств и приложений, работающих в системе.</font> </p> <p> <font><b>Система соответствия цветов включает в себя набор следующих основных компонентов:</b></font></p> <p> • <font><b>эталонные таблицы</b></font><font> (атласы или каталоги) цветов, содержащихся в одноименных палитрах. Эталонные таблицы представляют собой набор цветов (образцов), которые могут быть адекватным образом отображены в процессе печати на соответствующей им бумаге. Изготовление эталона тщательно контролируется с целью минимизации вариаций цветов. Каждому цвету присваивается свое уникальное имя и указывается тип пигмента или состав смеси из различных пигментов, необходимых для его реализации. Указывается также идентифицированный с данным пигментом тип бумаги. В дополнение к этой таблице, используемой как справочник, пользователь получает образцы цветов, которые можно вырезать и прикрепить к изображению. Благодаря этим образцам система обеспечивает точный визуальный контроль соответствия того, что мы видим на экране, с тем, что мы получим на печати;</font></p> <p> • <font><b>электронные палитры</b></font><font> (или просто палитры). Палитры представляют собой электронные аналоги таблиц цветовых образцов (эталонов). В современных графических редакторах используется ряд стандартных палитр, также есть возможность создания своей (пользовательской) палитры. Под цветовой палитрой в большинстве графических редакторов понимается библиотека заранее определенных цветов;</font></p> <p> • <font><b>специальные программные и аппаратные средства для калибровки устройств вывода.</b></font></p> <p> <font><b>Разреше́ние</b></font><font><b> </b></font><font>— величина, определяющая количество точек (элементов растрового изображения) на единицу площади (или единицу длины). Термин обычно применяется к изображениям в цифровой форме, хотя его можно применить, например, для описания уровня грануляции фотопленки, фотобумаги или иного физического носителя. Более высокое разрешение (больше элементов) типично обеспечивает более точные представления оригинала. Как правило, разрешение в разных направлениях одинаково, что даёт пиксел квадратной формы.</font></p> <p> <br> </p> <p> <br> </p> <p> <br> </p> " ],
 ["Графические языки. Метафайлы. Архитектура графических терминалов и графических рабочих станций. Реализация аппаратно-программных модулей графической системы.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Графические языки (ГЯ)</b></font><font> – формальные языки, предназначенные для описания графических изображений и алгоритмов их обработки на ЭВМ. ГЯ относятся к классу проблемно-ориентированных языков.</font> </p> <p> <font><b>Графический язык программирования</b></font><font> — язык, предназначенный для написания программы для компьютера или вычислительного устройства, в котором вместо текстового описания алгоритма работы используется графическое. Примеры графических языков программирования: графическое расширение FORTRANа система GRAF, GALA. В качестве одной из отечественных разработок по графическому расширению FORTRANа можно назвать 'AВТОКОД для работы с графическим дисплеем EC-7064', при использовании которого обеспечивается пакетный режим работы, когда информация только выводится на дисплей.</font> </p> <p> <font>Наряду с FORTRANом в качестве языка для графического расширения использовался ALGOL. В языке предусмотрены 2 группы геометрических операндов - простые геометрические элементы (точки, прямые, плоскости, последовательности точек, поверхности, тела) и составные геометрические элементы, образованные либо из элементов одного, либо разных типов. Над геометрическими операндами определены геометрические операции. Графические логические операции служат для проверки значения геометрического операнда и проверки, содержится ли геометрический операнд в некотором другом. Имеются графические операции ввода/вывода и увязывания физико-технических данных с геометрическими операндами.</font> </p> <p> <font><b>Метафайл (англ. Metafile</b></font><font>)</font><font> — это общий термин для формата файлов, который может дополнительно хранить в себе и данные (доп. сведения) о хранимых в нём (файле) данных — сведения, которые в обычном режиме просмотра содержимого сокрыты от пользователя. В графических файлах — дополнительная неграфическая информация о дате создания, применённых инструментах и их данных, также водяной знак.</font> </p> <p> <font>Метафайл обычно разрабатывается как составная часть какой-либо графической системы. При этом его функциональные возможности однозначно соответствуют возможностям этой системы.</font><font><b>Способ кодирования выбирается по одному из следующих критериев:</b></font></p> <p> <font>- минимальность объема кодированной информации,</font> </p> <p> <font>- минимальность времени для кодирования и декодирования, </font> </p> <p> <font>- наглядность (возможность чтения и редактирования). </font> </p> <p> <font>В зависимости от выбранного способа кодирования метафайл может использоваться в качестве средства хранения и передачи изображений, протокола взаимодействия отдельных подсистем, языка описания изображений.</font></p> <p> <font><b>GKSM</b></font><font> - стандарт de-facto на графический метафайл в рамках системы GKS. По функциональным возможностям GKSM полностью соответствует системе GKS, поэтому он легко интерпретируется в соответствующих стандарту системах GKS. Кодирование в GKSM текстовое, что позволяет просматривать и редактировать метафайл GKS.</font></p> <p> <font><b>CGM (Computer Graphics Metafile</b></font><font>) - стандарт ISO на графический метафайл. Функционально CGM соответствует стандарту CGI. В CGM предусмотрены три способа кодирования - символьное, двоичное и текстовое. Символьное кодирование наиболее компактно и предназначено для хранения и транспортировки информации. Двоичное кодирование требует минимальных усилий по кодированию/декодированию и предназначено для внутрисистемного использования. Текстовое кодирование наиболее наглядно и обеспечивает возможность визуального просмотра и редактирования графических файлов.</font></p> <p> <font><b>WMF</b></font><font><b> (</b></font><font><b>Microsoft</b></font><font><b> </b></font><font><b>Windows</b></font><font><b> </b></font><font><b>MetaFile</b></font><font>), </font><font><b>GEM</b></font><font><b> (</b></font><font><b>GEM</b></font><font><b> </b></font><font><b>Draw</b></font><font><b> </b></font><font><b>File</b></font><font><b> </b></font><font><b>Format</b></font><font>), </font><font><b>PIC</b></font><font><b> (</b></font><font><b>Lotus</b></font><font><b> </b></font><font><b>Graphics</b></font><font><b> </b></font><font><b>File</b></font><font><b> </b></font><font><b>Format</b></font><font>), </font><font><b>SLD</b></font><font><b> (</b></font><font><b>AutoCad</b></font><font><b> </b></font><font><b>Slide</b></font><font><b> </b></font><font><b>File</b></font><font><b> </b></font><font><b>Format</b></font><font>) и др. - это локальные стандарты на метафайл в рамках соответствующих программных систем. Прикладные или проблемно-ориентированные графические протоколы обеспечивают наиболее эффективный способ хранения и передачи графических данных в прикладных системах. Кодирование информации в этих протоколах производится без потери семантики и в наиболее сжатой форме, что обеспечивает минимальность объема хранящейся или передаваемой информации и допускает свободу в выборе различных способов графического представления данных.</font></p> <p> <font><b>Архитектура графических терминалов и графических рабочих станций.</b></font></p> <p> <font>Графические рабочие станции представляют собой компьютеры, позволяющие выполнять программы обработки графики с высоким разрешением, сильно нагружающие центральный процессор (ЦП) и графические наборы микросхем. К числу таких специализированных приложений относятся САПР/АСУП (автоматизированные системы проектирования/ автоматизированные системы управления производством), системы визуализации данных, автоматизированные системы разработки программного обеспечения (</font><font>CASE</font><font>). В большинстве этих программ реализуется трехмерная графика, поэтому для их выполнения требуются соответствующие аппаратные средства.</font></p> <p> <font>Перейдем же к собственно графическим станциям. Их 'сердцем', как правило, являются RISC-процессоры. В них жестко 'зашит' минимально необходимый набор команд, которые выполняются очень быстро, обычно за один такт процессора; иногда выполняются и несколько команд в один такт. Необходимое для работы ЭВМ количество команд обеспечивается микропрограммно, т.е. часть команд на процессорном уровне подразделяется на микропрограммные, состоящие в свою очередь из некоторого количества элементарных команд. Для программиста эти команды практически неразличимы. RISC-архитектура процессора обеспечивает большую производительность и гибкость. Например, в рабочих станциях Silicon Graphics Inc (SGI) в основном используется семейство процессоров MIPS R (MIPS - Million Instructions Per Second). Имеются также компьютеры с процессорами Intel Pentium III Xeon, а также рабочие станции на основе суперкомпьютеров Cray. В большинстве графических станций SGI используются процессоры MIPS R4400, R4600, R5000, R8000, R10000 и R12000 с тактовыми частотами от 90 до 275 МГц. Необходимо отметить, что ситуация с линейкой процессоров MIPS значительно отличается от линейки процессоров Intel. У каждого следующего процессора Intel тактовая частота становилась все выше для обеспечения большего быстродействия, в то время как подход SGI иной. Все рабочие станции, кроме самых простых (на-пример, SGI Indy), построены по мультипроцессорной архитектуре, причем, в отличие от PC, она не всегда симметричная. Процессоры серии MIPS R являются 64-битными, построенными по суперскалярной архитектуре.</font></p> <p> <font>В настоящее время на базе процессоров MIPS выпускаются различные модели графических станций. Графические станций SGI широко применяются при создании фильмов в основном для анимации и создания спецэффектов, а также при проектировании в системах CAD.</font></p> <p> <font><b>Реализация аппаратно-программных модулей графической системы</b></font></p> <p> <font>Видеосистема современного компьютера состоит из обязательной графической (формирующей изображение программно) и дополнительной подсистемы обработки видеоизображений. Обе эти составляющие части обычно используют общий монитор, а соответствующие аппаратные средства системного блока могут располагаться на раздельных картах или объединяться на одном комбинированном адаптере, который можно назвать адаптером дисплея (Display Adapter).</font></p> <p> <font><b>Графический адаптер служит для программного формирования графических</b></font><font> и текстовых изображений и является промежуточным элементом между монитором и шиной компьютера. Изображение строится по программе, исполняемой центральным процессором, в чем ему могут помогать графические акселераторы и сопроцессоры. В монитор адаптер посылает сигналы управления яркостью лучей RGB (Red, Green, Blue - красный, зеленый и синий - базисные цвета) и синхросигналы строчной и кадровой разверток.</font> </p> <p> <font>Все компоненты дисплейного адаптера могут размещаться на одной карте расширения, а зачастую они устанавливаются прямо на системной плате, используя преимущества локального подключения к системной шине.</font> </p> <p> <font><b>Дисплей.</b></font><font>Самым главным устройством вывода визуальной информации является дисплей (display - устройство отображения).</font> </p> <p> <font>Монитор содержит только ЭЛТ с видеоусилителями сигналов яркости лучей, генераторы разверток, блок питания и схемы управления этими узлами.</font> </p> <p> <font>Монитор компьютера должен обеспечивать существенно более широкую полосу пропускания видеосигнала, чем телевизионный, поэтому композитный вход для него неприемлем.</font> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <font><b>Дисплейные адаптеры</b></font></p> <p> <font>Дисплейным адаптером условимся называть блок компьютера, к которому подключается дисплей - чаще всего, монитор на электронно-лучевой трубке.</font><img src='/static/i_0067f68bc106c46b_html_m1236690f.png'> </p> <p> <font>Рассмотрим функциональную схему графического адаптера, которая с некоторыми добавлениями или исключениями применима практически ко всем адаптерам, применяемым в PC.</font></p> <p> <font>Поскольку адаптер предназначен для подключения монитора, его обязательным элементом будет контроллер ЭЛТ (CRT Controller). В задачу этого контроллера входит согласованное формирование сигналов сканирования видеопамяти (адрес и стробы чтения) и сигналов вертикальной и горизонтальной синхронизации монитора. Контроллер ЭЛТ должен обеспечивать требуемые частоты развертки и режимы сканирования видеопамяти, которые зависят от режима отображения (графический или текстовый) и организации видеопамяти, о чем говорилось ранее. Опорной частотой для работы контроллера является - частота вывода пикселов в графических режимах или точек разложения символов в текстовом режиме.</font></p> <p> <font>Видеопамять является специальной областью памяти, из которой контроллер ЭЛТ организует циклическое чтение содержимого для регенерации изображения. Традиционно для видеопамяти в карте распределения памяти IBM PC была выделена область адресов A0000-BFFFFh, непосредственно доступная любому процессору х86. Первым адаптерам (MDA, CGA) этой области было более чем достаточно. Адаптеры EGA эти 128 Кбайт использовали уже полностью, а для дальнейшего увеличения объема, потребовавшегося адаптерам VGA и SVGA, пришлось применять технику переключения банков. Эта вынужденная мера осложняет программное формирование изображения, которое в режимах высокого разрешения с большим количеством цветов уже не помещается в один банк. Типовой объем видеопамяти достиг 4 Мбайт у рядовых адаптеров. Современные графические адаптеры имеют возможность переадресации видеопамяти в область старших адресов (выше границы 16 Мбайт), что позволяет в защищенном режиме процессоров 386+ работать с цельными образами экранов.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Алгоритмы сжатия изображений. Форматы графических файлов.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Алгоритмы сжатия изображений</b></font><font> - бурно развивающаяся область машинной графики. Основной объект приложения усилий в ней - изображения - своеобразный тип данных, характеризуемый тремя особенностями:</font></p> <p> <font>Алгоритмы сжатия изображений делятся на два больших класса:</font><font><b>без потерь и с потерями.</b></font><font> В первом случае в ходе компрессии информация об изображении сохраняется в полном объеме, а во втором – частично утрачивается. Первая группа методов сжатия обеспечивает восстановление исходного изображения без потерь и искажений. Для хранения изображений, предназначенных для дальнейшей обработки, следует применять форматы, использующие именно такие методы сжатия.</font> </p> <p> <font><b>Алгоритмы сжатия изображений без потерь.</b></font></p> <p>  <font><b>Алгоритм </b></font><font><b>RLE</b></font><font><b>.</b></font><font><b> </b></font>  <font>  Данный алгоритм необычайно прост в реализации. Групповое кодирование - от английского Run Length Encoding (RLE) - один из самых старых и самых простых алгоритмов архивации графики. Изображение в нем (как и в нескольких алгоритмах, описанных ниже) вытягивается в цепочку байт по строкам растра. Само сжатие в RLE происходит за счет того, что в исходном изображении встречаются цепочки одинаковых байт. Замена их на пары  &lt;счетчик повторений, значение&gt;  уменьшает избыточность данных.  </font> </p> <p> <font><b>Алгоритмы </b></font><font><b>LZ</b></font><font><b> и</b></font><font><b>LZW</b></font><font><b>.</b></font><font><b> </b></font><font>Название алгоритм получил по первым буквам фамилий его разработчиков - Lempel, Ziv и Welch. Сжатие в нем, в отличие от RLE, осуществляется уже за счет одинаковых цепочек байт.</font></p> <p>  <font><b>Алгоритм LZ.</b></font>  <font>  Один из достаточно простых вариантов этого алгоритма, например, предполагает, что во входном потоке идет либо пара &lt;счетчик, смещение относительно текущей позиции&gt;, либо просто  &lt;счетчик&gt;  'пропускаемых' байт и сами значения байтов. При разархивации для пары &lt;счетчик, смещение&gt; копируются  &lt;счетчик&gt;  байт из выходного массива, полученного в результате разархивации, на  &lt;смещение&gt;  байт раньше, а  &lt;счетчик&gt;  (т.е. число равное счетчику) значений 'пропускаемых' байт просто копируются в выходной массив из входного потока. Данный алгоритм является несимметричным по времени, поскольку требует полного перебора буфера при поиске одинаковых подстрок. В результате нам сложно задать большой буфер из-за резкого возрастания времени компрессии. Однако потенциально построение алгоритма, в котором на  &lt;счетчик&gt;  и на  &lt;смещение&gt;  будет выделено по 2 байта (старший бит старшего байта счетчика - признак повтора строки/копирования потока), даст нам возможность сжимать все повторяющиеся подстроки размером до 32Кб в буфере размером 64Кб.  </font> </p> <p> <font>При этом мы получим увеличение размера файла в худшем случае на 32770/32768 (в двух байтах записано, что нужно переписать в выходной поток следующие 215 байт), что совсем неплохо. Максимальная степень сжатия составит в пределе 8192 раза. В пределе, поскольку максимальное сжатие мы получаем, превращая 32Кб буфера в 4 байта, а буфер такого размера мы накопим не сразу. Однако, минимальная подстрока, для которой нам выгодно проводить сжатие, должна состоять в общем случае минимум из 5 байт, что и определяет малую ценность данного алгоритма. К достоинствам LZ можно отнести чрезвычайную простоту алгоритма декомпрессии.</font></p> <p> <font><b>Алгоритм LZW</b></font><font>. Данный вариант алгоритма будет использовать дерево для представления и хранения цепочек. Очевидно, что это достаточно сильное ограничение на вид цепочек, и далеко не все одинаковые подцепочки в нашем изображении будут использованы при сжатии. Однако в предлагаемом алгоритме выгодно сжимать даже цепочки, состоящие из 2 байт.</font></p> <p> <font><b>Алгоритм Хаффмана с фиксированной таблицей CCITT GROUP 3</b></font><font><b>. </b></font><font>Близкая модификация алгоритма используется при сжатии черно-белых изображений (один бит на пиксел). Полное название данного алгоритма CCITT Group 3. Это означает, что данный алгоритм был предложен третьей группой по стандартизации Международного Консультационного Комитета по Телеграфии и Телефонии (Consultative Committee International Telegraph and Telephone). Последовательности подряд идущих черных и белых точек в нем заменяются числом, равным их количеству. А этот ряд, уже в свою очередь, сжимается по Хаффману с фиксированной таблицей.</font></p> <p> <font><b>Lossless JPEG</b></font><font><b>.</b></font><font>Этот алгоритм разработан группой экспертов в области фотографии ( Joint Photographic Expert Group ). Lossless JPEG ориентирован на полноцветные 24-битные или 8-битные в градациях серого изображения без палитры. Он представляет собой специальную реализацию JPEG без потерь. Степени сжатия: 20, 2, 1. Lossless JPEG рекомендуется применять в тех приложениях, где необходимо побитовое соответствие исходного и декомпрессированного изображений.</font> </p> <p> <font><b>Алгоритмы сжатия с потерями.</b></font></p> <p> <font><b>Алгоритм JPEG</b></font><font><b>.</b></font><font>JPEG - один из самых новых и достаточно мощных алгоритмов. Практически он является стандартом де-факто для полноцветных изображений. Оперирует алгоритм областями 8х8, на которых яркость и цвет меняются сравнительно плавно. Вследствие этого, при разложении матрицы такой области в двойной ряд по косинусам значимыми оказываются только первые коэффициенты. Таким образом, сжатие в JPEG осуществляется за счет плавности изменения цветов в изображении.</font></p> <p> <font><b>Форматы</b></font><font><b> </b></font><font><b>графических</b></font><font><b> </b></font><font><b>файлов</b></font><font><b>.</b></font></p> <p> <font><b>BMP (Windows Device Independent Bitmap</b></font><font>). </font><font>Наиболее распространенный формат файлов для растровых изображений в системе Windows. В файле этого формата сначала записывается палитра, если она есть, а затем растр в виде битового (а точнее, байтового) массива. В битовом массиве последовательно записываются байты строк растра. Число байтов в строке должно быть кратно четырем, поэтому если количество пикселов по горизонтали не соответствует такому условию, то справа в каждую строку дописывается некоторое число битов (выравнивание строк на границу двойного слова). Формат поддерживает большинство цветовых моделей, вплоть до 24-битного пространства RGB. Полиграфический стандарт CMYK не поддерживается. В качестве алгоритма сжатия применяется RLE (Run Length Encoding) - компрессия без потери информации.</font></p> <p> <font><b>GIF (CompuServeGraphics Interchange Format</b></font><font>). Разработан в 1987 г. фирмой CompuServ для представления в Интернете графики, 'независимой' от аппаратного обеспечения. Модернизирован в 1989 г. (версия GIF89a). Формат поддерживает функции прозрачности цветов и некоторые виды анимации. Запись изображения происходит через строку, т.е. полукадрами, аналогично телевизионной системе развертки. Благодаря этому на экране сначала появляется картинка в низком разрешении, позволяющая представить общий образ, а затем загружаются остальные строки. Этот формат поддерживает 256 цветов. Один из цветов может получить свойство прозрачности благодаря наличию дополнительного двухбитового альфа-канала. Допускается включение в файл нескольких растровых изображений, воспроизводимых с заданной периодичностью, что обеспечивает демонстрацию на экране простейшей анимации. Все данные в файле сжимаются методом Lempel-Ziv-Welch (LZW) без потери качества, что дает наилучшие результаты на участках с однородной заливкой.</font></p> <p> <font><b>PNG (Portable Network Graphics</b></font><font>). Появился как альтернатива устаревающему GIF. Формат также основан на дискретной записи, однако, не только по строкам, но и по столбцам. Метод восстановления изображения на экране остался прежним. Глубина цветового охвата возросла до 48 бит. Альфа-канал поддерживает 8-битную градацию яркости (256 уровней), что позволило применять эффекты неполной прозрачности. Абсолютно новой функцией стала запись в файл информации о гамма-коррекции, т.е. поддержания одинакового уровня яркости изображения независимо от особенностей представления цвета в различных операционных системах и приложениях. Применен усовершенствованный метод сжатия без потери информации Deflate, принципиально схожий с LZW. Новый метод сжатия позволил сократить объем файлов.</font></p> <p> <font><b>JPEG</b></font><font><b> (</b></font><font><b>Joint</b></font><font><b> </b></font><font><b>Photographic</b></font><font><b> </b></font><font><b>Expert</b></font><font><b> </b></font><font><b>Group</b></font><font><b>)</b></font><font>. По существу является методом сжатия изображений с потерей части информации. Традиционно файлы с расширением jpg считают записанными в данном формате, хотя и другие форматы поддерживают сжатие методом JPEG.</font></p> <p> <font>Преобразование данных при записи происходит в несколько этапов. Независимо от исходной цветовой модели изображения все пикселы переводятся в цветовое пространство CIE LAB. Затем отбрасывается не менее половины информации о цвете, спектр сужается до палитры, ориентированной на особенности человеческого зрения. Далее изображение разбивается на блоки размером 8х8 пикселов. В каждом блоке сначала кодируется информация о 'среднем' цвете пикселов, а затем описывается разница между 'средним' цветом блока и цветом конкретного пиксела. На последнем этапе кодовая последовательность сжимается методом Хафмана.</font></p> <p> <font><b>PCD (PhotoCD - Image Pac</b></font><font>). Разработан фирмой Kodak для хранения цифровых растровых изображений высокого качества. Файл имеет внутреннюю структуру, обеспечивающую хранение изображения с фиксированными величинами разрешений, и поэтому размеры любых файлов лишь незначительно отличаются друг от друга и находятся в диапазоне 4-5 Мбайт. Каждому разрешению присвоен собственный уровень, отсчитываемый от так называемого базового (Base), составляющего 512х768 точек. Всего в файле пять уровней – от Base/16 (128х192 точек) до Base*16 (2048х3072 точек). При первичном сжатии исходного изображения применяется метод субдискретизации, практически без потери качества. Затем вычисляются разности Base-Base*4 и Base*4-Base*16. Итоговый результат записывается в файл. Чтобы воспроизвести информацию с высоким разрешением, производится обратное преобразование. Для хранения информации о цвете использована модель YCC.</font></p> <p> <font><b>PCX</b></font><font> (PC Paintbrush File Format).</font><font>Растровый формат. Впервые появился в программе PC Paintbrush для MS-DOS. После лицензирования программы Paintbrush для Windows стал использоваться рядом приложений Windows.</font></p> <p> <font><b>TGA</b></font><font> (TarGa Image File).</font><font>Растровый</font><font> </font><font>формат</font><font>. </font><font>Используется для работы с видео- и фотоизображениями. Разработан компанией Truevision при создании графических адаптеров Targa,Vista, NuVista для компьютеров PC и Macintosh.</font></p> <p> <font><b>WMF (Windows MetaFile</b></font><font>). Является 'внутренним' форматом ОС Windows на платформе IBM PC. Данный формат является наиболее распространенным векторным представлением изображания в вектроном виде. Получил популярность благодаря примению в операционных системах Microsoft семейства Windows. Представяляет собой метафайл (metafile), т.е. записанный набор команд визуализации интрефейса графических устройств (GDI).</font> </p> <p> <font><b>TIFF (Tagged Image File Format</b></font><font>). </font><font>Считается лучшим форматом для записи полутоновых изображений. Популярность формата объясняется его широкими возможностями: поддержка множества цветовых моделей, наличие 8-битного альфа-канала, сохранение обтравочных контуров, различные алгоритмы сжатия без потери информации. Формат распознается практически всеми графическими программами и позволяет хранить изображения высочайшего качества.</font></p> <p> <font>Последние версии формата поддерживают несколько способов сжатия изображений: LZW (без потери информации), ZIP (без потери информации), JPEG (с потерей части информации). Универсальным считают метод сжатия LZW.</font></p> <p> <font><b>PDF (Portable Document Format</b></font><font>). Переносимый формат представления документов. Является развитием языка PostScript в направлении интерактивной работы. Если PostScript изначально создавался как язык выводных устройств, то целью создания PDF была задача разработки единого формата, как для электронных публикаций, так и для вывода на печать. Формат позволяет включать в документ мультимедийные расширения (звук, видео), создавать диалоговые экранные формы, поддерживает гиперссылки, как внутри одного документа, так и между документами.</font></p> <ol>  <li>  <h1><font>Дисциплина: Корпоративные информационные системы</font></h1> </li></ol> " ],
 ["Понятие корпоративных информационных систем. Этапы разработки КИС. Макетирование (прототипирование).", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Разработкой, внедрением, сопровождением и эксплуатацией корпоративных информационных систем (или сокращенно КИС) занимаются специалисты по информационным технологиям (ИТ).</font></p> <p> <font><b>Корпоративные информационные системы (КИС)</b></font><font> - это интегрированные системы управления территориально распределенной корпорацией, основанные на углубленном анализе данных, широком использовании систем информационной поддержки принятия решений, электронных документообороте и делопроизводстве. КИС призваны объединить стратегию управления предприятием и передовые информационные технологии.</font></p> <p> <font><b>Под корпоративной информационной системой</b></font><font> договоримся пронимать такую информационную систему, которая поддерживает управленческий и финансовый учет на предприятии и поставляет информацию для принятия управленческих решений.</font></p> <p> <font><b>Главная задача КИС</b></font><font> - эффективное управление всеми ресурсами предприятия (материально- техническими, финансовыми, технологическими и интеллектуальными) для получения максимальной прибыли и удовлетворения материальных и профессиональных потребностей всех сотрудников предприятия.</font></p> <p><font>Этапы разработки КИС</font></p> <p> <font><b>Классический жизненный цикл</b></font></p> <p> <font>Одной из старейших последовательностей шагов разработки программного обеспечения (ПО) является классический жизненный цикл (Автор Уинстон Ройс, 1970).</font></p> <p> <font>Чаще классический жизненный цикл называют КАСКАДНОЙ или ВОДОПАДНОЙ моделью, подчеркивая, что разработка рассматривается как последовательность этапов, причем переход на следующий иерархически нижний этап происходит только после полного завершения работ на текущем этапе и возврата к пройденным этапам не предусматривается.</font> </p> <p> <font>Приведем краткое описание основных этапов.</font><font><b>Разработка начинается на системном уровне и проходит через:</b></font><img src='/static/i_0067f68bc106c46b_html_m708f7bf5.gif'></p> <p> <font>- анализ,</font></p> <p> <font>- проектирование,</font></p> <p> <font>- кодирование (реализация),</font></p> <p> <font>- тестирование,</font></p> <p> <font>- сопровождение</font></p> <p> <font>При этом моделируются действия стандартного инженерного цикла.</font></p> <p> <br> </p> <p> <font><i><b>Системный анализ</b></i></font><font> определяет роль каждого элемента в компьютерной системе, взаимодействие элементов друг с другом. Анализ начинается с определения требований и назначения подмножества этих требований программному элементу. На этом этапе начинается решение задачи планирования проекта ПО.</font></p> <p> <font><b>В ходе планирования проекта определяются</b></font><font>объем проектных работ, риск проектных работ, необходимые трудозатраты, формируются рабочие задачи, формируется план-график работ.</font></p> <p> <font><i><b>Анализ требований</b></i></font><font>, относящийся к программному элементу, т.е. к ПО, уточняет и детализирует функции ПО, характеристики ПО, интерфейс ПО.</font></p> <p> <font>Все определения документируются в спецификации анализа. </font> </p> <p> <font><i><b>Проектирование </b></i></font><font><b>создает представления</b></font><font>архитектуры ПО, модульной структуры ПО, алгоритмической структуры ПО, структуры данных, входного и выходного интерфейса (входных и выходных форм данных).</font></p> <p> <font><i><b>Кодирование (реализация)</b></i></font><font> состоит в переводе результатов проектирования в текст на языке программирования.</font></p> <p> <font><i><b>Тестирование</b></i></font><font><i> </i></font><font>– это выполнение программы для выявления дефектов в функциях, логике и форме реализации программного продукта.</font></p> <p> <font><i><b>Сопровождение </b></i></font><font>– это внесение изменений в эксплуатируемое ПО. Цели изменений: исправление ошибок, адаптация к изменениям внешней для ПО среды, усовершенствование ПОпо требованию заказчика.</font></p> <p> <font>Сопровождение ПО состоит в повторном применении каждого из предшествующих шагов (этапов) жизненного цикла, т.е. системного анализа, анализа требований, проектирования и т. д., к существующей программе, но не разработке новой программы.</font></p> <p> <font>Каждая стадия (этап) завершается выпуском полного комплекта документации, достаточной для того, чтобы разработка могла быть продолжена другой командой разработчиков.</font></p> <p> <font><b>Достоинствами классического жизненного цикла являются:</b></font></p> <p> <font> - получение плана и временного графика по всем этапам проекта,</font></p> <p> <font> - упорядочение хода разработки.</font></p> <p> <font><b>К недостаткам классического жизненного цикла относятся:</b></font></p> <p> <font> - частое отклонение реальных проектов от стандартной последовательности шагов,</font></p> <p> <font>- основанность цикла на точной формулировке исходных требований к ПО, тогда как реально в начале проекта требования заказчика определены лишь частично,</font></p> <p> <font>- доступность результатов проекта заказчику лишь в конце работы.</font></p> <p> <font><b>Макетирование (прототипирование)</b></font></p> <p> <font>На начальной стадии проекта полностью и точно сформулировать все требования к будущей модели невозможно, поскольку пользователи, как правило, не в состоянии изложить все свои требования и не могут предвидеть, как они изменятся в ходе разработки, и, кроме того, за время разработки могут произойти изменения во внешней среде, которые могут повлиять на требования к системе. Поэтому процесс создания ПО носит скорее итерационный характер, когда результаты очередной стадии разработки могут вызвать необходимость возврата к предыдущим разработкам.</font> </p> <p> <font>Поэтому ПО создается не сразу, как в случае каскадного подхода, а постепенно с использованием макетирования (прототипирования), когда создается модель требуемого программного продукта. </font><font><i><b>Под прототипом</b></i></font><font> понимается действующий программный компонент, реализующий отдельные функции.</font> </p> <p> <font><b>Модель может принимать одну из трех форм:</b></font></p> <p> <font>- бумажный макет или макет на основе ПК (изображает или рисует человеко – машинный диалог),</font></p> <p> <font>- работающий макет (выполняет некоторую часть требуемых функций),</font></p> <p> <font>- существует программа, характеристики которой затем должны быть улучшены.</font></p> <p> <font>Макетирование основывается на многократном повторении итераций, в которых участвуют заказчик и разработчик.</font></p> <p> <font>Поскольку часто заказчик не может определиться в своих требованиях по разрабатываемому продукту, а проектировщик сомневается в полноте и целесообразности требований заказчика, то</font><font><b>прототипирование (макетирование) начинается со сбора и уточнения требований к создаваемому ПО</b></font><font>.</font></p> <p> <font>Совместными усилиями разработчик и заказчик определяют все цели ПО, устанавливают, какие требования известны, а какие предстоит доопределить. </font><font><b>Следующим шагом является быстрое проектирование, </b></font><font>внимание в котором сосредотачивается на тех характеристиках ПО, которые должны быть видимы пользователю. Макет (прототип), построенный на этапе быстрого проектирования, оценивается заказчиком и используется для уточнения требований к ПО. Итерации повторяются до тех пор, пока макет не выявит все требования заказчика и не даст возможности разработчику понять, что должно быть сделано.</font></p> <p> <font><b>Достоинством макетирования</b></font><font> является обеспечение определения полных требований к ПО.</font></p> <p><font><b>К недостаткам макетирования относятся:</b></font></p> <p> <font>- возможность принятия заказчиком макета за продукт,</font></p> <p> <font>- возможность принятия разработчиком макета за продукт</font></p> <p> <font>Заказчик, получивший предварительную версию (макет) и удостоверившийся в ее работоспособности, может перестать видеть недостатки и нерешенные вопросы ПО и перестать соглашаться на дальнейшее усовершенствование, требуя скорейшего преобразования макета в рабочий продукт. В тоже время для экономии времени разработки макета, а также возможности показать работающий вариант, разработчик может использовать неэффективные средства. Забывая о причинах, побудивших использовать эти средства, разработчик может интегрировать неэффективный вариант в систему.</font></p> " ],
 ["Предприятие как объект управления. Корпоративная информационная система для автоматизированного управления.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>В общем виде процесс управления любого предприятия, можно изобразить следующей упрощенной схемой:</font></p> <p><font><b>X</b></font><sub><font><b>изм </b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> – вектор измеряемых параметров (</font><font>X</font><sub><font>1</font></sub><font>, </font><font>X</font><sub><font>2</font></sub><font> …</font><font>X</font><sub><font>n</font></sub><font>), характеризующих состояние управляемого объекта;</font><font><b>Z</b></font><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> – вектор измеряемых параметров (</font><font>Z</font><sub><font>1</font></sub><font>, </font><font>Z</font><sub><font>2</font></sub><font> …</font><font>Z</font><sub><font>m</font></sub><font>), характеризующих состояние окружающей среды;</font><font><b>U</b></font><font> - управляющее воздействие;</font><font><b>V</b></font><font> - воздействие окружающей среды;</font><font><b>W</b></font><sub><font><b>1</b></font></sub><font><b>,</b></font><font><b>W</b></font><sub><font><b>2</b></font></sub><font> – погрешности измерения,</font><font><b>t</b></font><font> - время.</font><img src='/static/i_0067f68bc106c46b_html_m38ad6d4f.png'><br></p> <p> <font>Управление предприятием рассматривается в рамках системы, включающей и предприятие, и внешнюю среду. В связи со сложностью представления предприятия как объекта управления практически невозможно построить достаточно полные математические модели предприятия, модели системы управления и внешних воздействий. Поэтому для управления предприятием используются различные упрощения. Эти упрощения касаются как процесса выработки управляющих воздействий, так и моделей предприятия, и внешних воздействий.</font></p> <p><font>Упрощенно управление предприятием можно представить </font><font><b>в виде двух составляющих</b></font><font> (см. рис. ниже):</font></p> <ol>  <li>  <p><font>программные управляющие воздействия, зависящие только от времени;</font></p>  </li><li>  <p><font>корректирующие управляющие воздействия, формируемые по принципу обратной связи, т.е. зависящие от рассогласований между текущими значениями контролируемых параметров и прогнозируемыми значениями этих параметров.</font><img src='/static/i_0067f68bc106c46b_html_m1e8b88e8.gif'></p> </li></ol> <p><font><b>x</b></font><sub><font><b>пл</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> – программное планируемое значение параметра;</font><font><b>x</b></font><sub><font><b>ф</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> - фактическое значение параметра.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_772c29de.gif'><font><b>Тогда упрощенно процесс управления предприятием можно представить в виде:</b></font></p> <p><br> </p> <p><font>Рис. Упрощенный процесс управления предприятием.</font></p> <p> <font>При рассмотрении приведенной схемы процесса управления предприятием следует договориться о понимании введенных терминов:</font></p> <ol>  <li>  <p><font><i><b>Планирование</b></i></font><font><i> </i></font><font>представляет собой процесс выработки желаемого (требуемого) поведения процесса</font><font><b>x</b></font><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> на период планирования</font><font><b>(</b></font><font><b>t</b></font><sub><font><b>0</b></font></sub><font><b>, </b></font><font><b>t</b></font><sub><font><b>пл</b></font></sub><font><b>)</b></font><font>.</font></p>  </li><li>  <p><font><i><b>Учет</b></i></font><font><b> </b></font><font>(т.е. измерение) в производственных системах заключается в определении в заданные моменты времени фактического состояния процесса</font><font><b>x</b></font><sub><font><b>ф</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font>.</font></p>  </li><li>  <p><font><i><b>Контроль</b></i></font><font> позволяет определить отклонение фактического состояния</font><font><b>x</b></font><sub><font><b>ф</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> от планируемого</font><font><b>x</b></font><sub><font><b>пл</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font>.</font></p>  </li><li>  <p><font><i><b>Регулирование</b></i></font><font><i> </i></font><font>заключается в определении скорректированного плана </font><font><b>x</b></font><sub><font><b>р</b></font></sub><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font>, т.е. по существу является решением задачи планирования при новых начальных условиях.</font></p>  </li><li>  <p><font><i><b>Анализ</b></i></font><font><i> - </i></font><font>это подведение итогов осуществления управляемого процесса за период управления, выявление факторов, повлиявших на степень достижения запланированных результатов.</font></p> </li></ol> <p> <font>Приведенная выше упрощенная схема управления предприятием является универсальной и применима ко всем процессам производственных систем. Компонентами функции</font><font><b>x</b></font><font><b>(</b></font><font><b>t</b></font><font><b>)</b></font><font> могут быть показатели, характеризующие ход производства, в частности состояние: доходов, расходов, мощностей, запасов и т.д.</font></p> <p> <font><b>На каждом предприятии можно выделить несколько направлений деятельности:</b></font><font>производство; сбыт; снабжение; финансы; кадры; и т.д.</font></p> <p> <font>Все частные производственные процессы представляют собой управляемые процессы. Управление каждым процессом осуществляется путем реализации функций управления в отдельные дискретные моменты времени.</font></p> <p><font><b>В состав функций управления входят: </b></font><font>планирование; учет; контроль; регулирование; анализ; а также функция прогнозирования.</font></p> <p> <font><i><b>Прогнозирование</b></i></font><font><i> </i></font><font>– это определение на будущее вероятностных характеристик управляемого процесса. В зависимости от целей функция прогнозирования рассматривается самостоятельно или объединяется с планированием.</font></p> <p> <font><b>Автоматизированные информационные системы управления для предприятий</b></font><font> являются тем инструментом, который позволяет повышать эффективность сбора информации, а также обеспечивать максимально оперативное и корректное ведение управленческой деятельности, в том числе, за счет моментальной обработки поступающих сведений о деятельности организации либо конкретного ее подразделения.</font></p> <p> <font>Корпоративные системы управления предприятием в первую очередь предназначены для оптимизации использования управленческого ресурса. Их применение также имеет ряд дополнительных эффектов, среди которых:</font></p> <ul>  <li>  <p><font>качественный рост уровня реализации бизнес-процессов;</font></p>  </li><li>  <p><font>повышение эффективности труда отдельно взятых сотрудников;</font></p>  </li><li>  <p><font>улучшение качества обслуживания клиентов и т.д.</font></p> </li></ul> <p> <font>Результатом внедрения программно-аппаратного комплекса автоматизированной информационной системы управления становится рост стабильности предприятия, продуктивности его работы и, как следствие, увеличение объемов прибыли.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Стратегия разработки ПО. Инкрементная стратегия. Эволюционная стратегия разработки ПО. Архитектура корпоративных информационных систем (КИС).", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Стратегии разработки ПО можно подразделить на три группы:</b></font></p> <p> <font>1. Линейная последовательность этапов разработки – однократный проход (водопадная стратегия)</font></p> <p> <font>2.Инкрементная стратегия, когда сначала определяются все требования (пользовательские и системные), а затем оставшаяся часть разработки выполняется в виде последовательности версий, первая из которых реализует часть запланированных возможностей, а все последующие версии реализуют дополнительные возможности до тех пор, пока не будет получена полная система.</font></p> <p> <font>3. Эволюционная стратегия.</font></p> <p> <font><b>Инкрементная стратегия</b></font></p> <p> <font>Инкрементная модель является классическим примером инкрементной стратегии разработки ПО, объединяя элементы последовательной водопадной модели с итерационной философией макетирования. Она представляет собой несколько поставок (инкрементов) представляющих собой последовательность анализа, проектирования, кодирования и тестирования.</font></p> <p> <font>Разработка первого инкремента позволяет получить базовый продукт, реализующий базовые требования, при этом многие вспомогательные требования остаются нереализованными. План следующих инкрементов предусматривает последовательную модификацию базового продукта, обеспечивающих дополнительные характеристики и функциональность.</font></p> <p> <font>По своей природе инкрементный процесс итеративен, но в отличие от макетирования инкрементная модель обеспечивает в конце инкрементной итерации работающий продукт.</font></p> <p> <font><b>Эволюционная стратегия разработки ПО</b></font></p> <p> <font>Эволюционную стратегию рассмотрим на примерах спиральной модели, компонентно-ориентированной модели и тяжеловесных и облегченных процессах проектирования.</font></p> <p> <font><b>Спиральная модель</b></font><font><b>. </b></font><font>Спиральная модель (автор Боэм Б, 1988 г.) опирается на лучшие свойства классического жизненного цикла и макетирования, к которым добавляется новый элемент – анализ риска, отсутствующий в этих шагах разработки.</font></p> <p> <font>Спиральная модель определяет планирование (определение целей, вариантов, ограничений), анализ риска (анализ вариантов и распознавание/выбор риска), конструирование (разработка продукта следующего уровня), оценивание (оценка заказчиком текущих результатов разработки).</font></p> <p> <font>С каждой итерацией по спирали (продвижением от центра к периферии) строятся все более полные версии ПО. В первом витке спирали определяются:</font></p> <p> <font>1) начальные цели, варианты и ограничения;</font></p> <p> <font>2) распознавание и анализ риска;</font></p> <p> <font>3) необходимость использования макетирования;</font> </p> <p> <font>4) оценка заказчиком конструктивной работы и внесение предложения по модификации;</font></p> <p> <font>5) следующая фаза планирования и анализа риска, базируемая на предложениях заказчика.</font></p> <p> <font>В каждом цикле по спирали результаты анализа риска формируются в виде «продолжать, не продолжать». Если риск слишком велик, проект может быть остановлен. В большинстве случаев движение по спирали продолжается, с каждым шагом продвигая разработчиков к более общей модели системы. В каждом цикле по спирали требуется конструирование, которое может быть реализовано классическим жизненным циклом или макетированием.</font></p> <p> <font><b>К достоинствам спиральной модели относится:</b></font></p> <p> <font>1) наиболее реальное (в виде эволюции) отображение разработки программного обеспечения,</font></p> <p> <font>2) возможность явно учитывать риск на каждом витке эволюционной разработки,</font></p> <p> <font>3) включение шага системного подхода в итерационную структуру разработки,</font></p> <p> <font>4) использование моделирования для уменьшения риска и совершенствования программного изделия.</font></p> <p> <font><b>Недостатками спиральной модели являются:</b></font></p> <p> <font>1) повышенные требования к заказчику,</font></p> <p> <font>2) трудности контроля и управления временем разработки.</font></p> <p> <font><b>Компонентно-ориентированная модель</b></font><font><b>. </b></font><font>Компонентно-ориентированная модель является развитием спиральной модели и основывается на эволюционной стратегии разработки ПО. В этой модели конкретизируется содержание конструирования – оно отображает тот факт, что в современных условиях новая разработка должна основываться на повторном использовании существующих программных компонентов.</font></p> <p> <font>К достоинствам компонентно-ориентированной модели относится:</font></p> <p> <font>1) уменьшение времени разработки ПО;</font></p> <p> <font>2) снижение стоимости программной разработки;</font> </p> <p> <font>3) повышение производительности разработки.</font></p> <p> <font><b>Тяжеловесные и облегченные процессы</b></font><font><b>. </b></font><font>Традиционно для упорядочения и ускорения программных разработок использовались строго упорядочивающие так называемые тяжеловесные процессы. В этих процессах прогнозируется весь объем предстоящих работ, поэтому они называются прогнозирующимися процессами. Порядок, который должен выполнять при этом человек-разработчик, чрезвычайно строг.</font></p> <p> <font>В последние годы появилась группа новых облегченных процессов разработки ПО. Их также называют подвижными процессами. Эти процессы привлекательны отсутствием бюрократизма, характерного для тяжеловесных (прогнозирующих) процессов. Облегченные процессы разработки ПО воплощают разумный компромисс между строгой дисциплиной и отсутствием ее.</font></p> <p> <font>Подвижные процессы требуют меньшего объема документации и ориентированы на человека. Подвижные процессы учитывают особенности современного заказчика, а именно, частые изменения его требований к ПО. Подвижные процессы адаптируют изменения требований (адаптивная природа).</font></p> <p> <font><b>Архитектура КИС</b></font></p> <p> <font>Опыт последних лет разработки ПО показывает, что архитектура информационной системы должна выбираться с учетом нужд бизнеса, а не личных пристрастий разработчиков. Далее рассматриваются существующие клиент-серверные архитектуры построения информационных систем.</font></p> <p> <font>Не секрет, что правильная и четкая организация информационных бизнес-решений является слагающим фактором успеха любой компании. Особенно важным этот фактор является для предприятий среднего и малого бизнеса, которым необходима система, которая способна предоставить весь объем бизнес-логики для решения задач компании. В то же время, такие системы для компаний со средним и малым масштабом сетей часто попадают под критерий “цена - качество”, то есть должны обладать максимальной производительностью и надежностью при доступной цене.</font> </p> <p> <font>Первоначально системы такого уровня базировались на классической</font><font><b>двухуровневой клиент-серверной архитектуре</b></font><font>(Two-tier architecture).</font></p> <p> <font>Данная клиент-серверная архитектура характеризуется наличием двух взаимодействующих самостоятельных модулей -</font><font><b>автоматизированного рабочего места (АРМа</b></font><font>) и</font><font><b>сервера базы данных</b></font><font>, в качестве которого может выступать Microsoft SQL Server, Oracle, Sybase и другие. Сервер БД отвечает за хранение, управление и целостность данных, а также обеспечивает возможность одновременного доступа нескольких пользователей. Клиентская часть представлена так называемым “толстым” клиентом, то есть приложением (АРМ) на котором сконцентрированы основные правила работы системы и расположен пользовательский интерфейс программы. При всей простоте построения такой архитектуры, она обладает множеством недостатков, наиболее существенные из которых - это высокие требования к сетевым ресурсам и пропускной способности сети компании, а также сложность обновления программного обеспечения из-за “размазанной” бизнес-логики между АРМом и сервером БД. Кроме того, при большом количестве АРМов возрастают требования к аппаратному обеспечению сервера БД, а это, как известно, самый дорогостоящий узел в любой информационной системе.</font><img src='/static/i_0067f68bc106c46b_html_m4cfd6115.png'></p> <p> <font>Как видим, минусов у такой архитектуры достаточно, а решение тривиально - нужно отделить бизнес-логику от клиентской части и СУБД, выделив ее в отдельный слой. Так и поступили разработчики и следующим шагом развития клиент-серверной архитектуры стало внедрение среднего уровня, реализующего задачи бизнес-логики и управления механизмами доступа к БД.</font><font><b>Трехуровневая клиент-серверная архитектура (Three-tier architecture)</b></font></p> <p> <font>Плюсы данной архитектуры очевидны. Благодаря концентрации бизнес-логики на сервере приложений, стало возможно подключать различные БД. Теперь, сервер базы данных освобожден от задач распараллеливания работы между различными пользователями, что существенно снижает его аппаратные требования. Также снизились требования к клиентским машинам за счет выполнения ресурсоемких операций сервером приложений и решающих теперь только задачи визуализации данных. Именно поэтому такую схему построения информационных систем часто называют архитектурой “тонкого” клиента.</font><img src='/static/i_0067f68bc106c46b_html_569ea821.png'> </p> <p> <font>Но, тем не менее, узким местом, как и в двухуровневой клиент-серверной архитектуре, остаются повышенные требования к пропускной способности сети, что в свою очередь накладывает жесткие ограничения на использование таких систем в сетях с неустойчивой связью и малой пропускной способностью (Internet, GPRS, мобильная связь).</font></p> <p> <font>Существует еще один важный момент использования систем, построенных на такой архитектуре. Самый верхний уровень (АРМы), в целом обладающий огромной вычислительной мощностью, на самом деле простаивает, занимаясь лишь выводом информации на экран пользователя. Так почему бы не использовать этот потенциал в работе всей системы? Рассмотрим следующую архитектуру, которая позволяет решить эту задачу. </font><font><b>Распределенная архитектура системы</b></font></p> <p> <font>Еще два-три года назад реализация такой архитектуры системы для среднего и малого бизнеса была бы не возможна из-за отсутствия соответствующих недорогих аппаратных средств. Сегодня хороший ноутбук обладает мощностью, которой несколько лет назад обладал сервер крупной корпорации, и позволял рассчитывать множество важных и судьбоносных отчетов для всех сотрудников этой корпорации.</font><img src='/static/i_0067f68bc106c46b_html_5a6e2441.png'> </p> <p> <br> </p> <p> <font>Каждый АРМ независим, содержит только ту информацию, с которой должен работать, а актуальность данных во всей системе обеспечивается благодаря непрерывному обмену сообщениями с другими АРМами. Обмен сообщениями между АРМами может быть реализован различными способами, от отправки данных по электронной почте до передачи данных по сетям.</font></p> <p> <font>Еще одним из преимуществ такой схемы эксплуатации и архитектуры системы, является обеспечение возможности персональной ответственности за сохранность данных. Так как данные, доступные на конкретном рабочем месте, находятся только на этом компьютере, при использовании средств шифрования и личных аппаратных ключей исключается доступ к данным посторонних, в том числе и IT администраторов.</font></p> <p> <font>Такая архитектура системы также позволяет организовать распределенные вычисления между клиентскими машинами. Например, расчет какой-либо задачи, требующей больших вычислений, можно распределить между соседними АРМами благодаря тому, что они, как правило, обладают одной информацией в своих БД и, таким образом, добиться максимальной производительности системы.</font></p> <p> <font>Таким образом, предложенная модель построения распределенных систем вполне способна решить и реализовать функции современного программного обеспечения для предприятий среднего и малого бизнеса.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Информационные технологии управления корпорацией. Введение в основы логистики. Выбор аппаратно программной платформы, транспортные подсистемы, построение локальных и глобальных связей.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Области применения и примеры реализации информационных технологий управления корпорацией</b></font></p> <p> <font>В последние несколько лет компьютер стал неотъемлемой частью управленческой системы предприятий. Современный подход к управлению предполагает вложение денег в информационные технологии. Причем чем крупнее предприятие, тем больше должны быть подобные вложения.</font></p> <p> <font>Благодаря стремительному развитию информационных технологий наблюдается расширение области их применения. Если раньше чуть ли неединственной областью, в которой применялись информационные системы, была автоматизация бухгалтерского учета, то сейчас наблюдается внедрение информационных технологий во множество других областей. Эффективное использование корпоративных информационных систем позволяет делать более точные прогнозы и избегать возможных ошибок в управлении.</font></p> <p> <font><b>Рассмотрим наиболее важные задачи, решаемые с помощью специальных программных средств.</b></font></p> <p> <font><b>Бухгалтерский учет</b></font><font> — классическая и наиболее часто реализуемая на сегодняшний день область применения информационных технологий. Такое положение вполне объяснимо. Во-первых, ошибка бухгалтера может стоить очень дорого, поэтому очевидна выгода автоматизации бухгалтерии. Во-вторых, задача бухгалтерского учета довольно легко формализуется, так что разработка систем автоматизации бухгалтерского учета не представляет технически сложной проблемы.</font></p> <p> <font>Тем не менее разработка систем автоматизации бухгалтерского учета является весьма трудоемкой. Это связано с тем, что к системам бухгалтерского учета предъявляются повышенные требования в отношении надежности, максимальной простоты и удобства в эксплуатации. Следует отметить также постоянные изменения в бухгалтерском и налоговом учете.</font></p> <p> <font><b>Управление финансовыми потоками.</b></font><font> Внедрение информационных технологий в управление финансовыми потоками также обусловлено критичностью этой области управления предприятия к ошибкам. Неправильно построив систему расчетов с поставщиками и потребителями, можно спровоцировать кризис наличности даже при налаженной сети закупки, сбыта и хорошем маркетинге. И наоборот, точно просчитанные и жестко контролируемые условия финансовых расчетов могут существенно увеличить оборотные средства фирмы.</font></p> <p> <font><b>Управление складом, ассортиментом, закупками</b></font><font>. Далее, можно автоматизировать процесс анализа движения товара, тем самым отследив и зафиксировав те двадцать процентов ассортимента, которые приносят восемьдесят процентов прибыли. Это же позволит ответить на главный вопрос — как получать максимальную прибыль при постоянной нехватке средств? «Заморозить» оборотные средства в чрезмерном складском запасе — самый простой способ сделать любое предприятие, производственное или торговое, потенциальным инвалидом. Можно просмотреть перспективный товар, вовремя не вложив в него деньги.</font></p> <p> <font><b>Управление производственным процессом</b></font><font>. Оптимальное управление производственным процессом представляет собой очень трудоемкую задачу. Основным механизмом здесь является планирование. Автоматизированное решение подобной задачи дает возможность грамотно планировать, учитывать затраты, проводить техническую подготовку производства, оперативно управлять процессом выпуска продукции в соответствии с производственной программой и технологией.</font></p> <p> <font><b>Управление маркетингом</b></font><font><b>. </b></font><font>Управление маркетингом подразумевает сбор и анализ данных о фирмах-конкурентах, их продукции и ценовой политике, а также моделирование параметров внешнего окружения для определения оптимального уровня цен, прогнозирования прибыли и планирования рекламных кампаний. Решения большинства этих задач могут быть формализованы и представлены в виде информационной системы, позволяющей существенно повысить эффективность маркетинга.</font></p> <p> <font><b>Документооборот.</b></font><font> Документооборот является очень важным процессом деятельности любого предприятия. Хорошо отлаженная система учетного документооборота отражает реально происходящую на предприятии текущую производственную деятельность и дает управленцам возможность воздействовать на нее. Поэтому автоматизация документооборота позволяет повысить эффективность управления.</font></p> <p> <font><b>Системы поддержки принятия решений, системы интеллектуального анализа данных</b></font><font><b>. </b></font><font>Следующим немаловажным моментом в функционировании КИС является необходимость обеспечить помимо средств генерации данных также и средства их анализа. Имеющиеся во всех современных СУБД средства построения запросов и различные механизмы поиска хотя и облегчают извлечение нужной информации, но все же не способны дать достаточно интеллектуальную ее оценку, т. е. сделать обобщение, группирование, удаление избыточных данных и повысить достоверность за счет исключения ошибок и обработки нескольких независимых источников информации (как правило, не только корпоративных баз данных, но и внешних, расположенных, например, в Internet). Проблема эта становится чрезвычайно важной в связи с лавинообразным возрастанием объема информации и увеличением требований к инфосистемам по производительности — сегодня успех в управлении предприятием во многом определяется оперативностью принятия решений, данные для которых и предоставляет КИС. В этом случае на помощь старым методам приходит оперативная обработка данных (On-Line Analitical Processing, OLAP). Сила OLAP заключается в том, что в отличие от классических методов поиска запросы здесь формируются не на основе жестко заданных (или требующих для модификации вмешательства программиста и, следовательно, времени, т. е. об оперативности речь идти не может) форм, а с помощью гибких нерегламентированных подходов. OLAP обеспечивает выявление ассоциаций, закономерностей, трендов, проведение классификации, обобщения или детализации, составление прогнозов, т. е. предоставляет инструмент для управления предприятием в реальном времени.</font> </p> <p> <font>Интеграция КИС с системой оперативного анализа информации позволит во много раз увеличить эффективность первой, поскольку данные в ней будут не просто храниться, а работать.</font> </p> <p> <font><b>Предоставление информации о предприятии</b></font><font><b>. </b></font><font>Активное развитие Интернета привело к необходимости создания корпоративных серверов для предоставления различного рода информации о предприятии. Практически каждое уважающее себя предприятие сейчас имеет свой веб-сервер. Кроме того, использование веб-технологий открывает широкие перспективы для электронной коммерции и обслуживания покупателей через Интернет.</font></p> <p> <font><b>Логистика</b></font><font><b> </b></font><font>- это планирование, управление и контроль поступающего на предприятие, обрабатываемого там и покидающего это предприятие потока материальной продукции (материалов, сырья и т.п.) и соответствующего ему информационного потока. При этом ставится цель оптимального, например, с точки зрения получения прибыли, ускорения движения материальных ресурсов и товаров внутри и вне предприятия.</font></p> <p> <font><b>Особенность логистики</b></font><font> заключается в применении системного подхода к рассмотрению совокупности всех звеньев производственного процесса с позиций единой материально-производственной цепи, которая получила название логистической системы. Взаимодействие отдельных звеньев этой цепи осуществляется на техническом, технологическом, экономическом, финансовом, методологическом и других уровнях интеграции.</font></p> <p> <font>Применение логистики на одном предприятии предполагает тесное взаимодействие с партнерами (покупателями, поставщиками), целью которого является создание условий по сокращению издержек и точному выполнению своих обязательств перед партнером по времени и объемам поставок (покупок).</font> </p> <p> <font><b>Основной задачей, стоящей перед логистикой</b></font><font>, является снижение затрат, связанных с доведением материального потока от первичного источника сырья до конечного потребителя. Существующая на предприятии система учета издержек производства и обращения должна выделять затраты, возникающие в процессе применения функций логистики, формировать информацию о наиболее значимых затратах и характере их взаимодействия друг с другом с целью достижения минимальных совокупных издержек на протяжении всей логистической цепи.</font> </p> <p> <font>Логистика предполагает наличие пооперационного учета издержек на всем пути движения материального потока, который позволяет использовать показатель изменения суммы издержек в качестве критерия эффективности принимаемых решений в сфере управления материальными потоками. Причем конечная оценка эффективности функционирования логистики на предприятии измеряется достижением или недостижением оптимального соотношения между затратами, прибылью и уровнем качества продукции.</font></p> <p> <font><b>Логистическая система</b></font><font> - это адаптивная система с обратной связью, выполняющая те или иные логистические функции на предприятии. Она, как правило, состоит из нескольких подсистем и имеет развитые связи с внешней средой.</font></p> <p> <font><b>Выбор аппаратно-программной платформы</b></font></p> <p> <font>Выбор аппаратной платформы и конфигурации системы представляет собой чрезвычайно сложную задачу. Это связано, в частности, с характером прикладных систем, который в значительной степени может определять рабочую нагрузку вычислительного комплекса в целом.</font> </p> <p> <font>Сами конфигурации аппаратных и программных средств сложны, связаны с определением множества разнородных по своей сути компонентов системы, в результате чего сложность быстро увеличивается. Несколько лет назад существовала только одна вычислительная парадигма: мейнфрейм с терминалами. В настоящее время по выбору пользователя могут использоваться несколько вычислительных парадигм с широким разнообразием возможных конфигураций системы для каждой из них. Каждое новое поколение аппаратных и программных средств обеспечивает настолько больше возможностей, чем их предшественники, что относительно новые представления об их работе постоянно разрушаются.</font> </p> <p> <font>Следует отметить, что выбор той или иной аппаратной платформы и конфигурации определяется и</font><font><b>рядом общих требований, которые предъявляются к характеристикам современных вычислительных систем. К ним относятся:</b></font><font>отношение стоимость/производительность; надежность и отказоустойчивость; масштабируемость; совместимость и мобильность программного обеспечения.</font> </p> <p> <font><b>Отношение стоимость/производительность.</b></font><font> Появление любого нового направления в вычислительной технике определяется требованиями компьютерного рынка. Поэтому у разработчиков компьютеров нет одной единственной цели. Большая универсальная вычислительная машина (мейнфрейм) или суперкомпьютер стоят дорого. Для достижения поставленных целей при проектировании высокопроизводительных конструкций приходится игнорировать стоимостные характеристики. Суперкомпьютеры фирмы Cray Research и высокопроизводительные мейнфреймы компании IBM относятся именно к этой категории компьютеров. Другим крайним примером может служить низкостоимостная конструкция, где производительность принесена в жертву для достижения низкой стоимости. К этому направлению относятся персональные компьютеры различных клонов IBM PC. Между этими двумя крайними направлениями находятся конструкции, основанные на отношении стоимость/производительность, в которых разработчики находят баланс между стоимостными параметрами и производительностью. Типичными примерами такого рода компьютеров являются миникомпьютеры и рабочие станции.</font> </p> <p> <font><b>Надежность и отказоустойчивость</b></font><font>. Важнейшей характеристикой вычислительных систем является надежность. Повышение надежности основано на принципе предотвращения неисправностей путем снижения интенсивности отказов и сбоев за счет применения электронных схем и компонентов с высокой и сверхвысокой степенью интеграции, снижения уровня помех, облегченных режимов работы схем, обеспечение тепловых режимов их работы, а также за счет совершенствования методов сборки аппаратуры.</font> </p> <p> <font><b>Отказоустойчивость </b></font><font>- это такое свойство вычислительной системы, которое обеспечивает ей, как логической машине, возможность продолжения действий, заданных программой, после возникновения неисправностей. Введение отказоустойчивости требует избыточного аппаратного и программного обеспечения. Направления, связанные с предотвращением неисправностей и с отказоустойчивостью, - основные в проблеме надежности.</font> </p> <p> <font>Главной целью повышения надежности систем является целостность хранимых в них данных.</font> </p> <p> <font><b>Масштабируемость </b></font><font>представляет собой возможность наращивания числа и мощности процессоров, объемов оперативной и внешней памяти и других ресурсов вычислительной системы. Масштабируемость программного обеспечения затрагивает все его уровни от простых механизмов передачи сообщений до работы с такими сложными объектами как мониторы транзакций и вся среда прикладной системы. В частности, программное обеспечение должно минимизировать трафик межпроцессорного обмена, который может препятствовать линейному росту производительности системы. Аппаратные средства (процессоры, шины и устройства ввода/вывода) являются только частью масштабируемой архитектуры, на которой программное обеспечение может обеспечить предсказуемый рост производительности. Важно понимать, что простой переход, например, на более мощный процессор может привести к перегрузке других компонентов системы. Это означает, что действительно масштабируемая система должна быть сбалансирована по всем параметрам.</font> </p> <p> <font><b>Совместимость и мобильность программного обеспечения</b></font><font>. Концепция программной совместимости впервые в широких масштабах была применена разработчиками системы IBM/360. Основная задача при проектировании всего ряда моделей этой системы заключалась в создании такой архитектуры, которая была бы одинаковой с точки зрения пользователя для всех моделей системы независимо от цены и производительности каждой из них. Огромные преимущества такого подхода, позволяющего сохранять существующий задел программного обеспечения при переходе на новые (как правило, более производительные) модели были быстро оценены как производителями компьютеров, так и пользователями и начиная с этого времени практически все фирмы-поставщики компьютерного оборудования взяли на вооружение эти принципы, поставляя серии совместимых компьютеров.</font> </p> <p> <font><b>Транспортные подсистемы</b></font><font><b>. </b></font><font>Транспортная подсистема — комплекс протоколов, элементов сетевой инфраструктуры и программно-аппаратных средств, необходимых для построения корпоративной вычислительной сети и взаимодействия ее компонентов. Назначение подсистемы — реализация надежного и отказоустойчивого функционирования корпоративных сетей, как локальных, так и распределенных.</font> </p> <p> <font>Соответственно транспортная подсистема состоит из локальных вычислительных сетей (ЛВС) и сетей, организованных на базе выделенных каналов (VPN) или сетей общего пользования (территориально-распределенные сети).</font></p> <p> <font><b>Построение локальных и глобальных связей</b></font></p> <p> <font>Выбор «конкретной» глобальной сети невозможен без набора определённых критериев, которые позволяют судить о производительности сети. Для выбора типа глобальной сети прежде всего необходимо сформулировать подходящие критерии. С их помощью можно будет выбрать необходимые сетевые технологии, определить предполагаемый трафик и оптимизировать топографическую структуру глобальной сети.</font></p> <p> <font><b>Определение критериев.</b></font><font> Эта задача относится к числу тех, которые легко сформулировать, но очень трудно осуществить на практике. Например, всем потенциальным пользователям глобальной сети следует присвоить имена. Одновременно возникает необходимость определить их точное количество в каждой географической области. Но это ещё не всё. Достаточно сложно оценить интенсивность использования каждым пользователем полосы пропускания. </font> </p> <p> <font>Для оценки предполагаемых параметров полосы пропускания необходимо выяснить все тонкости работы пользователей.</font><font><b>Можно оценивать следующие параметры:</b></font><font> Тип сеанса соединения (интенсивность передачи данных, обработка интерактивных транзакций, доступ к ресурсам WEB, видеоконференции и т.п.); Интенсивность использования; Время максимальной нагрузки; Максимальный объём трафика; Средняя продолжительность сеансов соединения; Среднее количество байтов, переданных за сеанс; Перечень ресурсов, к которым чаще всего обращаются группы пользователей и отдельные пользователи</font></p> <p> <font>При сборе данных следует необходимо учитывать специфику использования сети. Необходимо знать, будет ли полоса пропускания зарезервирована под интенсивную передачу данных или же будет выделена под обслуживание интерактивной видеоконференции. Упомянутые режимы выдвигают совершенно противоположные требования к производительности сети. Интенсивная передача предполагает обеспечение целостности принимаемых данных – допускаются задержки в доставке пакетов. На время обслуживания интерактивной видеоконференции основное внимание уделяется своевременной доставке пакетов. Опоздавшие пакеты, как и поврежденные, игнорируются. Вывод: требования к производительности глобальной сети в значительной степени влияют на процесс её разработки.</font> </p> <p> <font><b>В обязательном порядке следует определить параметры сетей, которые будут объединены в глобальную сеть:</b></font><font>Тип и производительность каждой локальной сети; Количество подключенных пользователей; Количество хост-компьютеров, подключенных к локальной сети; Возможности несанкционированного доступа; Маршрутизируемость протокола (IP, IPX и пр.); Количество подключенных маршрутизаторов и протоколов маршрутизации; Схему адресации Internet.</font></p> <p> <font>Эта информация должна быть получена от каждого пользователя или группы пользователей, которые будут пользоваться глобальной сетью. Располагая необходимым набором данных можно заняться двумя основными вопросами –</font><font><b>технологией и топологией сетей.</b></font><font> </font> </p> <p> <font><b>Понятие технология глобальной сети включает в себя следующие аспекты:</b></font><font>Каналы передачи данных; Модули обслуживания канала (CSU – Channel Service Units) и цифровые сервисные блоки (Digital Service Units - DSU); Краевые устройства типа маршрутизаторов и коммутаторов; Адресацию Internet; Протоколы маршрутизации.</font></p> <p> <font>Необходимо определить соответствие параметров каждой из этих технологий предполагаемому трафику и требованиям к производительности глобальной сети.</font></p> <p> <font><b>Каналы передачи данных.</b></font><font>Информационный обмен между абонентами может осуществляться </font><font><b>тремя различными способами</b></font><font>: коммутацией каналов, коммутацией сообщений, коммутацией пакетов.</font></p> <p> <font><b>Коммутация каналов</b></font><font> позволяет создавать между двумя конечными станциями выделенные маршруты следования данных и обеспечивает выделение физического канала для прямой передачи данных между пользователями. Пример - телефонная связь. Стандартной линией связи с коммутацией каналов считается выделенная двухточечная частная линия. Подобные линии выделяются из местной телефонной сети (Local Exchange Carrier –LEC). Они могут быть аналоговыми или цифровыми, поддерживать скорость передачи данных до 1.544 Мбит/с. (канал типа DS-1) или 44.476 Мбит/с (канал типа DS-3), использовать электрические или световые сигналы. Допускается разделение общей полосы пропускания на дробные каналы с пропускной способностью 9.6 Кбит/с.</font></p> <p> <font>Процесс происходит следующим образом: пользователь Аi инициирует установление связи с пользователем Aj. Узел связи А, реагируя на адрес пользователя Aj, проключает соединение, в результате чего линия пользователя Аi коммутируется с линией, соединяющий узел А с узлом В. затем процедура проключения соединения повторяется с узлами В, С, D. В результате чего между пользователями Аi и Aj коммутируется канал. По окончании коммутации узел D посылает сигнал обратной связи, после получения которого пользователь Ai начинает передавать данные. Значение U1 определяет время доставки сообщения.</font></p> <p> <font><b>Коммутация сообщений</b></font><font> производится путём передачи сообщения, содержащего заголовок и данные, по маршруту, определяемому узлами сети. В заголовке сообщения указывается адрес пользователя Ai – получателя сообщения. Сообщение генерируется пользователем Ai, принимается узлом А и хранится в памяти узла. Узел А обрабатывает заголовок сообщения и определяет маршрут передачи сообщения, ведущий к узлу В. Узел В принимает сообщение, размещая в памяти, а по окончании приёма обрабатывает заголовок и выводит сообщение из памяти на линию связи , ведущую к следующему узлу. Процесс повторяется последовательно всеми узлами на маршруте от пользователя Ai к пользователю Ai. Значение U2 определяет время доставки сообщения.</font></p> <p> <font><b>Коммутация пакетов</b></font><font> производится путём разбивки сообщения на пакеты – элементы сообщения, снабжённые заголовком и имеющие фиксированную длину, - и последующей передачи пакетов по маршруту, определяемому узлами сети. Передача данных при коммутации пакетов происходит так же, как и при коммутации сообщений, но данные разделяются на последовательность пакетов 1,2,…, длина которых ограничена предельным значением, например, 1024 бит. В сетях коммутация пакетов – основной способ передачи данных. Это обусловлено тем, что коммутация пакетов приводит к малым задержкам при передаче данных через сеть, а также следующими обстоятельствами.</font></p> <p> <font>Способ коммутация каналов требует, чтобы все соединительные линии имели одинаковую пропускную способность, что сильно ужесточают требования к сети. Коммутация сообщений и пакетов позволяет передавать данные по линиям связи с любой пропускной способностью</font></p> <p> <font>Представление данных пакетами создаёт наилучшие условия для мультиплексирования потоков данных.</font> </p> <p> <font>Малая длина пакетов позволяет выделять для промежуточного хранения передаваемых данных меньшую ёмкость памяти, чем требуется для сообщений.</font></p> <p> <font>Надёжность передачи данных по линиям связи невелика. Пакеты, имея незначительную длину, в большей степени гарантированы от искажения, чем сообщения.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1> <font>Дисциплина: Интеллектуальные информационные системы</font></h1> </li></ol> " ],
 ["Основные понятия искусственного интеллекта: данные, информация, знания, интеллект, разум, психика, искусственный интеллект, информационные системы, имитирующие творческие процессы, интеллектуализация ЭВМ, интеллектуальный интерфейс.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Термин интеллект (</font><font>intelligence</font><font>) происходит от латинского</font><font>intellectus</font><font> — что означает ум, рассудок, разум; мыслительные способности человека. Соответственно</font><font><b>искусственный интеллект (</b></font><font><b>artificialintelligence</b></font><font><b>)</b></font><font> — ИИ (</font><font>AI</font><font>) обычно толкуется как свойство автоматических систем брать на себя отдельные функции интеллекта человека, например, выбирать и принимать оптимальные решения на основе ранее полученного опыта и рационального анализа внешних воздействий.</font></p> <p> <font><b>Знания:</b></font><font><b> </b></font><font>в общем случае знание — проверенный практикой результат познания действительности, верное ее отражение в мышлении человека, обладание опытом и пониманием, которые являются правильными и в субъективном, и в объективном отношении, на основании которых можно по-строить суждения и выводы, кажущиеся достаточно надежными для того, чтобы рассматриваться как знание. Поэтому в контексте ИТ термин зна-ния - это информация, присутствующая при реализации интеллектуальных функций. Обычно это отклонения, тенденции, шаблоны и зависимости, обнаруженные в информации Другими словами, интеллектуальные системы являются в то же время системами обработки знаний.</font> </p> <p> <font><b>Данными</b></font><font> называют информацию фактического характера, описывающую объекты, процессы и явления конкретной предметной области. Как правило, эта информация не требует при своем дальнейшем использовании более глубокого осмысления и анализа. </font> </p> <p> <font><b>Интеллект.</b></font><font> Различают формулировки данного понятия по нескольким направлениям:</font></p> <ul>  <li>  <p><font><b>Философскую.</b></font><font> В философии под интеллектом понимают познание, понимание, рассудочную способность к абстрактно-аналитическому расчленению (Г. Гегель), способность к образованию понятий (Э. Кант);</font></p>  </li><li>  <p><font><b>Биологическую.</b></font><font> В биологии под интеллектом понимают способность адекватно реагировать (принимать решения) в ответ на изменение окружающей обстановки;</font></p>  </li><li>  <p><font><b>Психологическую.</b></font><font> В психологии под интеллектом понимают характеристику умственного развития индивидуума, определяющую его способность целенаправленно действовать, рационально мыслить и эффективно взаимодействовать с окружающим миром.</font></p> </li></ul> <p> <font><b>Разум.</b></font><font> В отличие от интеллекта разум — категория сугубо человеческая, опирающаяся на сознание как высшую форму психологической деятельности. Принципиальным моментом в определении разума, так же как и сознания, является их общественный, социальный характер, поскольку и то и другое понятия сформировались в результате совместной человеческой деятельности.</font></p> <p> <font>Посредством разума мышление синтезирует результаты познания, создает новые идеи, выходящие за пределы сложившихся систем знания.</font></p> <p> <font><b>Психика.</b></font><font> Психика — это свойство высокоорганизованной материи — мозга, являющееся особой формой отражения действительности и включающее такие понятия, как ощущение, восприятие, память, чувства, воля, мышление и др. Отметим, что мышление и память, которыми обычно характеризуют интеллект, входят в понятие психики составными частями.</font></p> <p> <font>Существуют по крайней мере три подхода к определению понятия</font><font><b>искусственный интеллект</b></font><font>, носящие гораздо большую практическую направленность.</font></p> <p> <font>Достаточно полным определением понятия “искусственный интеллект” первого типа является следующее:</font><font><b>искусственный интеллект</b></font><font> — это область исследований, в рамках которых разрабатываются модели и методы решения задач, традиционно считавшихся интеллектуальными и не поддающимися формализации и автоматизации.</font></p> <p> <font>В качестве другого определения, достаточно точно отражающего характер второго подхода, может рассматриваться следующее</font><font><b>: искусственный интеллект</b></font><font> — это область исследований, в которой изучаются системы, строящие результирующий вывод для задач с неизвестным алгоритмом решения на основе неформализованной исходной информации, использующие технологии символьного программирования и средства вычислительной техники со специальной архитектурой.</font></p> <p> <font>Наконец, наиболее цитируемым определением третьего типа является следующее:</font><font><b>искусственный интеллект</b></font><font> — это область знаний, которая находит применение при решении задач, связанных с обработкой информации на естественном языке, автоматизацией программирования, управлением роботами, машинным зрением, автоматическим доказательством теорем, разумными машинами извлечения информации и т. д.</font></p> <p> <font>Деятельность мозга (обладающего интеллектом), направленную на решение интеллектуальных задач, мы будем называть мышлением,</font><font><b>или интеллектуальной деятельностью</b></font><font>. Интеллект и мышление органически связаны с решением таких задач, как доказательство теорем, логический анализ, распознавание ситуаций, планирование поведения, игры и управление в условиях неопределенности. </font><font><b>Характерными чертами интеллекта</b></font><font>, проявляющимися в процессе решения задач, являются способность к обучению, обобщению, накоплению опыта (знаний и навыков) и адаптации к изменяющимся условиям в процессе решения задач. Благодаря этим качествам интеллекта мозг может решать разнообразные задачи, а также легко перестраиваться с решения одной задачи на другую. Таким образом, мозг, наделенный интеллектом, является универсальным средством решения широкого круга задач (в том числе неформализованных) для которых нет стандартных, заранее известных методов решения.</font></p> <p> <font>Кстати интересен план</font><font><b>имитации мышления</b></font><font>, предложенный А. Тьюрингом. 'Пытаясь имитировать интеллект взрослого человека, — пишет Тьюринг, — мы вынуждены много размышлять о том процессе, в результате которого человеческий мозг достиг своего настоящего состояния… Почему бы нам вместо того, чтобы пытаться создать программу, имитирующую интеллект взрослого человека, не попытаться создать программу, которая имитировала бы интеллект ребенка? Ведь если интеллект ребенка получает соответствующее воспитание, он становится интеллектом взрослого человека… Наш расчет состоит в том, что устройство, ему подобное, может быть легко запрограммировано… Таким образом, мы расчленим нашу проблему на две части: на задачу построения 'программы-ребенка' и задачу 'воспитания' этой программы'.</font></p> <p> <font><b>Интеллектуализация ЭВМ</b></font><font> – это направление развития вычислительной техники, связанное с наделением ее элементами интеллекта, интеллектуализацией интерфейса с пользователем и др. Работа в данном направлении, затрагивая, в первую очередь, программное обеспечение, потребует и создания ЭВМ определенной архитектуры, используемых в системах управления базами знаний, - компьютеров баз знаний, а так же других подклассов ЭВМ. При этом ЭВМ должна обладать способностью к обучению, производить ассоциативную обработку информации и вести интеллектуальный диалог при решении конкретных задач.</font></p> <p> <font><b>Интеллектуальный интерфейс</b></font><font> - интерфейс непосредственного взаимодействия ресурсов информационного комплекса и пользователя посредством программ обработки текстовых запросов пользователя.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Классы экспертных систем: по способу формирования решения, по способу учета временного признака, по виду используемых данных и знаний, по числу используемых источников знаний.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>По степени сложности решаемых задач экспертные системы можно классифицировать следующим образом:</b></font></p> <p> <font><b>По способу формирования решения экспертные системы разделяются на два класса:</b></font><font><b> </b></font><font>аналитические и синтетические</font><font><b>. Аналитические системы</b></font><font> предполагают выбор решений из множества известных альтернатив (определение характеристик объектов), а</font><font><b>синтетические системы</b></font><font> - генерацию неизвестных решений (формирование объектов).</font></p> <p> <font><b>По способу учета временного признака</b></font><font> экспертные системы могут быть статическими или динамическими.</font><font><b>Статические системы</b></font><font> решают задачи при неизменяемых в процессе решения данных и знаниях,</font><font><b>динамические системы</b></font><font> допускают такие изменения. Статические системы осуществляют монотонное непрерываемое решение задачи от ввода исходных данных до конечного результата, динамические системы предусматривают возможность пересмотра в процессе решения полученных ранее результатов и данных.</font></p> <p> <font><b>По видам используемых данных и знаний</b></font><font> экспертные системы классифицируются на системы с детерминированными (четко определенными) знаниями и неопределенными знаниями. Под неопределенностью знаний (данных) понимается их неполнота (отсутствие), недостоверность (неточность измерения), двусмысленность (многозначность понятий), нечеткость (качественная оценка вместо количественной).</font></p> <p> <font><b>По числу используемых источников знаний</b></font><font> экспертные системы могут быть построены с использованием одного или множества источников знаний. Источники знаний могут быть альтернативными (множество миров) или дополняющими друг друга (кооперирующими).</font></p> <p> <font><b>В соответствии с перечисленными признаками классификации, как правило, выделяются следующие четыре основные класса экспертных систем:</b></font> </p> <p> <br> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m10dbd2e1.png'><br> </p> <p> <font><b>Классифицирующие экспертные системы</b></font><font>.</font><font> К аналитическим задачам прежде всего относятся задачи распознавания различных ситуаций, когда по набору заданных признаков (факторов) выявляется сущность некоторой ситуации, в зависимости от которой выбирается определенная последовательность действий. Таким образом, в соответствии с исходными условиями среди альтернативных решений находится одно, наилучшим образом удовлетворяющее поставленной цели и ограничениям.</font> </p> <p> <font>Экспертные системы, решающие задачи распознавания ситуаций, называются</font><font><b>классифицирующими</b></font><font>, поскольку определяют принадлежность анализируемой ситуации к некоторому классу. В качестве основного метода формирования решений используется метод логического дедуктивного вывода от общего к частному, когда путем подстановки исходных данных в некоторую совокупность взаимосвязанных общих утверждений получается частное заключение.</font> </p> <p> <font><b>Доопределяющие экспертные системы</b></font><font><b>.</b></font><font> Более сложный тип аналитических задач представляют задачи, которые решаются на основе неопределенных исходных данных и применяемых знаний. В этом случае экспертная система должна как бы доопределять недостающие знания, а в пространстве решений может получаться несколько возможных решений с различной вероятностью или уверенностью в необходимости их выполнения. В качестве методов работы с неопределенностями могут использоваться байесовский вероятностный подход, коэффициенты уверенности, нечеткая логика. Доопределяющие экспертные системы могут использовать для формирования решения несколько источников знаний. В этом случае могут использоваться эвристические приемы выбора единиц знаний из их конфликтного набора, например, на основе использования приоритетов важности, или получаемой степени определенности результата, или значений функций предпочтений и т.д.</font> </p> <p> <font>Для аналитических задач классифицирующего и доопределяющего типов характерны следующие проблемные области:</font> </p> <p> <font><b>Интерпретация данных</b></font><font> - выбор решения из фиксированного множества альтернатив на базе введенной информации о текущей ситуации. Основное назначение - определение сущности рассматриваемой ситуации, выбор гипотез, исходя их фактов. Типичным примером является экспертная система анализа финансового состояния предприятия.</font></p> <p> <font><b>Диагностика</b></font><font> - выявление причин, приведших к возникновению ситуации. Требуется предварительная интерпретация ситуации с последующей проверкой дополнительных фактов, например, выявление факторов снижения эффективности производства.</font></p> <p> <font><b>Коррекция</b></font><font> - диагностика, дополненная возможностью оценки и рекомендации действий по исправлению отклонений от нормального состояния рассматриваемых ситуаций.</font></p> <p> <font><b>Трансформирующие экспертные системы</b></font><font>. В отличие от аналитических статических экспертных систем синтезирующие динамические экспертные системы предполагают повторяющееся преобразование знаний в процессе решения задач, что связано с характером результата, который нельзя заранее предопределить, а также с динамичностью самой проблемной области.</font> </p> <p> <font><b>Многоагентные системы</b></font><font><b>.</b></font><font> Для таких динамических систем характерна интеграция в базе знаний нескольких разнородных источников знаний, обменивающихся между собой получаемыми результатами на динамической основе, например, через 'доску объявлений'.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Модель искусственной нейронной сети. Особенности систематизации отношений семантической сети.", " <p> <font><b>Искусственные нейронная сеть</b></font><font><b>, или просто нейронная сеть</b></font><font> — это математическая модель, а также ее программные или аппаратные реализации, построенная в некотором смысле по образу и подобию сетей нервных клеток живого организма.</font> </p> <p> <font>Первой формальной моделью</font><a href='http://www.machinelearning.ru/wiki/index.php?title=%D0%9D%D0%B5%D0%B9%D1%80%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C'><font><font>нейронных сетей</font></font></a><font> была</font><font><b>модель МакКаллока-Питтса</b></font><font>, уточненная и развитая Клини. Впервые было установлено, что НС могут выполнять любые логические операции и вообще любые преобразования, реализуемые дискретными устройствами с конечной памятью. Эта модель легла в основу теории логических сетей и конечных автоматов и активно использовалась психологами и нейрофизиологами при моделировании некоторых локальных процессов нервной деятельности. В силу своей дискретности она вполне согласуется с компьютерной парадигмой и, более того, служит её «нейронным фундаментом».</font></p> <p> <font><b>Устройство модели</b></font></p> <p><img src='/static/i_0067f68bc106c46b_html_m374bb0eb.jpg'><font> <img src='/static/i_0067f68bc106c46b_html_4c62808f.png'></font></p> <p><font>Рис.1 модель нейрона МакКалока-Питтса. Схема простой нейросети. Зелёным цветом обозначены</font><font><i>входные</i></font><font> нейроны, голубым —</font><font><i>скрытые</i></font><font> нейроны, жёлтым —</font><font><i>выходной</i></font><font> нейрон</font></p> <p> <font>Пусть имеется <img src='/static/i_0067f68bc106c46b_html_5c3e3df4.gif'>входных величин x</font><sub><font>1</font></sub><font>,…,x</font><sub><font>n</font></sub><font> бинарных признаков, описывающих объект <img src='/static/i_0067f68bc106c46b_html_47677ecb.gif'>. Значения этих признаков будем трактовать как величины импульсов, поступающих на вход нейрона через <img src='/static/i_0067f68bc106c46b_html_5c3e3df4.gif'>входных синапсов. Будем считать, что, попадая в нейрон, импульсы складываются с весами ω</font><sub><font>1</font></sub><font>,…,ω</font><sub><font>n</font></sub><font>. </font> </p> <p> <font>Если вес положительный, то соответствующий синапс возбуждающий, если отрицательный, то тормозящий. Если суммарный импульс превышает заданный порог активации ω</font><sub><font>0</font></sub><font>, то нейрон возбуждается и выдаёт на выходе 1, иначе выдаётся 0.</font> </p> <p> <font>Таким образом, нейрон вычисляет n-арную булеву функцию </font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_7ef0f24c.gif'> <font>где <img src='/static/i_0067f68bc106c46b_html_1721413.gif'>- ступенчатая функция Хевисайда.</font> </p> <p> <font>В теории нейронных сетей функцию φ, преобразующую значение суммарного импульса в выходное значение нейрона, принято называть функцией активации.</font></p> <p> <font><b>Сетевая модел</b></font><font>ь представления знаний была предложена американским психологом Куиллианом.</font></p> <p> <font>В основе моделей этого типа лежит конструкция, названная семантической сетью. Семантический подход к построению систем искусственного интеллекта находит применение в системах понимания естественного языка, в вопросно-ответных системах, в различных предметно-ориентированных системах.</font></p> <p> <font><b>Термин семантическая</b></font><font> означает смысловая, а сама семантика — это наука, устанавливающая отношения между символами и объектами, которые они обозначают, то есть наука, определяющая смысл знаков.</font></p> <p> <font>В самом общем случае </font><font><b>семантическая сеть</b></font><font> представляет собой информационную модель предметной области и имеет вид графа, вершины которого соответствуют объектам предметной области, а дуги — отношениям между ними.</font></p> <p> <font>Дуги могут быть определены разными методами, зависящими от вида представляемых знаний. Обычно дуги, используемые для представления иерархии, включают дуги типа «множество», «подмножество», «элемент». Семантические сети, применяемые для описания естественных языков, используют дуги типа «агент», «объект», «реципиент».</font></p> <p> <font>В семантических сетях существует возможность представлять знания более естественным и структурированным образом, чем в других формализмах.</font></p> <p> <font><b>Основным преимуществом</b></font><font> является то, что она более других соответствует современных представлениям об организации долговременной памяти человека.</font></p> <p> <font><b>Недостатком</b></font><font>этой модели является сложность организации процедуры поиска вывода на семантической сети.</font></p> <p> <font><b>Систематизация отношений конкретной семантической сети</b></font><font> зависит от специфики знаний предметной области и является сложной задачей. Особого внимания заслуживают общезначимые отношения, присутствующие во многих предметных областях. Именно на таких отношениях основана концепция семантической сети.</font></p> <p> <font>В пространстве семантической сети МПО случайным образом выделяются k документов. Им присваиваются соответствующие указатели.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Объектно-ориентированное представление знаний фреймами.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Фреймовая модель представления знаний</b></font><font> – была предложена М.Минским в 1979 г. как структура знаний для восприятия пространственных сцен. Эта модель, как и семантическая сеть, имеет глубокое психологическое обоснование.</font></p> <p> <font>В психологии и философии известно понятие абстрактного образа. Например, слово «комната» вызывает у слушающих образ комнаты: «жилое помещение с четырьмя стенами, полом, потолком, окнами и дверью, пло­щадью 6-20 м2». Из этого описания ничего нельзя убрать (например, убрав окна, получим уже чулан, а не комнату), но в нем есть «дырки», или «слоты», — это незаполненные значения некоторых атрибутов — количество окон, цвет стен, высота потолка, покрытие пола и др. В этой теории такой абстрактный образ называется фреймом.</font></p> <p> <font><b>Фреймом</b></font><font> называется также и формализованная модель для отображения образа.</font></p> <p> <font>В качестве идентификатора фрейму присваивается имя фрейма. Это имя должно быть единственным во всей фреймовой системе.</font></p> <p> <font>Фрейм имеет определенную</font><font><b>внутреннюю структуру</b></font><font>, состоящую из множества элементов, называемых</font><font><b>слотами,</b></font><font> которым также присваиваются имена. За слотами следуют</font><font><b>шпации</b></font><font>, в которые помещают данные, представляющие текущие значения слотов. Каждый слот в свою очередь представляется определенной структурой данных. В значение слота подставляется конкретная информация, относящаяся к объекту, описываемому этим фреймом.</font></p> <p> <font><b>Структуру фрейма можно представить так:</b></font></p> <p> <font>ИМЯ ФРЕЙМА:</font></p> <p> <font>(имя 1-го слота: значение 1-го слота),</font></p> <p> <font>(имя 2-го слота: значение 2-го слота),</font></p> <p> <font>- - - -</font></p> <p> <font>(имя N-го слота: значение N-гo слота).</font></p> <p> <font><b>Различают фреймы-образцы</b></font><font>, или прототипы, хранящиеся в базе знаний, </font><font><b>и фреймы-экземпляры,</b></font><font> которые создаются для отображения реальных ситуаций на основе поступающих данных.</font></p> <p> <font><b>Модель фрейма</b></font><font> является достаточно универсальной, поскольку позволяет отобразить все многообразие знаний о мире:</font></p> <ul>  <li>  <p> <font>через фреймы-структуры, для обозначения объектов и понятий (заем, залог, вексель);</font></p>  </li><li>  <p> <font>через фреймы-роли (менеджер, кассир, клиент);</font></p>  </li><li>  <p> <font>через фреймы-сценарии (банкротство, собрание акционеров, празднование именин);</font></p>  </li><li>  <p> <font>через фреймы-ситуации (тревога, авария, рабочий режим устройства) и др.</font></p> </li></ul> <p> <font>Важнейшим свойством теории фреймов является заимствованное из теории семантических сетей наследование свойств. И во фреймах, и в семантических сетях наследование происходит по AKO-связям (A-Kind-Of = это).</font><font><b>Слот АКО</b></font><font> указывает на фрейм более высокого уровня иерархии, откуда неявно наследуются, то есть переносятся, значения аналогичных слотов.</font></p> <p> <font>Значением слота может быть практически что угодно: числа, формулы, тексты на естественном языке или программы, правила вывода или ссылки на другие слоты данного фрейма или других фреймов. В качестве значения слота может выступать набор слотов более низкого уровня, что позволяет реализовывать во фреймовых представлениях «принцип матрешки».</font><font><b>Связи между фреймами</b></font><font> задаются значениями специального слота с именем «Связь».</font></p> <p> <font>В общем случае структура данных фрейма может содержать более широкий набор информации, в который входят следующие атрибуты.</font></p> <p> <font><b>Имя фрейма.</b></font><font> Оно служит для идентификации фрейма в системе и должно быть уникальным. Фрейм представляет собой совокупность слотов, число которых может быть произвольным. Число слотов в каждом фрейме устанавливается проектировщиком системы, при этом часть слотов определяется самой системой для выполнения специфических функций (системные слоты), примерами которых являются: слот-указатель родителя данного фрейма (IS-А), слот-указатель дочерних фреймов, слот для ввода имени пользователя, слот для ввода даты определения фрейма, слот для ввода даты изменения фрейма и т.д.</font></p> <p>  <font><b>Имя слота.</b></font>  <font>  Оно должно быть уникальным в пределах фрейма. Обычно имя слота представляет собой идентификатор, который наделен определенной семантикой. В качестве имени слота может выступать произвольный текст. Например,  &lt;Имя слота&gt;  = Главный герой романа Ф.М. Достоевского «Идиот»,  &lt;Значение слота&gt;  = Князь Мышкин. Имена системных слотов обычно зарезервированы, в различных системах они могут иметь различные значения. Примеры имен системных слотов: IS-A, HASPART, RELATIONS и т.д. Системные слоты служат для редактирования базы знаний и управления выводом во фреймовой системе.  </font> </p> <p> <font><b>Указатели наследования.</b></font><font> Они показывают, какую информацию об атрибутах слотов из фрейма верхнего уровня наследуют слоты с аналогичными именами в данном фрейме. Указатели наследования характерны для фреймовых систем иерархического типа, основанных на отношениях типа «абстрактное — конкретное». В конкретных системах указатели наследования могут быть организованы различными способами и иметь разные обозначения:</font></p> <ul>  <li>  <p> <font>U (Unique) — значение слота не наследуется;</font></p>  </li><li>  <p> <font>S (Same) — значение слота наследуется;</font></p>  </li><li>  <p> <font>R (Range) — значения слота должны находиться в пределах интервала значений, указанных в одноименном слоте родительского фрейма;</font></p>  </li><li>  <p> <font>(Override) — при отсутствии значения в текущем слоте оно наследуется из фрейма верхнего уровня, однако в случае определения значения текущего слота оно может быть уникальным. Этот тип указателя выполняет одновременно функции указателей U и S.</font></p> </li></ul> <p> <font><b>Указатель типа данных.</b></font><font> Он показывает тип значения слота. Наиболее употребляемые типы: frame — указатель на фрейм; real — вещественное число; integer — целое число; boolean — логический тип; text – фрагмент текста; list — список; table — таблица; expression — выражение; lisp — связанная процедура и т.д.</font></p> <p> <font><b>Значение слота.</b></font><font> Оно должно соответствовать указанному типу данных и условию наследования.</font></p> <p> <font><b>Демоны.</b></font><font> Демоном называется процедура, автоматически запускаемая при выполнении некоторого условия. Демоны автоматически запускаются при обращении к соответствующему слоту. Типы демонов связаны с условием запуска процедуры. Демон с условием IF-NEEDED запускается, если в момент обращения к слоту его значение не было установлено. Демон типа IF-ADDED запускается при попытке изменения значения слота. Демон IF-REMOVED запускается при попытке удаления значения слота. Возможны также другие типы демонов. Демон является разновидностью связанной процедуры.</font></p> <p> <font><b>Присоединенная процедура.</b></font><font> В качестве значения слота может использоваться процедура, называемая служебной в языке Лисп или методом в языках объектно-ориентированного программирования. Присоединенная процедура запускается по сообщению, переданному из другого фрейма. Демоны и присоединенные процедуры являются процедурными знаниями, объединенными вместе с декларативными в единую систему. Эти процедурные знания являются средствами управления выводом во фреймовых системах, причем с их помощью можно реализовать любой механизм вывода. Представление таких знаний и заполнение ими интеллектуальных систем — весьма нелегкое дело, которое требует дополнительных затрат труда и времени разработчиков. Поэтому проектирование фреймовых систем выполняется, как правило, специалистами, имеющими высокий уровень квалификации в области искусственного интеллекта.</font></p> <p> <font>Часть специалистов по системам искусственного интеллекта считают, что нет необходимости выделять фреймовые модели представления знаний, так как в них объединены все основные особенности моделей остальных типов.</font></p> <p> <font><b>Основным преимуществом фреймов</b></font><font> как модели представления знаний является то, что она отражает концептуальную основу организации памяти человека, а также ее гибкость и наглядность. Наиболее ярко достоинства фреймовых систем представления знаний проявляются в том случае, если родовидовые связи изменяются нечасто и предметная область насчитывает немного исключений. Во фреймовых системах данные о родовидовых связях хранятся явно, как и знания других типов. Значения слотов представляются в системе в единственном экземпляре, поскольку включаются только в один фрейм, описывающий наиболее понятия из всех тех, которые содержит слот с данным именем. Такое свойство систем фреймов обеспечивает экономное размещение базы знаний в памяти компьютера. Еще одно достоинство фреймов состоит в том, что значение любого слота может быть вычислено с помощью соответствующих процедур или найдено эвристическими методами. То есть фреймы позволяют манипулировать как декларативными, так и процедурными знаниями.</font></p> <p> <font><b>К недостаткам фреймовых систем</b></font><font> относят их относительно высокую сложность, что проявляется в снижении скорости работы механизма вывода и увеличения трудоемкости внесения изменений в родовую иерархию. Поэтому при разработке фреймовых систем уделяют наглядным способам отображения и эффективным средствам редактирования фреймовых структур.</font></p> <p> <font>Специальные языки представления знаний в сетях фреймов FRL (Frame Representation Language), KRL (Knowledge Representation Language), фреймовая оболочка Kappa, PILOT/2 и другие программные средства позволяют эффективно строить промышленные системы.</font></p> <p> <font>В последние годы термин «фреймовый» часто заменяют термином «объектно-ориентированный». Этот подход является развитием фреймового представления.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Методы и средства интеллектуального анализа данных.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Проведем некоторую условную классификацию средств анализа данных, разбив все их множество на четыре направления по методам, реализованным в этих системах. </font> </p> <p> <font><b>1. Методы статистической обработки данных.</b></font><font><b> </b></font> </p> <p> <font>1.1 </font><font><b>Предварительный анализ природы статистических данных</b></font><font> (проверка гипотез стационарности, нормальности, независимости, однородности, оценка вида функции распределения и ее параметров). </font> </p> <p> <font>1.</font><font><b>2 Выявление связей и закономерностей</b></font><font> (линейный и нелинейный регрессионный анализ, корреляционный анализ). </font> </p> <p> <font>1.3 </font><font><b>Многомерный статистический анализ</b></font><font> (линейный и нелинейный дискриминантный анализ, кластер-анализ, компонентный анализ, факторный анализ). </font> </p> <p> <font>1.4 </font><font><b>Динамические модели и прогноз на основе временных рядов.</b></font><font> Наиболее известные и популярные средства статистического анализа: пакеты</font><font>Statistica</font><font>, </font><font>SPSS</font><font>, </font><font>Systat</font><font>, </font><font>Statgraphics</font><font>, </font><font>SAS</font><font>, </font><font>BMDP</font><font>, </font><font>TimeLab</font><font>, </font><font>Data</font><font>-</font><font>Desk</font><font>, </font><font>S</font><font>-Plus, Scenario (BI). Недостатки: требование к специальной подготовке пользователя, большинство методов, основываются на парадигме, в которой главными фигурантами выступают усредненные значения, которые при исследовании реальных сложных жизненных феноменов часто оказываются фиктивными величинами.</font> </p> <p> <font>Особое направление в спектре аналитических средств ИАД составляют методы, основанные на нечетких множествах. Их применение позволяет ранжировать данные по степени близости к желаемым результатам, осуществлять так называемый нечеткий поиск в базах данных. Однако платой за повышенную универсальность является снижение уровня достоверности и точности получаемых результатов.</font> </p> <p> <font><b>2. Кибернетические методы</b></font><font><b> </b></font> </p> <p> <font>2.1 </font><font><b>Методы нейронных сетей</b></font><font>. Формируются путем построения иерархической сети, узлами которой являются модели нервных клеток (нейронов), у которых выходной сигнал определяется взвешенной суммой входных сигналов. В свою очередь, входные сигналы представляют собой выходные сигналы нейронов предыдущего уровня. Входными сигналами всей сети являются параметры текущих рядов наблюдений. Ретроспективные данные используются в качестве обучающих выборок, формирующих значения весовых коэффициентов входных параметров нейронов. </font><font><b>Основные недостатки:</b></font><font> необходимость иметь очень большой объем обучающей выборки; даже натренированная нейронная сеть представляет собой черный ящик. Знания, зафиксированные как веса нескольких сотен межнейронных связей, не поддаются анализу и интерпретации человеком.</font> </p> <p> <font>2.2 </font><font><b>Эволюционное программирование</b></font><font>. Получение оптимального решения путем имитации процесса эволюции популяции; вносятся различны, возможно случайные, изменения; совокупность модифицированных решений образует новое поколение возможных решений, которое подвергается «естественному отбору», основанному на «критерии выживания». Процесс итерационно повторяется. Самоорганизующаяся оптимизационная последовательность, приводящая к наилучшему решению (прогнозу) самым неожиданным образом: наиболее эффективное решение может оказаться результатом последовательной эволюции далеко не лучшего (хотя и допустимого) решения. Разновидностью является метод группового учета аргументов. </font> </p> <p> <font>2.3 </font><font><b>Генетические алгоритмы.</b></font><font> Аналогично эволюционному также происходит генерация, отбор и селекция возможных решений ( генетических информационных структур с заданным набором параметров («хромосом»)); помимо случайных изменений генной структуры происходит и направленная модификация. Позволяют получать качественно новые, неожиданные результаты решения. Но результаты, полученные кибернетическими методами, часто не допускают наглядных интерпретаций, что усложняет жизнь предметным. </font> </p> <p> <font>2.4 </font><font><b>Алгоритмы ограниченного перебора.</b></font><font> Вычисляют частоты комбинаций простых логических событий в подгруппах данных (Бонгард, середина 60- х г.). Ограничением служит длина комбинации простых логических событий. На основании анализа вычисленных частот делается заключение о полезности той или иной комбинации для установления ассоциации в данных, для классификации, прогнозирования и проч. Примеры простых логических событий:</font></p> <p> <font>X</font><font> =</font><font>a</font><font>; </font><font>X</font><font> &lt;</font><font>a</font><font>; </font><font>X</font><font> &gt;</font><font>a</font><font>; </font><font>a</font><font> &lt;</font><font>X</font><font> &lt;</font><font>b</font><font> идр., где X — какой либо параметр, “a” и “b” — константы. Самым ярким представителем, лидером на рынке продуктов Data Mining этого подхода является система WizWhy. Ее недостаток - выдает решение за приемлемое время только для сравнительно небольшой размерности данных. Тем не менее, система постоянно демонстрирует более высокие показатели при решении практических задач, чем все остальные алгоритмы.</font> </p> <p> <font><b>3. Традиционные методы</b></font><font> решения оптимизационных задач включают в себя вариационные методы, методы исследования операций, включающие в себя различные виды математического программирования (линейное, нелинейное, дискретное, целочисленное), динамическое программирование, принцип максимума Понтрягина, методы теории систем массового обслуживания. Программные реализации большинства этих методов входят в стандартные пакеты: MathCAD и MatLab.</font> </p> <p> <font><b>4. Экспертные средства</b></font><font>, связанные с использованием опыта эксперта</font><font>.</font> </p> <p> <font><b>4.1 Метод «ближайшего соседа</b></font><font>», лег в основу таких программных продуктов, как</font><font>PatternRecognitionWorkbench</font><font>или</font><font>KATEtools</font><font>. Для осуществления прогноза на будущее или выбора правильного решения в прошлом находятся близкие аналоги наличной ситуации и выбирают тот же ответ, который был для них правильным. Показывают неплохие результаты в самых разнообразных задачах. Главными их недостатками являются: отсутствие, обобщающих предыдущий опыт, поэтому неизвестно, на основе каких конкретно факторов системы строят свои ответы, а также произвол, который допускают системы при выборе меры 'близости'. От этой меры зависит объем множества прецедентов, которые нужно хранить в памяти для достижения удовлетворительной классификации или прогноза.</font> </p> <p> <font><b>4.2 Деревья решений.</b></font><font> Связан с построением последовательного логического вывода - дерева решений, в каждом узле которого эксперт осуществляет простейший логический выбор («да » - «нет»). В зависимости от принятого выбора, поиск решения продвигается по правой или левой ветви дерева и, в конце концов, приходит к терминальной ветви, отвечающей конкретному окончательному решению. Процесс статистического обучения выведен за пределы программы и сконцентрирован в виде априорного опыта, заключенного в наборе ветвей - решений. (</font><font>IDIS</font><font>, </font><font>See</font><font>5/ С5.0 и</font><font>SIPINA</font><font>). </font> </p> <p> <font><b>4.3 Предметно-ориентированные системы.</b></font><font> Это системы анализа ситуаций и прогноза, основанные на фиксированных математических моделях, отвечающих той или иной теоретической концепции. Роль эксперта состоит в выборе наиболее адекватной системы и интерпретации полученного алгоритма. Предельная простота и доступность применения и, как следствие, расплата достоверностью и точностью за</font><font> </font><font>эту</font><font> </font><font>простоту</font><font>. (Wall Street Money, MetaStock, SuperCharts, Candlestick Forecaster).</font> </p> <p> <font><b>4.4 Методы визуализации данных.</b></font><font> Нацелены на визуализацию и результатов их анализа, позволяют наглядно отображать полученные выводы для создания у предметных экспертов единой картины ситуации . (DataMiner</font><font>3D, Mineset</font><font>и</font><font> Impromptu (BI))</font><font>.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Классификация методов и систем приобретения знаний.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Приобретение знаний реализуется с помощью двух функций:</b></font><font> получения информации извне и ее систематизации. При этом в зависимости от способности системы обучения к логическим выводам возможны различные формы приобретения знаний, а также различные формы получаемой информации. Форма представления знаний для их использования определяется внутри системы, поэтому форма информации, которую она может принимать, зависит от того, какие способности имеет система для формализации информации до уровня знаний. Если обучающаяся система совсем лишена такой способности, то человек должен заранее подготовить все, вплоть до формализации информации, т. е. чем выше способности машины к логическим выводам, тем меньше нагрузка на человека.</font></p> <p> <font>Можно предложить следующую классификацию систем приобретения знаний, которая будет опираться на способность системы к восприятию знаний в разных форматах, качественно различающихся между собой и способностью к формализации.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m279e04ba.png'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m279e04ba.png'></p> <p> <font><b>Обучение без выводов.</b></font></p> <p> <font><b>Категорию А</b></font><font> можно назвать обучением без выводов или механическим запоминанием, это простой процесс получения информации, при котором необязательны функции выводов, а полученная информация в виде программ или данных используется для решения задач в неизменном виде. Другими словами, это способ получения информации, характерный для существующих компьютеров.</font></p> <p> <font><b>Категория Б</b></font><font>—это получение информации извне, представленной в форме знаний, т. е. в форме, которую можно использовать для выводов. Обучающейся Системе необходимо иметь функцию преобразования входной информации в формат, удобный для дальнейшего использования и включения в базу знании.</font></p> <p> <font>Приобретение знаний на этом этапе происходит в наиболее простой форме: это знания, предварительно подготовленные человеком во внутреннем формате, какими являются большинство специальных знании, изначально заданных в экспертных системах.</font></p> <p> <font>Если знания заданы во внешнем формате, например на естественном языке, то следует преобразовать их во внутренний формат. Для этого необходимо понимать внешнее представление, т. е. естественный язык, графические данные и т. п. Фактически приобретение знаний и их понимание тесно связаны. Проблема понимания сводится не только к преобразованию структуры предложений — необходимо получить формат, удобный для применения.</font></p> <p> <font>Аналогичная проблема — преобразование во внутренний формат советов, подсказок по решению задач, что называется «операционализацией» знаний. В этом заключается центральная проблема искусственного интеллекта; она, в частности, изучает преобразование советов, подсказок, представленных в терминах проблемной области, в процедуры.</font></p> <p> <font><b>Приобретение знаний из примеров</b></font></p> <p> <font>Метод приобретение знаний из примеров отличается от предыдущего метода, тем , что здесь выполняется сбор отдельных фактов, их преобразование и обобщение, а только затем они будут использованы в качестве знаний. И соответственно от уровня сложности системы вывода в системе будут возникать разные по степени общности и сложности знания. Необходимо также упомянуть о том, что этот метод приобретения знаний почти не нашёл практического применения, это может быть связано с тем, что входная информация представляет собой не систематизированный набор данных и для их обработки требуется наличие в системе обширных знаний по конкретной области.</font></p> <p> <font>По сравнению с предыдущим методом приобретения знаний, этот метод имеет большую степень свободы и соответственно необходимо описать общие положения этого принципа.</font></p> <p> <font><b>1. Языки представления.</b></font><font> Обучение по примерам — это процесс сбора отдельных фактов, их обобщение и систематизация, поэтому необходим унифицированный язык представления примеров и общих правил. Эти правила, будучи результатом обучения, должны стать объектами для использования знаний, поэтому и образуют язык представления знаний. И наоборот, язык представления знаний должен учитывать и определять указанные выше условия приобретения знаний.</font></p> <p> <font><b>2. Способы описания объектов.</b></font><font> В случае обучения .по примерам из описаний отдельных объектов создаются еще более общие описания объектов некоторого класса, при этом возникает важная проблема: как описать данный класс объектов. В полном классе некоторых объектов следует определить меньший класс объектов, обладающих общим свойством (объекты только в этом классе обладают заданным свойством), но в действительности проще определить список объектов и убедиться, что все объекты в нем обладают общим свойством. Для некоторого типа задач можно эффективно использовать ложные примеры или контрпримеры, убедительно показывающие, что данные объекты не входят в этот класс.. Иллюстрацией применения контрпримеров может служить понятие «почти то».</font></p> <p> <font><b>3. Правила обобщения.</b></font><font> Для сбора отдельных примеров и создания общих правил необходимы правила обобщения. Предложено несколько способов их описания: замена постоянных атрибутов языка на переменные, исключение описаний с ограниченным применением и т. п. Очевидно, что эти способы тесно связаны с языком представления знаний.</font></p> <p> <font><b>4. Управление обучением.</b></font><font> В процессе обучения по примерам можно применять различные стратегии структуризации информации и необходимо управлять этим процессом в ответ на входные данные. Существуют два классических метода: метод «снизу-вверх», при .котором, последовательно выбираются и структурируются отдельные сообщения, и метод «сверху-вниз», при котором сначала выдвигается гипотеза, а затем она корректируется по мере поступления информации. На практике эти методы комбинируются, хотя управление обучением с максимальным эффектом не такая уж простая проблема.</font></p> <p> <font>При изучении метода приобретения знаний по примерам можно выделить следующий ряд методов: Параметрическое обучение; Обучение по аналогии; Обучение по индукции; Параметрическое обучение.</font></p> <p> <font><b>Параметрическое обучение.</b></font><font> Наиболее простая форма обучения по примерам или наблюдениям состоит в определении общего вида правила, которое должно стать результатом вывода, и последующей корректировки входящих в это правило параметров в зависимости от данных. При этом используют психологические модели обучения, системы управления обучением и другие методы.</font></p> <p> <font>Примером обучающейся системы этой категории в области искусственного интеллекта является система Meta-Dentral. Эта система выводит новые правила путем коррекции правил продукций в процессе обучения или на основе исходных массспектральных данных параметрическое обучение в ней представлено в несколько специфичном виде, но все же она относятся к указанной выше категории, поскольку в системе задана основная структура знаний, которая корректируется последовательно по отдельным данным.</font></p> <p> <font><b>Метод обучения по индукции.</b></font><font>Среди всех форм обучения необходимо особо выделить обучение на основе выводов по индукции - это обучение с использованием выводов высокого уровня, как и при обучении по аналогии. В процессе этого обучения путем обобщения совокупности имеющихся данных выводятся общие правила. Возможно обучение с преподавателем, когда входные данные задает человек, наблюдающий за состоянием обучающейся системы, и обучение без преподавателя, когда данные поступают в систему случайно. И в том и в другом случае выводы могут быть различными, они имеют и различную степень сложности в зависимости от того, задаются ли только корректные данные или в том числе и некорректные данные и т. п.</font> </p> <p> <font><b>Обучение по аналогии.</b></font><font>Приобретение новых понятий возможно путем преобразования существующих знаний, похожих на те, которые собираются получить. Это важная функция, которую называют обучением на основе выводов по аналогии или просто обучением по аналогии. В нашей жизни много примеров, когда новые понятия или технические приемы приобретаются с помощью аналогии. Выводы по аналогии - один из важных объектов исследования искусственного интеллекта, наиболее интересные результаты здесь получены П. Уинстоном. Он использует выводы по аналогии, основываясь на следующей гипотезе: «Если две ситуации подобны по нескольким признакам, то они подобны и еще по одному признаку». Подобие двух ситуаций распознается путем обнаружения наилучших совпадений по наиболее важным признакам.</font></p> <p> <font><b>Аналогия</b></font><font>– это метод выводов, при которых обнаруживается подобие между несколькими заданными объектами; благодаря переносу фактов и знаний, справедливых для одних объектов, на основе этого подобия на совсем другие объекты либо определяется способ решения задач, либо предсказываются неизвестные факты и знания. Следовательно, когда человек сталкивается с неизвестной задачей, он на первых порах использует этот естественный метод вывода.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <ol>  <li>  <h1> <font>Дисциплина: Администрирование в информационных системах</font></h1> </li></ol> " ],
 ["Управление конфигурацией ИС, выявление и контроль сбойных и ошибочных ситуаций, управление системой безопасности, управление общим доступом.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><i><b>Управление конфигурацией</b></i></font><font> – один из вспомогательных процессов, поддерживающих основные процессы жизненного цикла ПО, прежде всего процессы разработки и сопровождения ПО ИС. При создании проектов сложных ИС, состоящих из многих компонентов, каждый из которых может иметь разновидности или версии, возникает проблема учёта их связей и функций, создания унифицированной структуры и обеспечения развития всей системы. Управление конфигурацией позволяет организовать, систематически учитывать и контролировать внесение изменений в ПО на всех стадиях ЖЦ.</font></p> <p> <font>Каждый процесс характеризуется определёнными задачами и методами их решения, исходными данными, полученными на предыдущем этапе, и результатами. Результатами анализа, в частности, являются функциональные модели, информационные модели и соответствующие им диаграммы. ЖЦ ПО носит</font><font><i>итерационный характер</i></font><font>: результаты очередного этапа часто вызывают изменения в проектных решениях, выработанных на более ранних этапах. К управлению конфигурацией следует отнести функции анализа производительности и оптимизации системы.</font></p> <p> <font>Большинство систем имеют оптимальные настройки по умолчанию и не требуют особого вмешательства. Однако, производители сетевых операционных систем включают в них наборы эмпирических правил, помогающих администратору вносить изменения в настройки с минимальным риском ухудшить другие показатели или сделать систему неработоспособной. Многих проблем можно избежать еще на стадии планирования сети.</font></p> <p> <font>Сюда же можно отнести задачу, связанную с учётом системных ресурсов. Учёт ресурсов позволяет заметить тенденции к появлению узких мест до того, как появятся проблемы с производительностью и провести соответствующую модернизацию. Кроме того, система учёта необходима при платном использовании ресурсов, например, контроль использования дискового пространства, печати, учёт трафика.</font></p> <p> <font>Оценка состояния, функциональности, возможностей ИС осуществляется путём её аудита и тестирования.</font><font><b>Решение проблемных ситуаций</b></font><font> в системе включает её диагностику, локализацию и устранение неисправностей, регистрацию ошибок и тестирование.</font></p> <p> <font><b>Процесс поиска и диагностики ошибок</b></font><font> в ИС может быть чрезвычайно сложным и многосторонним. Идентифицировано 12 задач управления администратора системы как необходимых для успешной работы по управлению отказами и поиску ошибок.</font><font><b>К ним относятся:</b></font><font> определение ошибки; коррекция ошибки; изоляция ошибки; восстановление после ошибки; поддержка тревожных сигналов (alarms); фильтрация тревожных сигналов; генерация тревожных сигналов; проблема объяснения ошибки (корреляция); проведение диагностических тестов; ведение журнала ошибок; сбор статистики ошибок; сопровождение ошибок.</font></p> <p> <font><b>Обеспечение безопасности информации в</b></font><font><b> ИС</b></font><font> подразумевает построение подсистем, входящих в систему обеспечения безопасности информации – СОБИ.</font></p> <p> <font><b>СОБИ</b></font><font>строится как иерархическая, многоуровневая система. Комплексный подход, применяемый при построении СОБИ, предусматривает наличие нескольких уровней защиты, которые определяют требования по обеспечению безопасности информации на всех этапах ее обращения в ИС.</font></p> <p> <font>Подсистема управления безопасностью предназначена для оперативного управления как отдельными составляющими СОБИ, так и системой в целом, в соответствии с Политикой безопасности.</font></p> <p> <font><b>Подсистема включает в себя механизмы:</b></font></p> <ul>  <li>  <p> <font>анализ информации с консолей мониторинга средств защиты;</font></p>  </li><li>  <p> <font>система поддержки принятия решения об оперативном усилении/ослаблении политики безопасности в отдельных элементах или узлах СОБИ и противодействия внешним и внутренним атакам;</font></p>  </li><li>  <p> <font>управление отдельными средствами и комплексами защиты информации и др.</font></p> </li></ul> <p> <font>СОБИ для каждой организации представляет собой различный набор подсистем (решений), который не является стандартным и различен в зависимости от бизнес-задач, решаемых информационной системой.</font></p> <p> <font>Однако можно выделить несколько базовых подсистем, составляющих СОБИ корпоративной информационной системы практически любой организации:</font></p> <p> ▫ <font>Подсистема безопасного подключения корпоративной сети к Интернет;</font></p> <p> ▫ <font>Подсистема защиты корпоративной электронной почты;</font></p> <p> ▫ <font>Подсистема защиты от вредоносных программ и компьютерных вирусов;</font></p> <p> ▫ <font>Подсистема защиты внутренних и внешних информационных потоков;</font></p> <p> ▫ <font>Подсистема предотвращения вторжений;</font></p> <p> ▫ <font>Подсистема защиты информации персональных компьютеров от НСД;</font></p> <p> ▫ <font>Подсистема контроля целостности программной среды;</font></p> <p> ▫ <font>Подсистема резервного копирования и восстановления данных.</font></p> <p> <font>На уровне данных задача администрирования –</font><font><b>управление доступом к данным</b></font><font><b>.</b></font><font> Политики управления доступом – дискреционная, мандатная, ролевая. Инструменты управления доступом – списки прав доступа (ACL), метки доступа, биты защиты и т.п. Доступ к данным регулируется на уровне файловой системы – доступ к файлам, на уровне объектов БД – доступ к таблицам, представлениям. </font><font><b>Шифрование данных</b></font><font> – установка и администрирование PKI. Обеспечение регулярного резервного копирования.</font></p> " ],
 ["Ведение статистики использования ресурсов ИС. Выявление и устранение узких мест информационной системы.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Задача учета ресурсов ИС и управление учетом</b></font><font> — это относительно простые проблемы из тех, которые стоят перед администратором системы. Обычно средства, входящие в состав ОС, СУБД, прикладных систем и коммуникационных систем достаточны для ее решения. Кроме того, средства учета (аудита) находятся и в составе систем MS или NMS.</font></p> <p> <font><b>Основные задачи учета:</b></font><font>отслеживание исполняемых сервисов и затрачиваемых ресурсов; отслеживание цены сервисов, используемых в системе; учет лимитов пользователя в системе; учет квот ресурсов, которые выдавались процессам и пользователям ИС; получение отчетов о результатах решения всех предыдущих задач; получение отчетов о жульничестве; интеграция различных отчетов и учет совокупной цены использования различных ресурсов.</font></p> <p> <font>Производительность важна для любой информационной системы. </font><font><b>Узким местом</b></font><font> называют момент падения производительности системы. Конкретный ответ на вопрос, где узкие места данной системы, может дать лишь специальное направленное тестирование. Но это не означает, что оценка потенциальных узких мест невозможна. Одним из хороших методов является график нагрузки на систему в течение дня, недели, месяца и т.п. Можно построить диаграмму, на которой будет отражено время работы тех или иных бизнес-процессов, а также требуемое для данного бизнес-процесса время ответа системы. Такие диаграммы помогают </font><font><b>выявить момент, когда нагрузка будет наиболее интенсивной</b></font><font>. Количество пользователей, одновременно работающих с тем или иным компонентом, отражается на диаграмме посредством весового коэффициента (<a href='http://www.interface.ru/case/pic1.htm'>рис. 1</a>).</font><img src='/static/i_0067f68bc106c46b_html_573a3dd0.gif'></p> <p> <font>В приведенном примере явно видны 3 пика активности системы, максимальный из которых приходится на 11 часов. Использован тип диаграммы с накоплением.</font></p> <p> <font>А в диаграмме, представленной на <a href='http://www.interface.ru/case/pic2.htm'>рис. 2</a>, видна активность касс в течение рабочего дня и повышение активности загрузки данных в нерабочее время. В такие диаграммы следует также добавлять вес, отражающий сложность бизнес-процесса, например, в данном примере самый высокий весовой коэффициент будут иметь отчеты. Оценка весов определяется особенностями каждого конкретного бизнеса - где-то она может быть высокой, где-то низкой.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m72c064d8.gif'><br> </p> <p> <font>Ответ на вопрос, насколько потенциальные узкие места являются реальными, может дать только тестирование. Здесь оправданно применение специальных средств моделирования сценариев приложений. Следует отметить, что оценка точности детектирования узкого места в системе очень зависит от объема обрабатываемых данных. Следует уделить внимание генерации тестовых данных и проверке узких мест уже на этих данных. Часто информационная система не сразу выходит на проектную мощность, как правило, она работает некоторое время в режиме первоначального накопления информации, которое может продолжаться и несколько дней, и несколько месяцев. Как правило, предполагаемый порог объема обрабатываемых данных известен на этапе анализа, но реальный объем физических данных можно точно оценить только на этапе проектирования. Если сгенерировать предполагаемый объем тестовых данных нельзя (не хватает мощности техники или есть иные причины), то тесты проводят на меньшем объеме данных и пытаются построить оценки поведения системы на реальном объеме данных.</font></p> <p> <font>Более точно узкие места системы оцениваются на этапе разработки. Здесь уже есть реализованные компоненты системы. Средства автоматизации тестирования (например, LoadRunner, WinRunner и др.) позволяют отследить операции, которые выполняет то или иное приложение (но данные средства могут отследить далеко не все возможные типы приложений и то, насколько они подходят для тестирования вашего проекта, - это решение такого же порядка, что и выбор средства разработки приложения), автоматически сгенерировать сценарий запуска имитаторов работы реальных приложений и построить оценки узких мест системы.</font></p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Технические средства в информационных системах. Методы тестирования технических средств. Обслуживание технических средств.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Эффективное функционирование ИС базируется на комплекс­ном использовании современных технических средств обработки информации и методов организации технологических процессов решения задач.</font></p> <p> <font>Главным элементом комплекса технических средств, предназначенных для автоматической обработки информации в процессе решения управленческих задач,</font><font><b>является электронная вычислительная машина, или компьютер.</b></font></p> <p> <font><b>Техническое обеспечение -</b></font><font>комплекс технических средств, предназначенных для работы информационной системы, а также соответствующая документация на эти средства и технологические процессы.</font></p> <p> <font><b>Комплекс технических средств:</b></font><font> компьютеры любых моделей; устройства сбора, накопления, обработки, передачи и вывода информации; устройства передачи данных и линий связи; оргтехника и устройства автоматического съема информации; эксплутационные материалы и др.</font></p> <p> <font><b>Документацией</b></font><font> оформляются предварительный сбор технических средств, организация их эксплуатации, технологический процесс обработки данных, технологическое оснащение.</font><font><b>Документацию можно условно разделить на три группы:</b></font></p> <ul>  <li>  <p> <font>общесистемную, включающую государственные и отраслевые стандарты по техническому обеспечению;</font></p>  </li><li>  <p> <font>специализированную, содержащую комплекс методик по всем этапам разработки технического обеспечения;</font></p>  </li><li>  <p> <font>нормативно-справочную, используемую при выполнении расчетов по техническому обеспечению.</font></p> </li></ul> <p> <font>К настоящему времени сложилось две основные формы организации технического обеспечения (формы использования технических средств): </font><font><b>централизованная и частично или полностью децентрализованная. </b></font> </p> <p> <font><i><b>Централизованное</b></i></font><font><i> </i></font><font>техническое обеспечение базируется на использовании в информационной системе больших ЭВМ и вычислительных центров.</font></p> <p> <font><i><b>Децентрализация</b></i></font><font><i> </i></font><font>технических средств предполагает реализацию функциональных подсистем на персональных компьютерах непосредственно на рабочих местах.</font></p> <p> <font>Перспективным подходом следует считать, по-видимому, </font><font><i>частично децентрализованный</i></font><font>подход - организацию технического обеспечения на базе распределенных сетей, состоящих из персональных компьютеров и большой ЭВМ для хранения баз данных, общих для любых функциональных подсистем.</font> </p> <p> <font><i><b>Информационная система управления</b></i></font><font><b> –</b></font><font>совокупность информации, экономико-математических методов и моделей, технических, программных, других технологических средств и специалистов, предназначенная для обработки информации и принятия управленческих решений.</font></p> <p> <font>Для эффективной работы информационной системы к </font><font><b>техническим средствам предъявляется ряд требований:</b></font></p> <p> <font>· минимизация трудовых и стоимостных затрат на решение всего комплекса задач системы;</font></p> <p> <font>· реализация интегрированной обработки информации за счет информационной, технической и программной совместимости различных технических устройств;</font></p> <p> <font>· обеспечение пользователей связью через терминальные устройства с распределенной базой данных;</font></p> <p> <font>· высокая надежность;</font></p> <p> <font>· наличие защиты информации от несанкционированного доступа;</font></p> <p> <font>· реализуемость КТС, т.е. возможность его создания за счет типовых средств, выпускаемых отечественной промышленностью;</font></p> <p> <font>· гибкость структуры КТС, т.е. перспектива включения в его состав новых, более совершенных технических средств по мере освоения их промышленностью.</font></p> <p> <font>Главным элементом КТС, конечно, является ЭВМ или компьютер.</font></p> <p> <font><b>Характерными чертами современных компьютеров являются</b></font><font>: высокая производительность; разнообразие форм обрабатываемых данных – двоичных, десятичных, символьных, при большом диапазоне их изменения и высокой точности представления; обширная номенклатура выполняемых операций, как арифметических, логических, а также специальных; большая емкость оперативной памяти; развитая организация системы ввода-вывода информации, обеспечивающая подключение разнообразных видов внешних устройств.</font></p> <p> <font><b>Анализ и тестирование программно-технических средств</b></font><font> информационной системы проводится с целью проверки эффективности используемых штатных и импортируемых механизмов защиты и их устойчивости к внутренним и внешним атакам, их противостоянию к попыткам проникновения, а также с целью поиска программных и аппаратных уязвимостей и ошибок конфигурирования. </font> </p> <p> <font><b>Основные методики тестирования программно-технических средств:</b></font> </p> <ul>  <li>  <p> <font>Открытый вход в исследуемую систему. Заказчик предоставляет имеющуюся информацию по исследуемому объекту, архитектуре сети, программным и аппаратным средствам, документацию по обеспечению информационной безопасности. В ходе тестирования проверяется наличие системы безопасности и соответствие ее состава, конфигурации и функциональной полноты требованиям политики безопасности.</font></p>  </li><li>  <p> <font>Имитация взлома тестируемого объекта и проникновение в систему без предоставления заказчиком информации по объекту. Производится последовательное сканирование и зондирование программных и технических средств, инвентаризация ресурсов сети, выявление действующих служб. На основе анализа полученной информации разрабатывается план проникновения, исследуется возможность перехватывания управления отдельными элементами и перераспределения ресурсов сети.</font></p> </li></ul> <p> <font><b>ОБСЛУЖИВАНИЕ ТЕХНИЧЕСКИХ СРЕДСТВ</b></font></p> <p> <font>Обслуживание технических средств представляет собой комплекс организационно-технических мероприятий, проводимых с целью выявления и своевременной замены элементов, подвергающихся старению и износу, обеспечения работоспособности и высоких показателей надежности технических средств, метрологической поверки измерительных средств.</font><font><b>К таким мероприятиям относятся:</b></font> </p> <ul>  <li>  <p><font>обеспечение соответствующим обслуживающим персоналом и общая организация работы;</font></p>  </li><li>  <p><font>проведение профилактик и метрологических поверок;</font></p>  </li><li>  <p><font>включение в состав оборудования средств контроля и диагностики;</font></p>  </li><li>  <p><font>обеспечение эксплуатационной документацией, ЗИП (запасным имуществом прибора) и сервисной аппаратурой;</font></p>  </li><li>  <p><font>ведение учетной и технической документации;</font></p>  </li><li>  <p><font>повышение квалификации обслуживающего персонала.</font></p> </li></ul> <p> <font>Своевременное и качественное проведение профилактических работ позволяет содержать устройства в работоспособном состоянии, предупреждать сбои и отказы, повышать срок службы ТС. Виды, продолжительность и периодичность этих работ, а также методика их проведения указываются в инструкции по эксплуатации устройств.</font></p> <p> <font><b>Эксплуатационная документация</b></font><font>предназначена для изучения оборудования и правил его использования. Она включает в себя техническое описание, инструкцию по эксплуатации, формуляр и некоторые другие документы.</font></p> <p> <font><b>Техническое описание</b></font><font> определяет назначение и принцип действия, структуру и характеристики, условия эксплуатации и содержит другие сведения, необходимые для организации работы системы.</font></p> <p> <font><b>Инструкция по эксплуатации</b></font><font> – это основной документ, регламентирующий условия и нормы эксплуатации любого устройства. Она дает общие указания по использованию, определяет порядок, правила и методику работы, последовательность выполнения действий и операций, способы проверки технического состояния, меры безопасности, характерные неисправности и методы их устранения.</font></p> <p> <font><b>Сервисная и контрольно-измерительная</b></font><font> аппаратура применяется для проверки работоспособности блоков и устройств, для измерения и настройки параметров, обнаружения неисправностей и выполнения ремонтных работ.</font></p> <p> <font>При проведении работ по обслуживанию и настройке оборудования следует уделять внимание качеству используемых измерительных и контрольных приборов.</font></p> <p> <font><b>Поверкой средств измерительной техники</b></font><font>называют совокупность действий, выполняемых для оценки погрешностей поверяемых средств и степени соответствия их точностных характеристик регламентируемым значениям с целью определения пригодности к применению. Различают первичную (аттестация при выпуске средства измерения), периодическую, внеочередную и инспекционную поверки.</font></p> " ],
 ["Принципы построения информационных систем администрирования. Применение консоли управления и терминальных служб для удаленного администрирования.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Информационные системы администрирования</b></font><font> — это программные или программно-аппаратные продукты, предназначенные для решения комплекса задач централизованного управления распределенными ИТ ресурсами, обеспечения их гарантированной доступности для пользователей в соответствии с заданными эксплуатационными требованиями. Они позволяют обеспечить управление всеми составляющими технологического, прикладного и организационно-технологического уровней информационной инфраструктуры предприятия.</font></p> <p> <font><b>Обычно информационная система администрирования представляет собой набор модулей</b></font><font>, предназначенных для решения различных задач. Модули могут использоваться как отдельно, так и в различных комбинациях, образуя единую систему управления. Принцип модульности позволяет максимально гибко строить системы управления ИТ-инфраструктурами предприятий, используя только те программные модули, которые сфокусированы на решении конкретных задач управления, стоящих перед данным предприятием.</font></p> <p> <font><b>Другим важным принципом</b></font><font>, реализующимся в системах администрирования, является проактивность управления. Обычно в системах администрирования применен аппарат настройки предупреждений и тревог (Alarm) о необычных событиях или превышениях пороговых значений метрик ИС. Администратор системы заранее оповещается о ситуации для принятия своевременных мер. Соответствующие записи о событиях в ИС создаются в сводных журналах о событиях системы администрирования (Syslog).</font></p> <p> <font>Большинство производителей прикладных программных средств, системных программных средств и оборудования разрабатывает и поставляет вместе с ними программные средства управления и конфигурации. Это создает проблемы при создании, внедрении и сопровождении единой системы администрирования. Кроме того, обычной является практика, когда отдельные компоненты систем управления задействуют для выполнения операций управления свои локальные ресурсы (коммуникационные протоколы, физические интерфейсы, аппаратные средства и системное программное обеспечение) и не имеют возможности интеграции на базе единой платформы управления. Их либо необходимо увязать между собой, либо реализовать на базе создаваемой системы администрирования аналогичную функциональность. Это сложный, длительный и дорогостоящий процесс, поэтому в общем случае понятие «типовая система управления» неприменимо.</font></p> <p> <font>В ряде случаев единственным способом решения проблемы является дополнительное прикладное программирование. По статистическим данным среди наиболее часто устанавливаемых компонентов систем управления первенство держат модули мониторинга производительности (75%), обнаружения и устранения неисправностей (67,9%), управления инвентаризацией (62,7%), управления сервисами и планирования услуг (61,6%), предупреждения мошенничества (56%).</font></p> <p> <font>Системы администрирования обычно загружаются на выделенном сервере и управляют элементами ИС с помощь специальных программных продуктов — агентов, установленных под управлением различных элементов ИС, например на файл-сервере, коммутаторе, сервере базы данных и т.д.</font></p> <p> <font><b>Режим удаленного администрирования (для примера)</b></font></p> <p> <font>Microsoft Windows 2000 Terminal Services может работать в двух разных режимах - в режиме удаленного администрирования и в режиме сервера приложений.</font> </p> <p> <font>Режим удаленного администрирования (Remote Administration Mode) позволяет администратору получать удаленный доступ к серверу Windows 2000. Администратор имеет полный доступ к любым средствам администрирования, как будто он работал локально. Он может подключаться по протоколу TCP/IP через LAN, WAN, модем. А при использовании Citrix MetaFrame 1.8, администратор может управлять кластерами, деревьями и доменами Windows 2000 и NT с любого компьютера, имеющего MS-DOS, Windows 95, Windows 98, Windows NT и даже не-Windows операционные системы. В режиме удаленного вдминистрирования отключаются средства совместимости приложений и функции лицензирования клиентов. В результате процессор и память не задействуются. По вопросам использования процессора обратитесь к Microsoft. Преимущества в малом использовании процессора можно использовать, установив терминальные службы на дополнительные серверы вашей сети, выполняющие критические функции - например, серверы баз данных, веб-серверы, файловые серверы, RAS и т.п. Однако, количество одновременных соединений ограничено двумя. Для повышенной безопасности подключаться могут только системные администраторы. Это предотвращает случайный (или преднамеренный) доступ к серверу и возможные атаки. Только два адинистратора одновременно могут удаленно зарегистрироваться на сервере. Одновременные пользователи в режиме удаленного администрирования не допускаются.</font> </p> <p> <font><b>В режиме удаленного управления администратор может удаленно выполнять следующие задачи:</b></font><font>Использовать один сеанс совместно с другим администратором, установив две теневых сессии; Осуществлять обновления, перезагрузку, управление контроллером домена; Осуществлять установку и запуск приложений; Осуществлять доступ к локальным дискам; Осуществлять доступ к серверу по медленным каналам даже при использовании 128-битного шифрования; Использовать все преимущетсва RDP, включая поддержку локального принтера, переназначение буфера обмена, поддержку виртуальных каналов.</font></p> <p> <font><b>Консоль администрирования</b></font><font> – интерфейс, предоставляющий доступ к функциям Сервера администрирования как локально, так и по сети.</font></p> <p> <font>Консоль администрирования реализована в виде модуля для Microsoft Management Console – стандартного интерфейса для выполнения административных задач в среде операционных систем Microsoft Windows, основанных на технологии NT.</font> </p> <p> <font>Через одну установленную Консоль может осуществляться управление любым количеством Серверов администрирования, установленных в сети предприятия.</font> </p> <p> <font>Установка Консоли администрирования производится либо вместе с Сервером администрирования, либо отдельно на любой компьютер, входящий в состав сети предприятия, и удовлетворяющий системным требованиям. На количество Консолей в сети никаких ограничений не накладывается. Вы также можете воспользоваться возможностью удаленной установки / обновления версии Консоли администрирования.</font></p> <p> <font><b>Microsoft Management Console, MMC (консоль управления Microsoft</b></font><font>) — компонент операционной системы Windows 2000 и более поздних версий Windows. Позволяет системным администраторам и опытным пользователям с помощью гибкого интерфейса конфигурировать и отслеживать работу системы.</font><font><b>MMC</b></font><font> - средство создания, сохранения и открытия административных инструментов, называемыми консолями (consoles).</font></p> <p> <font>Консоль управления предоставляет более широкие возможности для управления компьютером. Основной принцип действия заключается в оснастках — небольших программах, позволяющих настроить разные аспекты операционной системы.</font> </p> <p> <font>Консоли сами по себе не представляют функции управления (администрирования), а лишь размещает в себе программы управления (администрирования) называемые оснастками (snap-ins). А вот конкретно -</font><font><b>оснастка (snap-ins</b></font><font>) - это и есть программа, с помощью которой сетевой администратор управляет (администрирует) необходимыми службами.</font> </p> <p> <font>То есть консоль - это среда в которой действуют оснастки. Консоли ничего не администрируют, но в их среде мы создаем необходимые нам оснастки для администрирования нашей сети, домена( -ов), операционной системы. </font> </p> <p> <font>Используя ММС, системные администраторы могут создавать уникальные консоли для работников, которые отчитываются перед ними, или для руководителей рабочих групп. Они могут применять эти инструменты к системной политике, передавать их по e-mail или публиковать для общего доступа в сети. Когда менеджер рабочей группы откроет msc-файл, доступ будет ограничен только теми инструментами, которые предусмотрены системным администратором.</font></p> <p> <font><b>Терминальные службы</b></font><font> лежат в основе сетевого решения, когда пользователи работают на своих (клиентских) компьютерах с приложениями, запущенными не локально, а на сервере терминалов.</font></p> <p> <font><b>Работу терминальных служб</b></font><font> можно представить следующим образом. Пользователь запускает на своем компьютере приложение терминального доступа и обращается к серверу, на котором запущена служба терминалов. После успешной аутентификации для пользователя создается собственный сеанс, в котором запускаются (автоматически или вручную) требуемые приложения. Разные пользователи, одновременно работающие с сервером терминалов, создают разные сеансы, которые не взаимодействуют друг с другом. Приложения выполняются на сервере, а пользователю реально передаются по сети лишь графическое изображение пользовательского интерфейса: окна открытых приложений или весь рабочий стол. Со стороны клиентского компьютера к серверу по сети поступает информация о манипуляциях пользователя с мышью и клавиатурой.</font></p> <p> <br> </p> <ol>  <li>  <h1> <font>Дисциплина: Мультимедиа технология</font></h1> </li></ol> " ],
 ["Достоинства и недостатки векторной и растровой графики. Форматы хранения графической информации.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Компьютерная графика</b></font><font> (computer graphics) - это совокупность методов и приемов для преобразования с помощью компьютера данных в графическое представление или графического представления - в данные.</font> </p> <p> <font><b>Основные виды:</b></font> </p> <p> <font><b>Векторная графика</b></font><font> (vector graphics) - область компьютерной графики, в которой изображения генерируются с помощью команд визуализации и координатных данных. Векторные изображения наиболее хорошо подходят для использования в качестве технических иллюстраций, но они не обеспечивают нужного качества фотореалистичных изображений. Это связано с ограниченными возможностями управления основными параметрами изображения, такими как фокусировка и освещенность. С другой стороны, некоторые типы растровых изображений практически не поддаются масштабированию, в то время как векторные изображения можно масштабировать без каких-либо ограничений.</font> </p> <p> <font>Векторные изображения строятся с помощью математических описаний объектов (так называемых примитивов), в качестве которых могут выступать линии, дуги, окружности и т.д. </font> </p> <p> <font>Векторные изображения не могут быть созданы путем сканирования или считывания с лазерных дисков. Они создаются с помощью специальных программных средств типа CorelDRAW и Adobe Illustrator.</font> </p> <p> <font><b>Преимущества векторного способа описания графики над растровой графикой</b></font></p> <ul>  <li>  <p> <font>Размер, занимаемый описательной частью, не зависит от реальной величины объекта, что позволяет, используя минимальное количество информации, описать сколько угодно большой объект файлом минимального размера.</font></p>  </li><li>  <p> <font>В связи с тем, что информация об объекте хранится в описательной форме, можно бесконечно увеличить графический примитив, например, дугу окружности, и она останется гладкой. С другой стороны, если кривая представлена в виде ломаной линии, увеличение покажет, что она на самом деле не кривая.</font></p>  </li><li>  <p> <font>Параметры объектов хранятся и могут быть легко изменены. Также это означает что перемещение, масштабирование, вращение, заполнение и т. д. не ухудшает качества рисунка. Более того, обычно указывают размеры в аппаратно-независимых единицах (англ. device-independent unit), которые ведут к наилучшей возможной растеризации на растровых устройствах.</font></p>  </li><li>  <p> <font>При увеличении или уменьшении объектов толщина линий может быть задана постоянной величиной, независимо от реального контура.</font></p> </li></ul> <p> <font><b>Фундаментальные недостатки векторной графики</b></font></p> <ul>  <li>  <p> <font>Не каждый объект может быть легко изображен в векторном виде — для подобного оригинальному изображению может потребоваться очень большое количество объектов с высокой сложностью, что негативно влияет на количество памяти, занимаемой изображением, и на время для его отображения (отрисовки).</font></p>  </li><li>  <p> <font>Перевод векторной графики в растр достаточно прост. Но обратного пути, как правило, нет — трассировка растра, при том что требует значительных вычислительных мощностей и времени, не всегда обеспечивает высокое качество векторного рисунка.</font></p>  </li><li>  <p> <font>При этом спецификации векторных форматов (и, соответственно, рендереры векторной графики) намного сложнее таковых для растровой графики.</font></p>  </li><li>  <p> <font>Преимущество векторной картинки — масштабируемость — пропадает, когда начинаем иметь дело с особо малыми разрешениями графики (например, иконки 32×32 или 16×16). Чтобы не было «грязи», картинку под такие разрешения приходится подгонять вручную. В векторных шрифтах TrueType есть довольно сложные коды хинтинга, позволяющие избавиться от пропущенных (и, наоборот, излишне толстых) линий.</font></p> </li></ul> <p> <font><b>Растровая графика (raster graphics)</b></font><font> - область компьютерной графики, в которой изображения генерируются из массива пикселей, упорядоченных по строкам и столбцам.</font> </p> <p> <font>Пиксель (pixel) - наименьший элемент поверхности визуализации, которому может быть независимым образом задан цвет, интенсивность и другие характеристики изображения.</font></p> <p> <font>Растровое изображение ближе к фотографии, поскольку позволяет более точно воспроизводить основные характеристики фотографий: освещенность, прозрачность и глубину резкости. В отличии от векторных изображений, при создании растровых изображений основные формулы не используются, поэтому для синтеза растровых изображений необходимо задавать разрешение и размеры изображения. Наиболее часто растровые изображения получают путем сканирования фотографий. Другой способ получения таких изображений заключается в представлении исходного изображения в виде матрицы, каждая ячейка которой заполнена цветными точками или пикселями. С помощью средств растровой графики можно отразить и передать всю чудную гамму нюансов и тонких эффектов, присущих реальному изображению.</font> </p> <p> <font><b>Преимущества</b></font></p> <ul>  <li>  <p> <font>Растровая графика позволяет создать практически любой рисунок, вне зависимости от сложности, в отличие, например, от векторной, где невозможно точно передать эффект перехода от одного цвета к другому без потерь в размере файла.</font></p>  </li><li>  <p> <font>Распространённость — растровая графика используется сейчас практически везде: от маленьких значков до плакатов.</font></p>  </li><li>  <p> <font>Высокая скорость обработки сложных изображений, если не нужно масштабирование.</font></p>  </li><li>  <p> <font>Растровое представление изображения естественно для большинства устройств ввода-вывода графической информации, таких как мониторы (за исключением векторных устройств вывода), матричные и струйные принтеры, цифровые фотоаппараты, сканеры, а также сотовые телефоны.</font></p> </li></ul> <p> <font><b>Недостатки</b></font></p> <ul>  <li>  <p> <font>Большой размер файлов у простых изображений.</font></p>  </li><li>  <p> <font>Невозможность идеального масштабирования.</font></p>  </li><li>  <p> <font>Невозможность вывода на печать на графопостроитель.</font></p> </li></ul> <p> <font><b>Форматы хранения графической информации:</b></font><font><b> </b></font> </p> <p> <font><b>Графический формат</b></font><font> – это метод хранения графической информации, а именно изображений, рисунков, фотографий.</font> </p> <p> <font><b>Растровые форматы</b></font><font>: BMP, GIF, ICO, JPEG, PSD, PNG, TGA, TIFF</font></p> <p> <font><b>Векторные</b></font><font><b> </b></font><font><b>форматы</b></font><font><b>: </b></font><font>SVG (Scalable Vector Graphics), EPS (Encapsulated PostScript), CDR (CorelDraw)</font></p> <p> <font><b>Комплексные форматы:</b></font><font>PDF</font><font>, </font><font>DjVu</font><font>, </font><font>CGM</font></p> <p> <font><b>BMP (bitmap)</b></font><font> – графический формат для хранения растровых изображений. Первоначально BMP хранил только аппаратно-зависимые растры, теперь современные технологии позволяют хранить и аппаратно-независимые (DIB — Device Independent Bitmap). Такой формат поддерживают системы Windows и OS/2. Расширение формата BMP: .bmp, .dib и .rle. Глубина цвета составляет от 1 до 48 бит на пиксель.</font> </p> <p> <font><b>GIF (Graphics Interchange Format</b></font><font>) предназначен для хранения изображений. Преимущество формата GIF в том, что он может хранить изображения, не потеряв в качестве. Компания CompuServe создала такой формат в 1897 году. Он назывался GIF87a. Позднее он был переименован в GIF89a. GIF применяет метод сжатия LZW. Формат GIF также предполагает чересстрочное хранение информации. Происходит разбивка строк на группы. GIF используют в анимированных изображениях. Такое изображение должно быть закольцовано, чтобы после последнего кадра был сразу же показан первый.</font> </p> <p> <font><b>ICO (Windows icon)</b></font><font> позволяет хранить значки файлов в Microsoft Office. Такой формат имеет прямую аналогию CUR (Windows cursors), которая хранит курсоры. Стандартный размер - это квадратный значок со стороной 16, 32, 48 пикселов. Формат ICO очень близок к BMP. Главное их отличие – маска, которая «кладется» на задний план изображения. </font> </p> <p> <font><b>Формат JPEG</b></font><font><b>.</b></font><font>JPEG</font><font> (</font><font>Joint</font><font> </font><font>Photographic</font><font> </font><font>Experts</font><font> </font><font>Group</font><font>) – метод сжатия изображения. Расширения: .jpeg, .jfif, .jpg, .JPG, или .JPE. Принцип: сжатие изображения с потерей качества. Этот формат позволяет сжимать полноцветные изображения глубиной от 6 до 24 бит/пиксель с высокой скоростью и такой же эффективностью.</font> </p> <p> <font><b>PSD (Photoshop Document)</b></font><font> – один из видов растровых форматов, предназначенный для хранения графических изображений. Такой формат был создан специально для Adobe Photoshop. Недостатки формата: большой объем и невозможность «работы» во всех графических программах. Главное преимущество: сжимание файла без потери качества.</font></p> <p> <font><b>PNG (Portable Network Graphics</b></font><font>) – один из видов растровых форматов, предназначенный для хранения графических файлов. Обеспечивает сжатие без потери качества. Цель создания такого формата: улучшить формат GIF, который требует лицензию для использования. Расширение: PNG или png. Преимущество: неограниченное использование цветов, в отличие от формата GIF.</font> </p> <p> <font><b>Truevision TGA (TGA)</b></font><font> – вид растрового графического формата. Создание формата принадлежит фирме Truevision Inc. в 1984 году. Расширение: .tga в системах DOS, или .tpic на компьютерах Macintosh.</font></p> <p> <font><b>TIFF (Tagged Image File Format</b></font><font>) – формат, предназначенный для хранения растровых изображений. Первоначально компания Aldus совместно с Microsoft разработали такой формат для работы с PostScript. TIFF хранит изображения с большой глубиной цвета. Расширение: .tiff или .tif. Цветовые пространства: черно-белый битовой, полутоновый, с индексированной палитрой, RGB и CMYK.</font> </p> <p> <font><b>SVG (Scalable Vector Graphics)</b></font><font> – это векторная графика. Поддерживает как статичную, так и анимированную графику. Языки разметки SVG: VML и PGML. </font><font><b>Преимущества:</b></font><font> форматы файлов SVG могут «прочитываться» в текстовых редакторах; векторный формат SVG – масштабируемость; возможность использования растровых форматов в документах расширением SVG.</font> </p> <p> <font><b>EPS (Encapsulated PostScript)</b></font><font> –</font><font>расширение</font><font> </font><font>для</font><font> </font><font>формата</font><font> PostScript.</font><font>Компанией Adobe был создан этот формат на базе языка PostScript. Такой формат используется в дизайнерами в полиграфии. Имеет возможность содержать как растровые и векторные изображения, так и их комбинации. Основные цветовые модели для EPS: RGB, CMYK.</font></p> <p> <font><b>CDR (CorelDraw)</b></font><font> – векторный графический формат, который используется программой CorelDraw. Формат CDR гарантирует высокое качество изображений. Главный недостаток: документы такого формата не «отображаются» в других графических программах.</font></p> <p> <font><b>Формат PDF.</b></font><font> В допечатной подготовке документ оригинал-макета должен использоваться в формате PDF. PDF (Portable Document Format) – это портативный формат документа. Компьютерные программы, которые позволяют работать с таким форматом документа, - это Adobe Acrobat. Для просмотра документов данного формата используют Adobe Reader. Преимущество формата PDF в том, что он позволяет «сжимать» информацию. Тем самым возможно хранение с большим объемом информации. Все документы с легкостью просматриваются. Это имеет большое значение при архивации и осуществлении допечатной подготовки.</font></p> <p> <font><b>Формат DjVu.</b></font><font> DjVu (от франц. deja vu – «уже виденное») – формат для сжатия изображения с потерей качества; это открытый формат. Предназначение: хранение сканированных документов. Расширение: .djvu, .djv.</font> </p> <p> <font><b>CGM (Computer Graphics Metafile)</b></font><font>– графический формат для хранения и обмена данных. Тип: метафайл. Расширение: .cgm Предназначен для профессиональных программ, работающих с векторной графикой.</font></p> <p> <font>-----------------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Стандарты и форматы хранения видео на компьютере. Обзор программных продуктов для цифровой обработки видеоинформации.", " <p> <font><b>Во всём мире существует несколько стандартов видео:</b></font></p> <p> <font><b>PAL (Phase Alternate Line)</b></font><font> - видеостандарт, используемый в Европе и России (т.е. наш): размер видео 720х576, 25 fps (25 кадров в секунду). Стандарт PAL использует метод добавления цвета к телевизионному сигналу черного и белого цвета. Создает на экране 625 строк с частотой 25 кадров в секунду. Аналогично системе NTSC использует чересстрочную развертку.</font></p> <p> <font><b>NTSC</b></font><font> </font><font><b>(National Television Standards Committee)</b></font><font> - 720</font><font>х</font><font>480, 29,97 fps.</font><font>Стандарт видеозаписи, телевещания. Согласно стандарту NTSC, каждый видеокадр состоит из 525 горизонтальных строк экрана, по которым каждую 1/30 секунды проходит электронный луч. При отрисовке кадра электронный луч делает два прохода по всему экрану: сначала по нечетным строкам, а потом по четным (чересстрочная развертка - interlacing). Обеспечивается поддержка 16 миллионов разных цветов.</font></p> <p> <font><b>SECAM</b></font><font><b> (</b></font><font>SEquential</font><font> </font><font>Couleur</font><font> </font><font>Avec</font><font> </font><font>Memoire</font><font><b>).</b></font><font> Телевизионный формат, используемый в России, Франции, странах Восточной Европы. Предусматривает разложение телевизионного кадра на 625 строк, частоту кадров 50 Гц. Так как частота кадров и количество строк соответствует стандарту PAL, есть возможность просматривать видео в формате SECAM на видеоплеере PAL стандарта (и наоборот), но в монохромном варианте.</font></p> <p> <font><b>VHS</b></font><font>(Video Home System) - аналоговое видео, это формат записи на ваших видеокассетах.</font> </p> <p> <font><b>DV (Digital Video)</b></font><font> - это видеоформат, разработанный совместно ведущими мировыми компаниями-производителями видео для цифровой записи. Этот формат имеет малый коэффициент сжатия видеосигнала (5:1) и дает высокое качество видеосъемки. Оцифровка при записи осуществляется с разрешением 720x576 (каждый кадр содержит 720x576 значений яркости и по 360x288 значений цветоразностных сигналов). Видеоизображение и звук в формате DV пишутся раздельно. Это дает возможность добавлять звуковое сопровождение после завершения записи или редактирования видео, а также перезаписывать звук. Формат DV обеспечивает высочайшее качество фото- и видеосъемок и позволяет сохранять все данные в цифровом виде на кассете, карте памяти или на жестком диске компьютера.</font></p> <p> <font><b>Стандарты видео файлов</b></font></p> <p> <font>MPEG</font><font>-1 (</font><font>Moving</font><font> </font><font>Picture</font><font> </font><font>Experts</font><font> </font><font>Group</font><font> 1) – это стандарты сжатия видео и аудио. Для видео используется формат Video CD, а для аудио формат MPEG audio layer 3, или сокращенно всем известный формат MP3. Это наиболее совместимый формат для проигрывания на компьютерах с CD/DVD оптическими приводами.</font></p> <p> <font>MPEG-2 (Moving Picture Experts Group 2) – этот стандарт используется в DVD и цифровом телевидении DBV. В этом формате снимают видео в различных устройствах для съемки видео.</font></p> <p> <font>MPEG-3 (Moving Picture Experts Group 3) – этот стандарт был разработан для телевидения высокой четкости HDTV, теперь стал частью стандарта MPEG-2.</font></p> <p> <font>MPEG-4 (Moving Picture Experts Group 4) – этот стандарт используется для сжатия цифрового видео и аудио. Состоит из нескольких стандартов, включает в себя многие возможности MPEG-1 и MPEG-2. В этом стандарте используются различные кодеки: DivX, Xvid, H.264 (AVC) и другие. Формат MP4 является одной из спецификаций этого стандарта.</font></p> <p> <font><b>Форматы видео:</b></font></p> <p> <font><b>3GP</b></font><font> – этот контейнер был разработан для использования на мобильных телефонах, в сотовой связи третьего поколения. С помощью этого формата уменьшается размер аудио и видео файла, который используется на мобильном телефоне. Открывается</font><font> </font><font>с</font><font> </font><font>помощью</font><font> </font><font>программ</font><font>: VLC media player, MPlayer, QuickTime Player, RealPlayer.</font></p> <p> <font><b>ASF (Advanced Systems Format File)</b></font><font> – контейнер разработанный корпорацией Microsoft для потокового аудио и видео. При использовании этого формата не требуется установки дополнительных кодеков. Открывается с помощью программ:</font><font>Windows</font><font> </font><font>Media</font><font> </font><font>Player</font><font>, </font><font>Media</font><font> </font><font>Player</font><font> </font><font>Classic</font><font> -</font><font>Home</font><font> </font><font>Cinema</font><font>, </font><font>VLC</font><font> </font><font>media</font><font> </font><font>player</font><font>.</font></p> <p> <font><b>AVI (Audio-Video Interleaved</b></font><font>) - это расширение огромного количества видеофайлов, но не является форматом или кодеком. Это контейнер, разработанный Microsoft, в котором могут храниться потоки 4-х типов - видео, аудио, текст и midi. В этот контейнер может входить видео любого формата от mpeg1 до mpeg-4, звуки разных форматов, возможно любое сочетание кодеков. Открывается</font><font> </font><font>с</font><font> </font><font>помощью</font><font> </font><font>программ</font><font>: Windows Media Player, CyberLink PowerDVD, QuickTime Player, VLC media player, Winamp.</font> </p> <p> <font><b>WMV (Windows Media Video)</b></font><font> - это формат от Microsoft, именно в нем вы получите видеоролик, сделанный с помощью Movie Maker. Для проигрывания не требуется установка дополнительных кодеков. Открывается с помощью программ: Windows Media Player, CyberLink PowerDVD, MPlayer.</font></p> <p> <font><b>FLV (Flash Video)</b></font><font> – видео формат созданный для передачи видео через Интернет. Это самый распространенный формат в сети Интернет. Широко используется на различных видеохостингах, которые предназначены для хранения видео файлов. Основными преимуществами являются: хорошее качество картинки при низком битрейте, возможность просматривать видео до полной загрузки видео файла, использование этого формата для различных операционных систем. Открывается с помощью программ: браузерами с помощью</font><font>Adobe</font><font> </font><font>Flash</font><font> </font><font>Player</font><font>, </font><font>FLV</font><font> </font><font>Player</font><font>, </font><font>VLC</font><font> </font><font>media</font><font> </font><font>player</font><font>, </font><font>Media</font><font> </font><font>Player</font><font> </font><font>Classic</font><font> -</font><font>Home</font><font> </font><font>Cinema</font><font>.</font></p> <p> <font><b>MOV</b></font><font> - формат Apple Macintosh QuickTime, может содержать кроме видео также графику, анимацию, 3D. Открывается</font><font> </font><font>с</font><font> </font><font>помощью</font><font> </font><font>программ</font><font>: QuickTime Player, CyberLink PowerDirector, Windows Media Player.</font></p> <p> <font><b>MP4</b></font><font> – видео файл одной из спецификаций стандарта MPEG-4. Этот формат очень близок к формату MOV и обладает почти такими же возможностями. Открывается</font><font> </font><font>с</font><font> </font><font>помощью</font><font> </font><font>программ</font><font>: QuickTime Player, Windows Media Player, VLC media player.</font></p> <p> <font><b>MKV - (Матрешка или Matroska)</b></font><font> - тоже контейнер, который может содержать видео, аудио, субтитры, меню и пр. Имеет открытый код, пока не очень распространен, но очень перспективен. Открывается</font><font> </font><font>с</font><font> </font><font>помощью</font><font> </font><font>программ</font><font>: Windows Media Player, VLC media player, Media Player Classic - Home Cinema.</font></p> <p> <font><b>Программы, для обработки видео</b></font></p> <p> <font>AviUtl - многофункциональный видеоредактор для работы с популярным видеоформатом AVI. Разнообразие функций данной программы, позволяют пользователю производить практически любые действия по редактированию видео файлов и изменять их придавая необходимые качества.</font></p> <p> <font>Shotcut - мощный видеоредактор с открытым исходным кодом, с помощью которого можно быстро и легко редактировать видеофайлы. Приложение позволяет вырезать фрагменты изображения, применять различные фильтры, корректировать настройки видео и аудио, выбирать необходимую частоту дискретизации, подходящий кодек, настраивать качество изображения, громкость и многое другое.</font></p> <p> <font>Free Video Dub - это бесплатная программа для лёгкого и быстрого редактирования видео, позволяющая вырезать и удалять ненужные видеофрагменты без необходимости повторного кодирования исходного файла, (без потери оригинального качества изображения).</font></p> <p> <font>SolveigMM AVI Trimmer + MKV - бесплатный видеоредактор для быстрого обработки видеофайлов формата AVI и MKV без потери качества исходных видео/аудио данных. Имеет простой, интуитивно понятный русскоязычный интерфейс. Само редактирование происходит без процесса перекодирования, что не приводит к ухудшению изображения и оригинального звука. Также отсутствуют проблемы с синхронизацией после редактирования.</font></p> <p> <font>Windows Live Movie Maker - эта программа, входящая в состав пакета бесплатного программного обеспечения Windows Live, предназначена для создания и редактирования видео. Представляет собой основательно переработанную версию <a href='http://vokrugsofta.ru/122-windows-movie-maker-2640380.html'>Windows Movie Maker</a> акцентированную на нужды среднестатистического пользователя. В интерфейсе удалены функций, не нужные для обычного пользователя.</font></p> <p> <font>Sony Vegas - мощная программа для монтажа нелинейного видео и аудио, предназначена для профессионалов и 'продвинутых' пользователей, работающих с цифровым видео.</font></p> <p> <font>Windows Movie Maker - простая программа для создание коротких видеороликов из фотографий или видеофайлов. Windows Movie Maker позиционируется как простое приложение для создания видеороликов или слайд-шоу неопытными пользователями.</font></p> <h1> <font>Морфинг</font><font> </font><font> — это видеоэффект, заключающийся в плавном перетекании одного изображения в другое. Иногда морфингом называют эффект наплыва, когда одна сцена затемняется или затуманивается, а вторая в это время проявляется все резче и сменяет первую. Однако лучше разделять эти понятия. В отличие от наплыва, морфинг обеспечивает соответствие характерных (наиболее привлекающих внимание) точек и контуров начального и конечного изображений. Например, преобразование одного лица в другое, при котором задается соответствие положения характерных точек глаз, носа и т.д. </font> </h1> <h1> <font>Существует целый ряд программ для морфинга на ПК, позволяющих быстро создавать интересные эффекты. За несколько минут можно сделать видеоролик, превращающий ребенка в пожилого человека, одно животное в другое, изменить марку автомобиля и т.д. Морфинг-роликом можно украсить скринсейверы, web-страницы, рекламные и музыкальные клипы, видеофильмы, образовательные ролики, презентации, поздравительные открытки и т.п.</font> </h1> <h1> <font>Single morph (одиночный морфинг</font><font>) — морфинг исходного изображения (source image) в итоговое (target image). Обычно программа для морфинга позволяет сгенерировать либо видеоролик (плавное перетекание одного изображения в другое), либо серию промежуточных изображений. </font> </h1> <h1> <font>Photo to photo-morphing (фото в фотоморфинг)</font><font> — морфинг исходного изображения в результирующее, при котором результатом является серия статичных изображений, иллюстрирующих перетекание, или одно изображение, имеющее по 50% от двух исходных. </font> </h1> <h1> <font>Для того чтобы создать реалистичный морфинг-проект, необходимо подобрать изображения и подготовить их с помощью фоторедактора. Некоторые морфинг-программы имеют встроенные функции фоторедактирования, другие предполагают, что подготовительная стадия выполняется во внешнем приложении, например в программе Photoshop. Обычно сначала необходимо отредактировать фон, размеры изображений, освещение, резкость и т.д. </font> </h1> <h1> <font>Photo to video-morphing (фото в видео)</font><font> — морфинг исходного изображения в результирующее, при котором результатом является видеоролик.</font> </h1> <h1> <font>Video to video morphing (видео в видео)</font><font> — морфинг на базе двух видеороликов.</font> </h1> <h1> <font>Multiple morph</font><font> — множественный морфинг, то есть морфинг серии превращений. Например, последовательное изменение лица представителей различных рас в клипе «Black or White». </font> </h1> <h1> <font>Anchor</font><font> </font><font>points</font><font>, </font><font>control</font><font> </font><font>points</font><font>, </font><font>key</font><font> </font><font>dots</font><font> (якорные точки, контрольные точки, реперные точки, ключевые точки, точки соответствия) — пары точек, определяющие соответствие между указанными пикселами исходного и конечного изображений.</font></h1> <h1> <font>Сегодня на рынке предлагается целый ряд программ, которые различаются по производительности, набору поддерживаемых форматов, дополнительным вспомогательным функциям и, конечно, по цене.</font></h1> <h1> <font>FantaMorph</font><font> — это мощная и простая в использовании программа для создания морфинга и эффектов деформирования. Программа может применяться и в качестве инструмента для профессионала в области компьютерной графики, и как средство развлечения для домашних пользователей. Интерфейс программы FantaMorph позволяет одновременно отображать начальное, конечное и промежуточное изображения. Приложение позволяет импортировать файлы в различных форматах: BMP, JPEG, TIFF, PNG,</font><font>TGA</font><font>, </font><font>PCX</font><font>, </font><font>GIF</font><font>, </font><font>WMF</font><font>, </font><font>EMF</font><font>. Экспортировать можно изображения в форматах BMP, JPEG, TIFF, PNG, TGA, PCX или в виде видеофайлов в форматах AVI, Animated GIF и SWF. </font> </h1> <h1> <font>Возможности по редактированию исходного изображения включают: кадрирование, масштабирование, поворот, настройки яркости, контрастности, баланс цвета, эффекты увеличения и уменьшения резкости, возможность добавления сетки и т.п.</font> </h1> <h1> <font>Программа предоставляет возможности предпросмотра и проигрывания готового ролика без экспорта в файл (Real Time Playing), при этом доступно управление проигрыванием (скорость проигрывания, направление и т.п.). Предусмотрено использование маскирования.</font> </h1> <h1> <font>MorphMan.</font><font> Данная программа обладает самыми широкими возможностями морфинга. MorphMan 4.0 — мощная программа для ПК по морфингу фото в видео (photo to video) и видео в видео (video to video).</font> </h1> <h1> <font>Morpher.</font><font> В этой небольшой программе мало дополнительных функций, но зато есть всё необходимое непосредственно для морфинга. </font> </h1> <h1> <font>Отметим, что дополнительные функции можно выполнить и в других приложениях. Например, на входе программа требует файлы только в формате BMP. Но если у вас есть конвертор, то вы легко можете перевести любой файл в BMP. То же самое касается функций по обработке исходного изображения — многим удобнее сделать это в Photoshop. Результат Morpher позволяет сохранить в формате AVI (перетекание первого кадра во второй), как статический файл BMP (среднее между первым и вторым файлами) или в виде последовательности BMP-файлов.</font></h1> <h1> <br><br> </h1> <ol>  <li>  <h1><font>Дисциплина: Надежность информационных систем</font></h1> </li></ol> " ],
 ["Понятие и определение теории надежности. Зависимость надежности от времени.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Теория надёжности опирается на совокупность различных понятий, определений, терминов и показателей, которые строго регламентируются в государственных стандартах (ГОСТ). В основу перечня положен ГОСТ 27.002–89 'Надёжность в технике. Основные понятия. Термины и определения', формулирующий применяемые в науке и технике термины и определения в области надёжности, и материалы сайта.</font> </p> <p> <font><b>Объект</b></font><font> – техническое изделие определённого целевого назначения, рассматриваемое в периоды проектирования, производства, испытаний и эксплуатации. Объектами могут быть различные системы и их элементы, в частности: сооружения, установки, технические изделия, устройства, машины, аппараты, приборы и их части, агрегаты и отдельные детали. </font> </p> <p> <font><b>Система</b></font><font> – объект, представляющий собой совокупность элементов, связанных между собой определёнными отношениями и взаимодействующих таким образом, чтобы обеспечить выполнение системой некоторой достаточно сложной функции. Признаком системности является структурированность системы, взаимосвязанность составляющих её частей, подчинённость организации всей системы определённой цели. Системы функционируют в пространстве и времени. </font> </p> <p> <font><b>Элемент системы</b></font><font> – объект, представляющий отдельную часть системы. Само понятие элемента условно и относительно, так как любой элемент, в свою очередь, всегда можно рассматривать как совокупность других элементов. Понятия 'система' и 'элемент' выражены друг через друга, поскольку одно из них следовало бы принять в качестве исходного, постулировать. Понятия эти относительны: объект, считавшийся системой в одном исследовании, может рассматриваться как элемент, если изучается объект большего масштаба. Кроме того, само деление системы на элементы зависит от характера рассмотрения (функциональные, конструктивные, схемные или оперативные элементы), от требуемой точности проводимого исследования, от уровня наших представлений, от объекта в целом. Человек-оператор также представляет собой одно из звеньев системы человек–машина.</font> </p> <p> <font><b>Различают следующие состояния объекта.</b></font><font><b> </b></font> </p> <p> <font><b>Исправность</b></font><font> – состояние объекта, при котором он соответствует всем требованиям, установленным нормативно-технической документацией (НТД).</font> </p> <p> <font><b>Неисправность</b></font><font>– состояние объекта, при котором он не соответствует хотя бы одному из требований, установленных НТД.</font> </p> <p> <font><b>Работоспособность</b></font><font> – состояние объекта, при котором он способен выполнять заданные функции, сохраняя значения основных параметров в пределах, установленных НТД.</font> </p> <p> <font><b>Неработоспособность</b></font><font> – состояние объекта, при котором значение хотя бы одного заданного параметра, характеризующего способность выполнять заданные функции, не соответствует требованиям, установленным НТД.</font></p> <p> <font><b>Переход объекта в различные состояния:</b></font><font><b> </b></font> </p> <p> <font><b>Повреждение</b></font><font> – событие, заключающееся в нарушении исправности объекта при сохранении его работоспособности.</font> </p> <p> <font><b>Отказ</b></font><font>– событие, заключающееся в нарушении работоспособности объекта.</font> </p> <p> <font><b>Критерий отказа</b></font><font> – отличительный признак или совокупность признаков, согласно которым устанавливается факт отказа. Признаки (критерии) отказов устанавливаются НТД на данный объект.</font> </p> <p> <font><b>Восстановление</b></font><font> – процесс обнаружения и устранения отказа (повреждения) с целью восстановления его работоспособности (исправности).</font> </p> <p> <font><b>Восстанавливаемый объект</b></font><font> – объект, работоспособность которого в случае возникновения отказа подлежит восстановлению в рассматриваемых условиях.</font> </p> <p> <font><b>Невосстанавливаемый объект</b></font><font> – объект, работоспособность которого в случае возникновения отказа не подлежит восстановлению в рассматриваемых условиях.</font> </p> <p> <font><b>Временные характеристики объекта:</b></font><font><b> </b></font> </p> <p> <font><b>Наработка</b></font><font> – продолжительность или объём работы объекта. Объект может работать непрерывно или с перерывами. Во втором случае учитывается суммарная наработка. Наработка может измеряться в единицах времени, циклах, единицах выработки и других единицах.</font> </p> <p> <font>В процессе эксплуатации различают суточную, месячную наработку, наработку до первого отказа, наработку между отказами, заданную наработку и т.д. Если объект эксплуатируется в различных режимах нагрузки, то, например, наработка в облегчённом режиме может быть выделена и учитываться отдельно от наработки при номинальной нагрузке. </font> </p> <p> <font><b>Технический ресурс</b></font><font> – наработка объекта от начала его эксплуатации до достижения предельного состояния. Обычно указывается, какой именно технический ресурс имеется в виду: до среднего, капитального, от капитального до ближайшего среднего и т.п. Если конкретного указания не содержится, то имеется в виду ресурс от начала эксплуатации до достижения предельного состояния после всех (средних и капитальных) ремонтов, т.е. до списания по техническому состоянию. </font> </p> <p> <font><b>Срок службы</b></font><font> – календарная продолжительность эксплуатации объекта от её начала или возобновления после капитального или среднего ремонта до наступления предельного состояния.</font> </p> <p> <font><b>Эксплуатация объекта</b></font><font> – это стадия его существования в распоряжении потребителя при условии применения объекта по назначению, что может чередоваться с хранением, транспортированием, техническим обслуживанием и ремонтом, если это осуществляется потребителем. </font> </p> <p> <font><b>Срок сохраняемости</b></font><font> – календарная продолжительность хранения и (или) транспортирования объекта в заданных условиях, в течение и после которой сохраняются значения установленных показателей (в том числе и показателей надёжности) в заданных пределах.</font></p> <p> <font><b>Зависимость надежности от времени</b></font></p> <p> <font>Все характеристики надежности, кроме средней наработки до первого отказа являются функциями времени. Время между соседними отказами для элементов аппаратуры является непрерывной случайной величиной, которая характеризуется некоторым законом распределения. Зависимость надежности от времени описывается с помощью </font><font><b>математической модели надежности (ММН</b></font><font>) – математического выражения (формулы, алгоритма, уравнения, системы уравнений), позволяющего определить показатели надежности. Простейшие ММН в виде формул носят название статистических моделей распределения. При исследовании надежности применяются следующие модели распределения: экспоненциальный, нормальный, Рэлея, Пуассона, Вейбулла и др.</font></p> <p> <font>Наиболее распространенной статистической моделью надежности является экспоненциальная модель распределения времени до отказа, по которой вероятность безотказной работы объекта выражается зависимостью</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m2fb8bc8e.gif'><font>, где</font><font><font></font></font><font> – параметр модели.</font></p> <p> <font><b>Частота отказа при экспоненциальной модели</b></font></p> <p> <font>а</font><sub><font>э</font></sub><font>(t) = -dP(t)/dt =</font><font><font></font></font><font>∙e</font><sup><font>-</font></sup><sup><font><font></font></font></sup><sup><font>∙t.</font></sup><font> </font> </p> <p> <font>Функция интенсивности отказов при экспоненциальной модели</font></p> <p>  <sub><font>э</font></sub><font>(t) =</font><font>а</font><sub><font>э</font></sub><font>(t)/</font><font>Р</font><sub><font>э</font></sub><font>(t) =</font><font><font></font></font><font>= const.</font> </p> <p> <font>Графики этих функций приведены на рис. 1.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_15dd59f4.gif'><br> </p> <p> <font>Рис. 1. График зависимости показателей надежности от времени для экспоненциальной модели распределения.</font></p> <p> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <br> </p> <p> <font>Наработка до отказа при экспоненциальной модели</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m52dc5991.gif'></p> <p> <font>Экспоненциальная модель может быть использована в случае, когда интенсивность отказов постоянная величина (</font><font><font></font></font><font>=const).</font></p> <p> <font>------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Расчет нерезервированных восстанавливаемых вычислительных систем.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Нерезервированная восстанавливаемая система</b></font><font> в произвольный момент времени находится в одном из двух состояний:</font><font><b>работоспособном {</b></font><font><b>G</b></font><sub><font><b>0</b></font></sub><font><b>}</b></font><font> или</font><font><b>неработоспособном {</b></font><font><b>G</b></font><sub><font><b>1</b></font></sub><font><b>}.</b></font><font> Процесс ее функционирования можно отразить графом состояний (см. рисунок):</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m5d7b21b3.png'></p> <p> <font>Рисунок - Граф состояний нерезервированной системы</font></p> <p> <font>Из состояния</font><font>G</font><sub><font>0</font></sub><font> в состояние</font><font>G</font><sub><font>1</font></sub><font> система переходит в результате отказов с интенсивностью λ, а из</font><font>G</font><sub><font>1</font></sub><font> в</font><font>G</font><sub><font>0</font></sub><font> - в результате восстановления с интенсивностью µ. В дальнейшем будем считать, что потоки отказов и восстановлений являются простейшими: λ=</font><font>const</font><font>, µ=</font><font>const</font><font>. Это значит, что производительность труда ремонтника постоянна и не зависит от времени. Поэтому время восстановления имеет экспоненциальный закон распределения <img src='/static/i_0067f68bc106c46b_html_m300d9e46.gif'>; <img src='/static/i_0067f68bc106c46b_html_m481aed5a.gif'>.</font></p> <p> <font><b>Основным показателем надежности нерезервированной восстанавливаемой системы</b></font><font> является коэффициент готовности</font><font><i>К</i></font><sub><font><i>г</i></font></sub><font>. Сокращение времени восстановления ведет к увеличению коэффициента готовности и не влияет на безотказность системы.</font><font><b>Рассмотрим работу системы на интервале времени</b></font><font> (</font><font>t</font><font>, </font><font>t</font><font>+</font><font>Δt</font><font>). Обозначим через <img src='/static/i_0067f68bc106c46b_html_eaa1b3.gif'>, <img src='/static/i_0067f68bc106c46b_html_4e8cec4b.gif'>и <img src='/static/i_0067f68bc106c46b_html_1214e2ff.gif'>, <img src='/static/i_0067f68bc106c46b_html_7ff7b1e6.gif'> - вероятности того, что в момент времени t и</font><font>t</font><font>+</font><font>Δt</font><font> система находится в состоянии</font><font>G</font><sub><font>0</font></sub><font> и</font><font>G</font><sub><font>1</font></sub><font>. Тогда <img src='/static/i_0067f68bc106c46b_html_m501ece44.gif'> и</font><font><i>К</i></font><sub><font><i>г</i></font></sub><font><i>= <img src='/static/i_0067f68bc106c46b_html_36168b35.gif'></i></font><font>. Обозначим также через <img src='/static/i_0067f68bc106c46b_html_m74936c9e.gif'> и <img src='/static/i_0067f68bc106c46b_html_m3b882d13.gif'> - условную вероятность того, что в момент времени t система находится или в состоянии</font><font>G</font><sub><font>0</font></sub><font> или в состоянии</font><font>G</font><sub><font>1</font></sub><font>, а в момент времени</font><font>t</font><font>+</font><font>Δt</font><font> или в состоянии</font><font>G</font><sub><font>1</font></sub><font> или в состоянии</font><font>G</font><sub><font>0</font></sub><font>, т.е. за интервал времени</font><font>Δt</font><font> произошел отказ (восстановление) системы. Тогда</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_163802ea.gif'><font>;</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m130ecc7d.gif'><font>.</font></p> <p> <font>Будем считать, что за время</font><font>Δt</font><font> может произойти только один отказ или только одно восстановление. Тогда на интервале</font><font>Δt</font><font> могут произойти четыре несовместимые события: <img src='/static/i_0067f68bc106c46b_html_m5d4fe403.gif'> - в момент времени t система находилась в состоянии</font><font>G</font><sub><font>0</font></sub><font>, в момент времени</font><font>t</font><font>+</font><font>Δt</font><font> она осталась в том же состоянии, т.е. отказа не произошло; <img src='/static/i_0067f68bc106c46b_html_fc74820.gif'> - отказ произошел; <img src='/static/i_0067f68bc106c46b_html_m52bc63dc.gif'> - восстановление произошло; <img src='/static/i_0067f68bc106c46b_html_4435d03e.gif'>- восстановление не произошло. Тогда</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_4278fc5b.gif'></p> <p> <img src='/static/i_0067f68bc106c46b_html_61a22e5c.gif'></p> <p> <font>или</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_4340f2c8.gif'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m4d61e50.gif'></p> <p> <font>Положим <img src='/static/i_0067f68bc106c46b_html_2b25fa55.gif'>. Тогда получим систему дифференциальных уравнений</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_5718754.gif'></p> <p> <br> </p> <p> <font>которая дополняется условием <img src='/static/i_0067f68bc106c46b_html_m501ece44.gif'>.</font></p> <p> <font>Решение системы при начальных условиях <img src='/static/i_0067f68bc106c46b_html_m6205c88d.gif'> и <img src='/static/i_0067f68bc106c46b_html_m571b366d.gif'>, т.е. в начальный момент времени система работоспособна, имеет вид</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m7e390c1c.gif'></p> <p> <font>Если в начальный момент времени система неработоспособна, то <img src='/static/i_0067f68bc106c46b_html_60fb3cf7.gif'>, <img src='/static/i_0067f68bc106c46b_html_mf4c82e6.gif'> и решение системы имеет вид</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_m6c06237d.gif'></p> <p> <font>При <img src='/static/i_0067f68bc106c46b_html_m4548e899.gif'> независимо от начального состояния системы (</font><font>G</font><sub><font>0</font></sub><font> или</font><font>G</font><sub><font>1</font></sub><font>) вероятности <img src='/static/i_0067f68bc106c46b_html_46c4cf66.gif'>, <img src='/static/i_0067f68bc106c46b_html_5d0e6c00.gif'> стремятся к постоянным значениям</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_44139dcc.gif'><font>; <img src='/static/i_0067f68bc106c46b_html_mb12e571.gif'></font></p> <p> <font>Это означает, что при экспоненциальных законах распределения времени наработки на отказ и времени восстановления, случайный процесс работы восстанавливаемой системы стабилизируется, и вероятность застать систему работоспособной в произвольный момент времени остается постоянной. Система с указанным свойством называется эргодической, а сам процесс - марковским случайным процессом. Случайный процесс называется марковским, если для любого момента времени вероятности всех состояний системы в будущем зависят только от ее состояния в настоящем и не зависят от того, когда и как система пришла в это состояние. Учитывая данное свойство, в системе дифференциальных уравнений при <img src='/static/i_0067f68bc106c46b_html_m4548e899.gif'> можно положить <img src='/static/i_0067f68bc106c46b_html_267fc99c.gif'> и получить систему линейных алгебраических уравнений, откуда непосредственно находятся <img src='/static/i_0067f68bc106c46b_html_46c4cf66.gif'>и <img src='/static/i_0067f68bc106c46b_html_5d0e6c00.gif'>:</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_407a6d8f.gif'></p> <p> <font>При малых значениях величины <img src='/static/i_0067f68bc106c46b_html_70ecdc1.gif'>, когда <img src='/static/i_0067f68bc106c46b_html_57bef666.gif'>, получим</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m73b6bc9e.gif'></p> <p> <img src='/static/i_0067f68bc106c46b_html_m6b715201.gif'></p> " ],
 ["Методы оценки надежности технической и технологической составляющих.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Методы исследования и оценки надежности технических средств и технологических процессов обработки информации можно разделить на 4 группы: </font><font><b>аналитические; экспериментальные; методы, основанные на статистическом моделировании; комбинированные.</b></font> </p> <p> <font><b>Под аналитическим исследованием</b></font><font> надежности некоторой системы понимают расчет ее надежности на основе данных о надежности компонентов, структуре, условиях функционирования и режиме обслуживания. Применительно к ЭИС аналитическое исследование сводится к определению показателей безотказности и восстанавливаемости. Аналитическим путем может быть определено влияние различных факторов, найдены оптимальные требования к надежности ЭИС и ее компонентов, режимы технического обслуживания и т.д.</font> </p> <p> <font><b>Отличительной чертой экспериментальных методов</b></font><font> является то, что они не требуют знания о надежности свойств компонентов системы. Экспериментальная оценка надежности ЭИС может реализовываться в двух вариантах: 1) организация специальных испытаний и 2) сбор статистических данных о работе системы в условиях нормальной или подконтрольной эксплуатации. Второй путь значительно дешевле первого, но результаты такой оценки формируются со значительным сдвигом во времени по отношению к моменту установки и сдачи системы.</font> </p> <p> <font><b>Методы статистического моделирования</b></font><font>, как и аналитические, требуют наличия данных о надежности компонентов. Метод статистического моделирования состоит в генерировании (с помощью случайных чисел) случайных отрезков времени безотказной работы и времени восстановления отдельных компонентов ЭИС, т.е. искусственном воспроизведении процесса функционирования системы. </font> </p> <p> <font><b>Комбинированные методы</b></font><font> объединяют методы, рассмотренные ранее. Так, оценка характеристики отдельных компонентов ЭИС может устанавливаться в результате проведения экспериментов, а полученные результаты использоваться для статистического моделирования.</font> </p> <p> <font><b>При оценке надежности технологической составляющей ЭИС в качестве исходных данных используются</b></font><font>: Описание технологического процесса решения задачи; Описание схемы взаимосвязи информационных массивов и программных модулей; Объемно-временные характеристики задачи; Сведения об интенсивности отказов и восстановлений по каждому выделяемому структурному компоненту ЭИС</font> </p> <p> <font><b>Сама оценка предполагает выполнение следующих основных работ:</b></font> </p> <ul>  <ol>  <li>  <p> <font>Конкретизация понятия отказа с учетом цели проведения расчетов надежности. Обоснование допущений, принимаемых при вычислениях, без существенной потери их точности. </font> </p>  </li><li>  <p> <font>Построение схемы взаимосвязи информационных массивов и программных модулей. Изучение и анализ множества допустимых вариантов технологического процесса внутримашинной обработки информации.</font> </p>  </li><li>  <p> <font>Построение графической модели надежности технических средств, используемых в процессе решения задачи, и ее разметка. Определение времени использования каждого выделенного компонента технологической составляющей системы. </font> </p>  </li><li>  <p> <font>Построение аналитической модели надежности технических средств. </font> </p>  </li><li>  <p> <font>Определение коэффициента эксплуатационной надежности как для отдельных ТС, так и для технологической составляю щей системы в целом.</font> </p>  </li><li>  <p> <font>Расчет среднегодовых потерь вследствие ненадежности ТС, годовой себестоимости.</font> </p>  </li><li>  <p> <font>Выявление уровня влияния факторов на изменение показателей надежности и экономической эффективности системы (например, изменение размеров блоков обрабатываемой информации, включение резервных элементов, изменение (рационализация) схемы технологического процесса обработки информации и т.п.).</font> </p>  </li><li>  <p> <font>На основе анализа полученных результатов выбор одного или нескольких вариантов технологического процесса обработки информации, являющихся более надежными и экономичными. </font> </p>  </li></ol> </ul> <p> <font>В зависимости от стадии жизненного цикла ЭИС целями оценки надежности могут являться выбор состава технических средств, определение вероятности своевременного решения задачи (комплекса задач), определение режима обслуживания, уточнение затрат на функционирование и т.д. Поставленная цель позволяет корректировать понятие отказа. Например, при оценке вероятности своевременного получения результатов под отказом может пониматься невозможность получения результатной информации за заданный промежуток времени, который может быть равен (для задач, решаемых в реальном масштабе времени) или превышать минимально необходимое время решения задачи (комплекса задач). При уточнении затрат на функционирование для задач, решаемых в диалоговом режиме, под отказом понимается невозможность получения результатов за один прогон задачи (за минимально необходимое время); возможны и другие подходы к определению отказа. Важно определить причины отказа задачи – отказ или сбой технических средств. </font> </p> <p> <font>На этапе построения схемы взаимосвязи информационных массивов и программных модулей для каждого варианта решения задачи определяется используемая совокупность технических средств.</font> </p> <p> <font>Надежность технологической составляющей системы, реализующей задачу, может быть определена на основании показателей надежности системы в целом, надежности совокупностей устройств, отдельных устройств, блоков и т.д., задействованных в технологическом процессе обработки информации. Декомпозиция системы на составляющие ее компоненты позволяет повысить точность и аналитичность результатов. Ограничением при декомпозиции является наличие или возможность получения сведений о надежности компонентов соответствующего уровня детализации. Кроме того, при увеличении количества элементов схемы надежности увеличивается сложность расчетов.</font> </p> <p> <font>На этапе разметки графической модели для определения времени работы устройств используются: эмпирические данные; сведения разработчиков используемых ППП, приведенные в технической документации; экспресс-оценки. Первый случай характерен для функционирующих систем, второй – для стадии рабочего проектирования, третий – для технического проектирования и предпроектной стадии. Любая структурная схема расчета надежности может быть представлен а набором последовательных и параллельных соединений.</font> </p> <p> <font>Однако в некоторых случаях бывает удобно использовать и более сложные структуры: скользящий резерв, треугольник, звезду, мостик, иерархию и т.д. Аналитические модели для этих структур можно найти в соответствующих справочниках.</font> </p> <p> <font>---------------------------------------------------------------------------------------------------------</font></p> " ],
 ["Примеры реализации отказоустойчивых вычислительных систем. Надежность отказоустойчивых вычислительных систем.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Один из наиболее эффективных способов создания катастрофоустойчивых систем</b></font><font> - вынесение основного хранилища данных за пределы центрального элемента вычислительной системы. Как правило, для этого применяются сети хранения данных (SAN). В них носители информации (обычно монолитные массивы дисковых носителей) объединены в собственную сеть, обособленную от ЛВС. Такие сети могут быть разнесены по площади, занимающей несколько километров, чем достигается дополнительное повышение надежности системы, связанное со снижением угроз от разрушений, землетрясений, наводнений и других стихийных бедствий.</font> </p> <p> <font>Технология SAN наиболее приемлема для создания катастрофоустойчивых систем и потому, что обладает широкими возможностями в плане масштабирования. Это объясняется реализацией SAN-решений на выделенной сети, что позволяет свободно добавлять системы хранения данных без реконфигурирования приложений, обслуживаемых ими. Однако сети хранения имеют ряд недостатков, поскольку SAN функционирует по принципу двухточечного соединения между сервером-хранилищем и дисками, при повреждении сервера сеть теряет свою целостность. Предотвратить ситуацию помогает резервирование каналов связи, обычно используемое в катастрофоустойчивых системах.</font></p> <p> <font>Одной из основных проблем построения вычислительных систем остается задача обеспечения их продолжительного функционирования.</font></p> <p> <font>Важнейшей характеристикой вычислительных систем является</font><font><b>надежность,</b></font><font> т.е. работа системы без сбоев в определенных условиях в течение определенного времени. Повышение надежности основано на принципе предотвращения неисправностей путем снижения интенсивности отказов и сбоев за счет применения электронных схем и компонентов с высокой и сверхвысокой степенью интеграции, снижения уровня помех, облегченных режимов работы схем, обеспечения тепловых режимов их работы, а также за счет совершенствования методов сборки аппаратуры. Главной целью повышения надежности систем является целостность хранящихся в них данных. Единицей измерения надежности является среднее время наработки на отказ (</font><font>MTBF</font><font> -</font><font>MeanTimeBetweenFailure</font><font>), иначе - среднее время безотказной работы.</font></p> <p> <font><b>Отказоустойчивость </b></font><font>- это способность вычислительной системы продолжать действия, заданные программой, после возникновения неисправностей. Введение отказоустойчивости требует избыточного аппаратного и программного обеспечения. Направления, связанные с предотвращением неисправностей и с отказоустойчивостью, - основные для обеспечения надежности. Концепции параллельности и отказоустойчивости вычислительных систем естественным образом связаны между собой, поскольку в обоих случаях требуются дополнительные функциональные компоненты. Поэтому на параллельных вычислительных системах достигается как наиболее высокая производительность, так и, во многих случаях, очень высокая надежность. Имеющиеся ресурсы избыточности в параллельных системах могут гибко использоваться как для повышения производительности, так и для повышения надежности. Структура многопроцессорных и многомашинных систем приспособлена к автоматической реконфигурации и обеспечивает возможность продолжения работы системы после возникновения неисправностей.</font></p> <p> <font>Для повышения надежности информационно-вычислительной системы идеальной схемой являются </font><font><b>кластерные системы.</b></font><font> Благодаря единому представлению, отдельные неисправные узлы или компоненты кластера могут быть без остановки работы и незаметно для пользователя заменены, что обеспечивает непрерывность и безотказную работу вычислительной системы даже в таких сложных приложениях как базы данных.</font></p> <p> <font><b>Основа надежности кластера</b></font><font> - это некоторое избыточное количество отказоустойчивых серверов (узлов), в зависимости от конфигурации кластера и его задач.</font></p> <p> <font><b>Основное назначение кластера</b></font><font>, ориентированного на максимальную надежность, состоит в обеспечении высокого уровня доступности (иначе - уровня готовности); высокой степени масштабируемости; удобства администрирования по сравнению с разрозненным набором компьютеров или серверов.</font></p> <p> <font>Кластерная конфигурация узлов, коммуникационного оборудования и памяти может обеспечить зеркалирование данных, резервирование компонентов самоконтроля и предупреждения, а также совместное использование ресурсов для минимизации потерь при отказе отдельных компонентов.</font></p> <p> <font><b>Решение, обеспечивающее повышенную отказоустойчивость сервера, должно включать:</b></font><font>компоненты с 'горячей' заменой; диски, вентиляторы, внешние накопители, устройства</font><font>PCI</font><font>, источники питания; избыточные источники питания и вентиляторы; автоматический перезапуск и восстановление системы; память с коррекцией ошибок; функции проверки состояния системы; превентивное обнаружение и анализ неисправностей; средства удаленного администрирования системы.</font></p> <p> <font>Во многих случаях кластер, как типичный представитель МВС, представляется пользователю и администратору как единая система. Наблюдение за системой включает сбор, хранение и извлечение таких показателей как использование центрального процессора и памяти, температура системы и процессора, скорость вращения вентиляторов; эти и другие параметры помогают пользователям и администраторам понимать общее состояние системы и эффективность ее использования.</font></p> <p> <font>Единое управление системами кластера позволяет максимально увеличить период безотказной работы, контроль и управление приложениями, операционными системами и аппаратными средствами. При этом все узлы кластера управляются из единого центра контроля.</font></p> <p> <font><b>Программы-утилиты</b></font><font> обеспечивают улучшение защиты и возможности восстановления данных, а также сглаживают последствия сбоев в работе оборудования для конечного пользователя. Операционная система кластера служит для управления всеми функциями кластера.</font></p> <p> <font>Программное обеспечение дает возможность организовать эффективную службу сопровождения и мониторинга решения, позволяя собирать данные на уровне узла, используя плату управления. Важным направлением является совершенствование и развитие библиотеки </font><font>MPI</font><font> и развитие системы отладки параллельных программ, работающих на МВС. К ней относятся отладчики, профилировщики, обеспечивающие контроль над прохождением задач.</font></p> <p> <font>В операционной системе</font><font>HP</font><font>-</font><font>UX</font><font>11</font><font>i</font><font>, созданной компанией</font><font>Hewlett</font><font>-</font><font>Packard</font><font> и предназначенной для обслуживания критически важных задач в</font><font>Internet</font><font>, для повышения надежности предусмотрена возможность подключения дополнительных процессоров без перезагрузки ОС. Применение файловой системы</font><font>Veritas</font><font> дает возможность резервного копирования в режиме</font><font>online</font><font> и дефрагментации дисков без выключения системы. Операционная система может отключать неработоспособные процессоры и блоки памяти без выключения системы.</font></p> <p> <font>Системы хранения должны быть представлены</font><font>RAID</font><font>-системами высокой готовности. Избыточные соединения должны обеспечивать доступность данных даже в случае выхода из строя узлов, контроллеров или кабелей. Соединение с системами хранения данных в кластере может быть реализовано как с использованием интерфейсов</font><font>SCSI</font><font>, так и на основе</font><font>FibreChannel</font><font> технологии.</font></p> <p> <font>Для синхронизации и совместной работы серверов в качестве кластера необходимы избыточные соединения между серверами, называемые 'системным соединением' (</font><font>privateinterconnect</font><font>). Системное соединение используется для передачи сигналов о состоянии серверов, а также применяется параллельными базами данных для передачи данных.</font></p> <p> <font>Катастрофоустойчивые решения создаются на основе разнесения узлов кластерной системы на сотни километров и обеспечения механизмов глобальной синхронизации данных между такими узлами.</font></p> <ol>  <li>  <h1> <font>Дисциплина: Проектирование информационных систем</font></h1> </li></ol> " ],
 ["Общая характеристика процесса проектирования ИС. Модели разработки ИС.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Проектирование информационных систем (ИС</b></font><font>) представляет сложный многоступенчатый вид деятельности, без научной организации которого немыслимо создание и использование современных сложных ИС, в том числе в образовании, предпринимательстве, менеджменте и других областях жизнедеятельности общества.</font></p> <p> <font><b>Проект ИС</b></font><font> – это проектно-конструкторская и технологическая документация, в которой представлено описание проектных решений по созданию и эксплуатации ИС в конкретной программно-технической среде.</font></p> <p> <font>Методы проектирования ИС можно классифицировать по степени автоматизации, использования типовых проектных решений и адаптивности предполагаемым изменениям.</font></p> <p> <img src='/static/i_0067f68bc106c46b_html_m11c1468f.png'></p> <p> <font><b>Ручное проектирование:</b></font><font> проектирование компонентов ИС осуществляется без использования специальных инструментальных программных средств, а программирование - на алгоритмических языках.</font> </p> <p> <font><b>Компьютерное проектирование</b></font><font>: генерация или конфигурация (настройка) проектных решений на основе использования специальных инструментальных программных средств.</font> </p> <p> <font><b>Оригинальное (индивидуальное) проектирование</b></font><font>: все виды проектных работ ориентированы на создание индивидуальных для каждого объекта проектов, которые в максимальной степени отражают все его особенности. </font> </p> <p> <font><b>Типовое проектирование</b></font><font>: выполняется на основе опыта, полученного при разработке индивидуальных проектов. Типовые проекты как обобщение опыта для некоторых групп организационно-экономических систем или видов работ в каждом конкретном случае связаны со множеством специфических особенностей и различаются по степени охвата функций управления, выполняемым работам и разрабатываемой проектной документации.</font> </p> <p> <font><b>Реконструкция</b></font><font>: адаптация проектных решений выполняется путем переработки соответствующих компонентов (перепрограммирования программных модулей).</font> </p> <p> <font><b>Параметризация:</b></font><font> проектные решения настраиваются (перегенерируются) в соответствии с изменяемыми параметрами.</font> </p> <p> <font><b>Реструктуризация:</b></font><font> изменяется модель проблемной области, на основе которой автоматически перегенерируются проектные решения.</font> </p> <p> <font><b>Средства проектирования ИС должны быть</b></font><font>: простыми в освоении и применении; технически, программно и информационно совместимыми; охватывать в совокупности все этапы жизненного цикла ИС; экономически целесообразными.</font></p> <p> <font>В каноническом проектировании используется каскадная или итерационная модель создания ИС.</font></p> <p> <font>Для проектирования ИС используют информационные модели, представляющие объекты и процессы в форме рисунков, схем, чертежей, таблиц, формул, текстов и т.п.</font> </p> <p> <font><b>Информационная модель</b></font><font> – это модель объекта, процесса или явления, в которой представлены информационные аспекты моделируемого объекта, процесса или явления.</font></p> <p> <font><b>Модели Разработки ИС.</b></font><font><b> Процессы создания моделей носят этапный характер</b></font><font>.</font> </p> <p> <font><b>Каскадная модель ИС</b></font><font> состоит из последовательно выполняемых этапов.</font></p> <p> <font>Каждый этап полностью заканчивается до того, как начнется следующий. Этапы не перекрываются во времени: следующий этап не начинается до тех пор, пока не завершится предыдущий. Возврат к предыдущим этапам не предусмотрен или всячески ограничен. Исправление ошибок происходит лишь на стадии тестирования. Результат появляется только в конце разработки ИС. Критерием появления результата является отсутствие ошибок и точное соответствие полученной ИС первоначальной её спецификации.</font><img src='/static/i_0067f68bc106c46b_html_6d726519.gif'> </p> <p> <font>Для этой модели характерна автоматизация отдельных несвязанных задач, не требующая выполнения информационной интеграции и совместимости, программного, технического и организационного сопряжения. В рамках решения отдельных задач каскадная модель по срокам разработки и надёжности оправдывала себя. Применение каскадной модели к большим и сложным проектам вследствие большой длительности процесса проектирования и изменчивости требований за это время приводит к их практической нереализуемости.</font></p> <p> <font><b>Поэтапная (итерационная) модель с промежуточным контролем</b></font><font><b> </b></font> </p> <p> <font><b>Итерационная модель</b></font><font> – это каскадная модель с промежуточным контролем. Ошибки или недоработки, обнаруженные на последующих стадиях устраняются путем возврата к предыдущим стадиям, т.е. итерационным путем. Схема итерационной модели.</font> </p> <p> <img src='/static/i_0067f68bc106c46b_html_506b0ce3.gif'></p> <p> <font>Следует обратить внимание на необходимость тщательной проработки начальных стадий проектирования. Факт: устранение ошибок при создании системы на стадии технического проекта стоит в 2 раза дороже, чем на предпроектной стадии, а на последующих стадиях в 10 раз и более.</font></p> <p> <font><b>Состав и содержание работ на стадиях:</b></font></p> <p> <font><b>1 стадия.</b></font><font> Главное на этой стадии – провести предпроектное обследование и дать технико-экономическое обоснование целесообразности создания системы. Формируются требования к функциональной части, обеспечивающие подсистему, а также методу проектирования.</font></p> <p> <font><b>2 стадия.</b></font><font> Включает научно- исследовательские работы, разработку нескольких вариантов системы и выбор оптимального. Выполняется ориентировачный расчет ожидаемой экономической эффективности и дается оценка научно-технического уровня систем. На основании сбора данных об отечественных и зарубежных системах. Выполняется исполнителем для заказчика как рекомендация для систем.</font></p> <p> <font><b>Стадия 3.</b></font><font> Техническое задание – это итог предроектной работы по созданию ИС. Это документ, направленный от заказчика к исполнителю как задание. Главным здесь является состав функциональных задач будущей системы и требования к обеспечивающим системам. Главный документ формируется в соответствии с ГОСТ 34.602-89 «Техническое задание на создание АС».</font></p> <p> <font><b>Стадия 4.</b></font><font> Ее цель – разработка предварительных решений. В экономических ИС применяется редко.</font></p> <p> <font><b>Стадия 5.</b></font><font> Это основная стадия. Здесь уточняется состав и количество технических средств системы к узлам обработки данных. В части орг-го обеспечения предлагаются изменения в орг-ой структуре управления (пример: сливаются подразделения). В части инф-го обеспечения выбирается система классификации и кодирования, разрабатывается классификатор технико-экономической инф-ции; проектируется БД. Главное – алгоритмизация функциональных задач (не программирование). Разрабатываются формы документов, составляется план мероприятий по подготовке объекта к внедрению системы, проводится уточненный расчет ожидаемой экономической эффективности.</font></p> <p> <font><b>Стадия 6.</b></font><font>Главное назначение – программирование или адаптация готовых программных средств. Здесь составляются технические инструкции, которые соответствуют должностным инструкциям, уточненным на стадии технического проектирования. При наличии проекта системы стадия технического проектирования. При наличии прототипа системы стадия технического проекта и рабочие документации объединяются в одну стадию – техно-рабочий проект.</font></p> <p> <font><b>Стадия 7.</b></font><font> Проводится опытная эксплуатация и сдача системы комиссии в постоянную эксплуатацию в соответствии с требованиями технологического задания.</font></p> <p> <font><b>Стадия 8.</b></font><font> Цель сопровождения системы – поддержание эксплуатационных характеристик на проектом уровне. Сопровождение осуществляется исполнителем. Формы сопровождения: консультационная помощь, устранение недостатков, предложения по развитию ИС.</font></p> <p> <font><b>Спиральная модель</b></font><font><b> </b></font> </p> <p> <font>В этой модели результат появляется фактически на каждом витке спирали. Этот промежуточный результат анализируется, и выявленные недостатки ИС побуждают проведение следующего витка спирали. Таким образом последовательно конкретизируются детали проекта и в итоге выбирается и доводится до реализации обоснованный вариант. Спираль завершается тогда, когда клиент и разработчик приходят к согласию относительно полученного результата.</font> </p> <p> <font>Модель состоит из последовательно расположенных этапов в пределах одного витка спирали. Внутри витка спирали этапы не имеют обратной связи. Анализ результата осуществляется в конце витка и инициирует новый виток спирали. Исправление ошибок происходит при тестировании на каждом витке спирали. Ошибки, которые не могут быть исправлены и требуют более глубоких структурных изменений, инициируют новый виток спирали. Этапы могут перекрываться во времени в пределах одного витка спирали. Результат появляется в конце каждого витка спирали и подвергается подробному анализу. При переходе от витка к витку происходит накопление и повторное использование программных средств, моделей и прототипов. Процесс ориентирован на развитие и модификацию ИС в процессе её проектирования, на анализ рисков и издержек во время проектирования.</font><img src='/static/i_0067f68bc106c46b_html_m1d4c9882.gif'> </p> <p> <font>Основная особенность данного метода состоит в концентрации сложности на начальных этапах разработки ИС (анализ, проектирование). Сложность и трудоёмкость последующих этапов в пределах одного витка спирали относительно невысокие. При этом методе предлагается способ снижения затрат в целом при разработке ИС (и любого иного ПО) за счёт предотвращения потенциальных ошибок на этапах её анализа и проектирования. При этом используется подход к организации проектирования ИС “сверху-вниз”, когда сначала определяется состав функциональных подсистем, а затем постановка отдельных задач.</font> </p> <p> <font>Процессы моделирования всё чаще осуществляются с использованием специальных компьютерных программных средств, позволяющих автоматизировать эту деятельность.</font></p> <p> <br> </p> " ],
 ["Методика и средства разработки пользовательского интерфейса ИС.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font><b>Пользовательский интерфейс (ПИ)</b></font><font> - система правил и средств, регламентирующая и обеспечивающая взаимодействие программы с пользователем. В понятие пользовательского интерфейса (ПИ) входит не только, и даже не столько, картинка на экране - трехмерная, анимированная или просто выполненная в модном дизайне, а способы взаимодействия пользователя с системой.</font></p> <p> <font>Интерфейс имеет важное значение для любой программной системы и является неотъемлемой ее составляющей, ориентированной, прежде всего, на конечного пользователя. Именно через интерфейс пользователь судит о прикладной программе в целом; более того, часто решение об использовании прикладной программы пользователь принимает по тому, насколько ему удобен и понятен пользовательский интерфейс. Вместе с тем, трудоемкость проектирования и разработки интерфейса достаточно велика. По оценкам специалистов в среднем она составляет более половины времени реализации проекта. Актуальным является снижение затрат на разработку и сопровождение программных систем или разработка эффективного программного инструментария.</font> </p> <p> <font>Одним из путей снижения затрат на разработку и сопровождение программных систем является наличие в инструментарии средств четвертого поколения, позволяющих на высоком уровне описать (специфицировать) создаваемое программное средство и далее по спецификации автоматически сгенерировать исполнимый код.</font> </p> <p> <font><b>В литературе не существует единой общепринятой классификации средств для разработки пользовательского интерфейса.</b></font><font> Так, программное обеспечение для разработки пользовательского интерфейса можно разделить на две основные группы -</font><font><b>инструментарий для разработки пользовательского интерфейса</b></font><font> (</font><font>toolkits</font><font>) и</font><font><b>высокоуровневые средства разработки интерфейса</b></font><font> (</font><font>higher</font><font>-</font><font>leveldevelopmenttools</font><font>). </font> </p> <p> <font><b>Инструментарий для разработки пользовательского интерфейса</b></font><font>, как правило, включает в себя библиотеку примитивов компонентов интерфейса (меню, кнопки, полосы прокрутки и др.) и предназначен для использования программистами.</font> </p> <p> <font><b>Высокоуровневые средства разработки интерфейса</b></font><font>могут быть использованы непрограммистами и снабжены языком, который позволяет специфицировать функции ввода-вывода, а также определять, используя технику непосредственного манипулирования, интерфейсные элементы. К таким средствам относятся построители диалога (</font><font>interfacebuilders</font><font>) и СУПИ - системы управления пользовательским интерфейсом (</font><font>UserInterfaceManagementSystems</font><font> -</font><font>UIMS</font><font>). Помимо СУПИ, некоторые авторы используют такие термины, как</font><font>UserInterfaceDevelopmentSystems</font><font> (</font><font>UIDS</font><font>) - системы разработки пользовательского интерфейса,</font><font>UserInterfaceDesignEnvironment</font><font> (</font><font>UIDE</font><font>) - среда разработки пользовательского интерфейса и др.</font> </p> <p> <font>Специализированные средства для разработки интерфейса позволяют упростить разработку пользовательского интерфейса, предлагая разработчику специфицировать компоненты пользовательского интерфейса с использованием языков спецификаций. </font><font><b>Можно выделить несколько основных способов спецификации интерфейса:</b></font> </p> <p> <font>1. Языковой, когда применяются специальные языки для задания синтаксиса интерфейса (декларативные, объектно-ориентированные, языки событий и др.).</font> </p> <p> <font>2. Графическая спецификация связана с определением интерфейса, как правило, средствами визуального программирования, программированием демонстраций и по примерам. Подобный способ поддерживает ограниченный класс интерфейсов.</font> </p> <p> <font>3. Спецификация интерфейса, основанная на объектно-ориентированном подходе, связана с принципом, называемым непосредственное манипулирование. Основное его свойство - взаимодействие пользователя с индивидуальными объектами, а не со всей системой как единым целым. Типичными компонентами, используемыми для манипуляций с объектами и управляющими функциями, являются обработчики, меню, зоны диалога, кнопки различного вида.</font> </p> <p> <font>4. Спецификация интерфейса по спецификации прикладной задачи. Здесь интерфейс создается автоматически по спецификации семантики прикладной задачи. Однако сложность описания интерфейса затрудняет возможности скорого появления систем, реализующих данный подход.</font> </p> <p> <font>Основной концепцией системы управления пользовательским интерфейсом (СУПИ) является отделение разработки пользовательского интерфейса от остального приложения. В настоящее время идея раздельного проектирования интерфейса и приложения либо закреплена в определении СУПИ либо является основным его свойством.</font> </p> <p> <font>В состав СУПИ определен как набор инструментов этапа разработки и периода исполнения. Инструменты этапа разработки оперируют с моделями интерфейса для построения их проектов. Они могут разделяться на две группы: интерактивные инструменты, например редакторы моделей, и автоматические инструменты, например генератор форм. Инструменты периода исполнения используют модель интерфейса для поддержки деятельности пользователя, например, для сбора и анализа используемых данных. </font> </p> <p> <font>Функциями СУПИ является содействие и облегчение разработки и сопровождения пользовательского интерфейса, а также управление взаимодействием между пользователем и прикладной программой.</font> </p> <p> <font>Таким образом, в настоящее время существует большое количество инструментальных средств для разработки интерфейса, поддерживающих различные методы его реализации.</font></p> " ],
 ["Инструментальные средства проектирования ИС.", " <p> <font>---------------------------------------------------------------------------------------------------------</font></p> <p> <font>Во многих случаях эффективную информационную систему не удается построить вручную. Это объясняется следующими причинами:</font> </p> <ul>  <li>  <p> <font>не обеспечивается достаточно глубокий анализ требований к данным</font> </p>  </li><li>  <p> <font>большая длительность процесса структурирования</font> </p> </li></ul> <ul>  <li>  <p> <font>трудность учета и согласования изменений, сделанных в системе несколькими разработчиками</font> </p>  </li><li>  <p> <font>ограничения сроков на разработку системы и т.д.</font> </p> </li></ul> <p> <font>При разработке крупных информационных систем происходит концентрация сложности на начальных этапах (анализ требований и проектирование спецификаций системы), в то время как сложность и трудоемкость последующих этапов остается относительно невысокой. Для преодоления сложностей начальных этапов разработки предназначен структурный анализ - метод исследования, которое начинается с общего обзора системы и затем детализуется, приобретая иерехическую структуру со все большим числом уровней. На каждом уровне расматривается ограниченное число элементов (обычно от 3 до 6-8), каждый из которых в свою очередь может быть декомпозирован на составляющие детали на следующем уровне. При этом соблюдаются строгие формальные правила записи информации (обычно используются диаграммы различных типов).</font> </p> <p> <font><b>Такая технология получила название</b></font><font> </font><font>CASE</font><font> (</font><font>ComputerAidedSoftwareEngeneering</font><font> - создание программного обеспечения с помощью компьютера).</font><font><b>Основные черты</b></font><font><b>CASE</b></font><font><b> - технологии:</b></font> </p> <ul>  <li>  <p> <font>использование методологии структурного проектирования 'сверху-вниз'</font> </p>  </li><li>  <p> <font>разработка прикладной системы представляется в виде последовательных четко определенных этапов:</font> </p> </li></ul> <p> <img src='/static/i_0067f68bc106c46b_html_59bc5bf5.png'></p> <ul>  <li>  <p> <font>поддержка всех этапов жизненного цикла информационной системы, начиная с самых общих описаний предметной области до получения и сопровождения готового программного продукта</font> </p>  </li><li>  <p> <font>поддержка репозитария, хранящего спецификации проекта информационной системы на всех этапах ее разработки</font> </p>  </li><li>  <p> <font>возможность одновременной работы с репозитарием многих разработчиков</font> </p>  </li><li>  <p> <font>автоматизация различных стандартных действий по проектироваанию и реализации приложения </font> </p> </li></ul> <p> <font><b>Как правило, </b></font><font><b>CASE</b></font><font><b>-системы поддерживают следующие этапы процесса разработки:</b></font> </p> <p> <font><b>Моделирование и анализ деятельности пользователей в рамках предметной области</b></font><font>. Здесь осуществляется функциональная декомпозиция, определение иерархий (вложенности) функций, построение диаграмм потоков данных. Перечень информационных объектов, которыми манипулируют функции, передается на следующий этап проектирования.</font> </p> <p> <font><b>Концептуальное моделирование</b></font><font> - создание модели 'сущность-связь' на основе перечня объектов, полученного на предыдущем этапе. Здесь уточняются характеристики каждого объекта (атрибуты), устанавливаются связи между объектами.</font> </p> <p> <font><b>Реляционное моделирование</b></font><font> - преобразование модели 'сущность-связь' в соответствии с требованиями реляционной модели (реляционная модель допускает только бинарные связи, не разрешает существование атрибутов у связей, не поддерживает связи типа</font><font>n</font><font> :</font><font>m</font><font>). Правила порождения реляционных отношений из модели 'сущность-связь' мы рассмотрим в разделе.</font> </p> <p> <font><b>Генерация схемы базы данных</b></font><font>. Результатом выполения данного этапа является набор</font><font>SQL</font><font>-операторов, описывающих создание схемы базы данных (</font><font>CREATETABLE</font><font>, </font><font>CREATEINDEX</font><font>,...), с учетом особенностей целевой СУБД.</font> </p> <p> <font><b>Генерация прототипов программных модулей по иерахии функций и потокам данных.</b></font><font> Для каждого модуля автоматически подготавливается описание используемых им фрагментов данных (таблицы, атрибуты, индексы), а также создаются заготовки экранных форм или отчетов.</font></p> <p> <font><b>К настоящему времени разработаны десятки методологий и инструментов проектирования.</b></font><font> Перечислим основные функции, выполняемые с помощью CASE-средств:</font></p> <ul>  <li>  <p> <font>формирование функциональной модели информационной системы. Наиболее распространенный метод реализации данной функции – метод SADT (технология IDEF0), позволяющий описать процесс в ИС в виде иерархии функций, связанных между собой входящими/исходящими потоками (материальными, финансовыми, информационными), управляющими воздействиями, исполнителями;</font></p>  </li><li>  <p> <font>формирование информационной модели, в том числе выделение объектов, описание их поведения и связей друг с другом. Наиболее распространенный метод реализации данной функции – метод IDEF1X, с помощью которого создается описание информационного пространства выполнения бизнес-процессов, содержащего информационные объекты (сущности), их свойства (атрибуты), отношения с другими объектами (связи);</font></p>  </li><li>  <p> <font>формирование архитектуры информационной системы. Наиболее распространенный метод реализации данной функции - DFD (Data Flow Diagrams – диаграммы потоков данных) - методология структурно- функционального анализа, описывающая внешние по отношению к системе источники и адресаты данных, логические функции, потоки данных и хранилища данных;</font></p>  </li><li>  <p> <font>структурирование (моделирование) данных, в том числе создание концептуальной модели структуры базы данных, автоматическая генерация физической модели БД и др. Наибольшее распространение получили: метод построения ER (Entity-Relationship)-диаграмм Чена и методология Уорнера-Орра DSSD (Data Structured Systems Development);</font></p>  </li><li>  <p> <font>быстрая разработка приложений (визуальное программирование). Средства, обеспечивающие данную функцию, называются RAD-средствами (Rapid Application Development). Они представляют собой визуальные дизайнеры приложений с автоматической кодогенерацией и позволяют создавать приложения в интерактивном режиме с помощью набора визуальных средств.</font></p> </li></ul>"]
]